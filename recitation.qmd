# Recitation

You will use posit.cloud to access problem sets as Quarto documents, using RStudio to write R code and answer questions. You'll just need to [sign up for a free account](https://login.posit.cloud/register).

I'll make the problem sets available in due course.

### Wait, what are you talking about?

There are a few different names involved here, so to try and clear things up:

-   **R** is a coding language for statistics and data analysis
-   **RStudio** is a software interface for using R
-   **Posit** is the name of the company that makes RStudio
-   **posit.cloud** provides a way of using RStudio in your web browser
-   **Quarto** is a document format which allows for code and text to be combined and nicely formatted as html webpages or pdf documents (or both!)

You can install R/RStudio/Quarto on your own computer for free and do things that way, but using posit.cloud simplifies things immensely.

## The general workflow

R is a programming language well-suited to interactive data exploration and analysis. It is widely used for psychological research, which is why we'll use it as our tool for learning and applying the statistical techniques covered in the lectures.

It might seem daunting if you've have no experience with coding, but the basic idea is that you have some data, like you are familiar with from a regular Excel or Google Sheets spreadsheet, and you perform operations on your data using functions a lot like you would in Excel/Sheets. For example, you might compute an average in Sheets by typing `=AVERAGE(A1:A10)`. In R you might type `mean(my_data$column_a)`. The specifics of the function names are different, but the basic idea is the same.

### RStudio

RStudio is the interface we'll use to write and run R code and see its output. The basic interface has 4 panels, each with a few tabs:

![](rstudio-interface-1.png)

-   Top-left: Code editor / data viewer
    -   You will edit your problem set document here
    -   You can run code within code chunks by clicking on a line of code and pressing `Ctrl/Cmd + Enter` on your keyboard, or pressing the green "play" button at the top of the chunk
-   Bottom-left: R console
    -   You can type code directly and run it by pressing enter.
    -   You won't be saving your code as a document like when you type in in the editor, so this is useful for testing something simple out
-   Top-right: Environment
    -   As you execute code you may be creating objects like sets of numbers of data.frames. Those objects will appear here.
    -   You can click the name of some objects, like data.frames, and it will open a view of the data as a tab in the editor pane
-   Bottom-right: Files/folders, Plots, Viewer, help window
    -   You can navigate the file tree, and when you "Render" your document you will see how it looks as a fully-formatted web page.

Once you start working on problem sets, my recommended workflow is to "Render" your document frequently with "Preview in Viewer Pane" selected. That will give you something like this:

![](rstudio-interface-2.png){fig-align="center"}

You'll have the editable problem set `.qmd` open on the left, and an expanded preview of the rendered document on the right. That should make it easy to see questions and instructions on the right, and add your own code solutions and text on the left, re-rendering as you make changes to see your work reflected in the preview on the right.

## Fundamentals of R

The problem sets include instructions and are designed to walk you through everything; no prior knowledge or experience is required. That said, here are some of the basics of working with R code to help you get started.

### Assignment

R has a fancy assignment operator: `<-`.[^recitation-1] You assign things to a name by typing something like:

[^recitation-1]: Most other coding languages tend to use a boring `=` for assignment. Sure it's nice not having to type an extra character, but there's a keyboard shortcut to quickly add an `<-` in RStudio: Option/Alt + `-`. And philosophically, the `<-` arrow conveys the inherent directionality of the assignment operation. The object is assigned to the name; the object and its name are not equal and so the `=` arguably gives a misleading impression of the two things being one and the same. (Also, to let you in on a secret, `=` also works for assignment in R.)

```{r}
#| eval: false

name <- thing
```

The `thing` there might be a set of numbers, an entire dataset, or something else. Giving it a name allows to you perform subsequent operations more easily, and choosing appropriate names makes your code easier to understand.

```{r}
original_numbers <- 1:10
original_numbers

doubled_numbers <- original_numbers * 2
doubled_numbers
```

### Functions

Almost everything happens inside functions.

```{r}
mean(original_numbers)
mean(doubled_numbers)
```

You can also nest functions inside one another.

```{r}
sqrt(mean(original_numbers))
```

A function generally has one or more "arguments", to which you supply parameters. For example, the `mean()` function's first argument is the set of numbers you want to compute the mean of; in the previous examples `original_numbers` and `doubled_numbers` were the parameters I supplied. You don't necessarily have to type the name of the argument, but it can be helpful. The `seq()` function, for example, produces a sequence of numbers according to three arguments, `from`, `to`, and `by`.

```{r}
seq(from = 1, to = 10, by = 2)
```

When you don't type the names of the arguments, R matches them by position, so this gives exactly the same output as the previous line of code:

```{r}
seq(1, 10, 2)
```

You can get help with a function (to see what arguments it accepts, for example) by typing a question mark followed by the function name (without parentheses) in your console.

```{r}
#| eval: false
?mean
```

Running the code will bring up the function's help documentation in RStudio's Help pane.

### Piping

You can string together different operations in a pipeline using the pipe operator: `|>`.[^recitation-2] The result of each line of code gets "piped" into the function on the next line as its first argument. For example, below I take some data (named `data`) and perform a series of operations, first selecting a subset of columns, then filtering rows based on whether the values in certain columns meet specified criteria, then I create (`mutate`) a new column averaging across existing columns; and lastly, I summarize the new column down to an average value.

[^recitation-2]: If you're looking at R code from beyond this handbook (e.g. looking up help elsewhere) you may see a different pipe: `%>%`. The `|>` pipe, called the "native" pipe, was only included as a feature of base R relatively recently. Until then, the `%>%` pipe was provided by an external package (called `magrittr`. [Get it?](https://magrittr.tidyverse.org/logo.png)). In practice the pipes work similarly, so you can often just replace `%>%` with `|>` and it'll work fine, but it's worth being aware of.

```{r}
#| eval: false

data |> 
  select(column_a, column_b) |> 
  filter(if_all(c(column_a, column_b), ~!is.na(.))) |> 
  mutate(column_c = rowSums(across(everything()))) |> 
  summarize(mean_sum = mean(column_c))

```

There's a lot going on there, and the specifics will become clearer as we work though this project. But using the pipe operator this way can make for relatively readable code.
