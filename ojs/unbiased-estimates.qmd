---
title: "(Un)Biased estimates"
format: html
execute: 
  echo: false
---


::: {#height-container}
:::

::: {#timeline-container}
:::

```{ojs}
jStat = require("https://cdn.jsdelivr.net/npm/jstat@latest/dist/jstat.min.js")
```

```{r}
data <- tibble::tibble(value = seq(-4, 4, length.out = 201),
                       density = dnorm(value)) |> 
  purrr::transpose()

ojs_define(data)

set.seed(6)
population <- rnorm(3000)

ojs_define(population)
```

```{ojs}
dodger = radius => {
  const radius2 = radius ** 2;
  const bisect = d3.bisector(d => d.x);
  const circles = [];
  return x => {
    const l = bisect.left(circles, x - radius);
    const r = bisect.right(circles, x + radius, l);
    let y = 0;
    for (let i = l; i < r; ++i) {
      const { x: xi, y: yi } = circles[i];
      const x2 = (xi - x) ** 2;
      const y2 = (yi - y) ** 2;
      if (radius2 > x2 + y2) {
        y = yi + Math.sqrt(radius2 - x2) + 1e-6;
        i = l - 1;
        continue;
      }
    }
    circles.splice(bisect.left(circles, x, l, r), 0, { x, y });
    return y;
  };
}

dodge = dodger(radius * 2 + 1);
```

```{ojs}
w = 800
h = 500
curveWidth = 500

radius = 1.4

x = d3.scaleLinear()
    .domain([-4, 4])
    .range([0, curveWidth])
y = d3.scaleLinear()
    .domain([0, 0.5])
    .range([h-100, 0])

xSD = d3.scaleLinear()
    .domain([-1, 1])
    .range([curveWidth, w])
ySD = d3.scaleLinear()
    .domain([0, 35])
    .range([100, h-100])

yy = d3.scaleLinear()
    .domain([-1, 1])
    .range([200, 0])
yAxis = g => g
    .attr("transform", `translate(1,0)`)
    .call(d3.axisLeft(yy))
xAxisGrid = d3.axisBottom(x).tickSize(-200).tickFormat('').ticks(10);
yAxisGrid = d3.axisLeft(y).tickSize(-300).tickFormat('').ticks(10);
    
line = d3.line()
    .x(d => x(d.value))
    .y(d => y(d.density))
```

```{ojs}

function mean(array) {
    return array.reduce((a, b) => a + b) / array.length;
}

function sample_variance(array) {
    const n = array.length
    const m = mean(array)
    return array.map(x => Math.pow(x - m, 2)).reduce((a, b) => a + b) / (n - 1);
}

function population_variance(array) {
    const n = array.length
    const m = mean(array)
    return array.map(x => Math.pow(x - m, 2)).reduce((a, b) => a + b) / n;
}

function get_descriptives (array) {
    return {mean: mean(array),
            sample_variance: sample_variance(array) - 1, 
            population_variance: population_variance(array) - 1}
}

function getNewData (array) {
    
    return {sample_estimates: getSampleEstimates(array)
            <!-- running_averages: getRunningAverages(array) -->
            }
}

function getSampleEstimates(array) {
    return [{param: "population", value: population_variance(array) - 1},
            {param: "sample",     value: sample_variance(array) - 1},
            {param: "mean",       value: mean(array)}]
}




```


```{ojs}
update_svg = {

  var sample = [];
  var sample_estimates = [];
  var running_averages = [{param: "population", value: [0], id: [0]},
                          {param: "sample",     value: [0], id: [0]},
                          {param: "mean",       value: [0], id: [0]}];
  
  var nSamplesDrawn = 0;
  
  var legendSelected = ["sample", "population"]
  
  var biasY = d3.scaleLinear()
    .range([h-100, 100])
    
  
    
  function clearData() {
    sample = [];
    sample_estimates = [];
    running_averages = [{param: "population",   value: [0], id: [0]},
                          {param: "sample",     value: [0], id: [0]},
                          {param: "mean",       value: [0], id: [0]}];
    nSamplesDrawn = 0;
    
    sampleCircles.selectAll('circle').remove()
    biasDots.selectAll("circle").remove()
    biasLines.selectAll("line").attr("x1", xSD(0)).attr("x2", xSD(0))
  }
  
  function updateRunningAverages(estimates) {
      var cur_n = nSamplesDrawn
      var prev_n = cur_n - 1
      
      var old = running_averages[0].value[prev_n]
      var new_pop = ((old * prev_n) + estimates[0].value)/cur_n
      running_averages[0].value.push(new_pop)
      
      var old = running_averages[1].value[prev_n]
      var new_sam = ((old * prev_n) + estimates[1].value)/cur_n
      running_averages[1].value.push(new_sam)
      
      var old = running_averages[2].value[prev_n]
      var new_mea = ((old * prev_n) + estimates[2].value)/cur_n
      running_averages[2].value.push(new_mea)
    
      running_averages[0].id.push(cur_n)
      running_averages[1].id.push(cur_n)
      running_averages[2].id.push(cur_n)

}
  
  function newSample() {
    
    nSamplesDrawn++
    
    for (var i = 0; i < 10; i++) {
      sample[i] = jStat.normal.sample(0, 1);
    }
    
    var estimates = getSampleEstimates(sample)
    estimates.map(d => d.id = nSamplesDrawn);
    sample_estimates.push(estimates)
    
    estimates.map(d => d.id = nSamplesDrawn);
    sample_estimates.push(estimates)
    
    updateRunningAverages(estimates);
    
    updateBiasChart();
    updateSampleCircles();
    updateLines();
    updatePath();
    
    svg.select("#counter").text(nSamplesDrawn)
  }
  
  function updateBiasChart() {
      biasY.domain([nSamplesDrawn-35, nSamplesDrawn])
      
      biasDots.selectAll("circle").remove()
        biasDots.selectAll("circle")
          .data(sample_estimates.flat().slice(-210))
          .enter()
          .append("circle")
            .attr("r", 5)
            .attr("cx", d => xSD(d.value))
            .attr("cy", d => biasY(d.id))
            .attr("id", d => d.param + "-estimate")
        
        biasDots.selectAll("#mean-estimate").attr("class", meanClass)
  }
  
  function updateLines() {

      const dat = [
        running_averages[0].value[nSamplesDrawn],
        running_averages[1].value[nSamplesDrawn],
        running_averages[2].value[nSamplesDrawn]
      ]
      
      biasLines.selectAll("line")
        .data(dat)
        .attr("x1", d => xSD(d)).attr("x2", d => xSD(d))
  }
  
  function updatePath() {
      biasPaths.selectAll("g").remove()
      
      biasPaths.selectAll("g")
        .data(running_averages)
        .enter()
        .append("g")
        .attr("class", "bias-paths")
        .append("path")
          .attr("d", d => biasLine(d.id, d.value))
          .attr("id", d => d.param + "-path")
          
     <!-- biasPaths.selectAll("#mean-path").attr("class", meanClass)  -->
  }
  
  function updateSampleCircles() {
    sampleCircles.selectAll('circle').remove()
    sampleCircles.selectAll('circle')
      .data(sample)
      .enter().append("circle")
      .attr("class", "sample")
      .attr("r", 5)
      .attr("cx", d => x(d))
      .attr("cy", h - 80)
  }
  
  const sleep = (milliseconds) => {
    return new Promise(resolve => setTimeout(resolve, milliseconds))
  }
  var playing = false;
  function playButtonClicked() {
    
    playing = !playing; 
    console.log(playing);
  
  play_button.text(function(){
    if(playing) {
      return "◼"
  } else {
    return "▶"
  }
  })
  
  if (playing) {
    continuouslyDrawSamples();
  }
  }
  
  function continuouslyDrawSamples() {
    if (playing) {
      newSample();
      sleep(200).then(continuouslyDrawSamples);
    }
  }
  
    
  var popData = [];
  for (let i = 0; i < population.length; ++i) {
    const cx = x(population[i]);
    const cy = dodge(cx) - radius - 1;
    popData.push({cx: cx, cy: cy})
  }
  


  
  d3.select("#heights-svg").remove()
  
  const svg = d3.select("#height-container")
    .append("svg").attr("id", "heights-svg")
    .attr("width", w).attr("height", h)
    
  const pop = svg.append("g")

  
  pop.selectAll("circle")
      .data(popData)
      .enter()
      .append("circle")
        .attr("class", "pop")
        .attr("cx", d => d.cx)
        .attr("cy", d => (h - 100) - d.cy)
        .attr("r", radius)
  pop.append("text")
    .text("POPULATION")
    .attr("x", curveWidth/2)
    .attr("y", h - 150)
    .attr("text-anchor", "middle")
      
  const curve = svg.append("path")
      .attr("d", line(data))
      .attr("stroke", "black")
      .attr("stroke-width", 3)
      .attr("fill", "none")
      .attr("class", "invertable")
      
  const sdAxis = svg.append("g").attr("class", "axis invertable")
  const axisLabels = [-0.75, -0.5, -0.25, 0, 0.25, 0.5, 0.75]
  sdAxis.selectAll("line")
    .data(axisLabels)
    .enter().append("line")
      .attr("class", function(d,i){
        if(i==3) {return "axis-major"} else {return "axis-minor"}
      })
      .attr("x1", d => xSD(d))
      .attr("x2", d => xSD(d))
      .attr("y1", ySD(0))
      .attr("y2", ySD(34))
  sdAxis.selectAll("text").data(axisLabels).enter().append("text")
      .text(d => d)
      .attr("x", d => xSD(d))
      .attr("y", ySD(-1))
      .attr("text-anchor", "middle")
  sdAxis.append("text").attr("class", "bias-chart-title")
    .text("Under/Over-Estimation of parameter")
    .attr("x", xSD(0))
    .attr("y", ySD(-4))
    .attr("text-anchor", "middle")
    
  var showMean = false
  var meanClass = showMean === true ? "show" : "hide"
  
  function showHideMean() {
    showMean = !showMean
    meanClass = showMean === true ? "show" : "hide"
    svg.selectAll("#mean-estimate, #mean-line, #mean-path").attr("class", meanClass)
    
    biasPaths.select("#mean-estimate").attr("class", meanClass)
    <!-- svg.select("#mean-path").attr("class", meanClass) -->
    
  }
  
  const sampleCircles = svg.append("g")
  const biasChart = svg.append("g")
  const biasDots = biasChart.append("g")
  const biasLines = biasChart.append("g")
  
  const biasLegend = svg.append("g")
  biasLegend.append("circle").attr("id", "legend-mean")
    .attr("cx", xSD(0))
    .attr("cy", ySD(-3))
    .attr("r", 5)
    .on("click", showHideMean)
  
  
  biasLines.selectAll("line")
    .data(running_averages)
    .enter()
    .append("line").attr("id", d => d.param + "-line")
      .attr("stroke-width", 2)
      .attr("x1", d => xSD(0)).attr("x2", d => xSD(0))
      .attr("y1", ySD(0))
      .attr("y2", ySD(34))
        
   svg.selectAll("#mean-estimate, #mean-line, #mean-path").attr("class", meanClass)
         
        
        
    const sample_counter = svg.append("g")
    sample_counter.append("text")
        .text(d => "Total samples: ")
        .attr("x", 500)
        .attr("y", 450)
        .attr("text-anchor", "end")
    sample_counter.append("text").attr("id", "counter")
        .text(d => "0")
        .attr("x", 505)
        .attr("y", 450)
        .attr("text-anchor", "start")
        
  
  
<!-- buttons -->
  const reset_button = svg.append("text")
  .attr("class", "button invertable")
    .html("&#x21bb;")
    .attr("x", 10)
    .attr("y", h - 50)
    .on("click", clearData)
  
  const button = svg.append("text")
  .attr("class", "button invertable")
    .text("ᐳ")
    .attr("x", 30)
    .attr("y", h - 50)
    .on("click", newSample)
    
  const play_button = svg.append("text").attr("id", "play-button")
  .attr("class", "button invertable")
    .attr("x", 50)
    .attr("y", h - 50)
    .html("►")
    .on("click", playButtonClicked)
    

    
  <!-- newSample(); -->
  
  
  const timeX = d3.scaleLinear()
    .domain([0,500])
    .range([0, 300])
  const timeY = d3.scaleLinear()
    .domain([-1, 1])
    .range([200, 0])
  const biasLine = function(x, y){
      return d3.line()
      .x(function(d,i) { return timeX(x[i]); }) 
      .y(function(d,i) { return timeY(y[i]); })
      (Array(x.length));
  }
  
  const timesvg =   d3.select("#timeline-container")
    .append("svg").attr("id", "timeline-svg")
    .attr("width", 300).attr("height", 200)

  timesvg.append("g")
      .selectAll("line")
      .data([-.75, -.5, -.25, 0, .25])
      .enter().append("line")
        .attr("x1", d => timeX(1)).attr("x2", d => timeX(500))
        .attr("y1", d => timeY(d)).attr("y2", d => timeY(d))
        .attr("class", function(d){if(d===0){return"axis-major"}else{return "axis-minor"}})
    
  const biasPaths = timesvg.append("g").style("stroke-width", 2)

}

```


::: {.content-hidden}
# CSS
:::

```{css}

.axis {
  font-size: 0.75em;
}
.bias-chart-title {
  font-size: 1.2em;
}
.axis-major {
  stroke: black;
  stroke-width: 2;
}
.axis-minor {
  stroke: #ddd;
  stroke-width: 1;
}

.pop, .sample {
  fill: lightblue;
}
.pop {
  stroke: lightblue;
}
.sample {
  stroke: white;
}

#sample-estimate, #sample-line {
  fill: var(--link-color);
  stroke: var(--link-color);
}

#mean-estimate, #mean-line {
  fill: plum;
  stroke: plum;
}

#population-estimate, #population-line {
  fill: pink;
  stroke: pink;
}

.bias-paths {
  fill: none
}
#mean-path {
  stroke: plum;
}
#sample-path {
  stroke: var(--link-color);
}
#population-path {
  stroke: pink;
}

.hide {
  fill: none !important;
  stroke: none !important;
}


.button {
   font-family: Times;
}
.button:hover {
  fill: red;
  cursor: pointer;
}

#legend-mean {
  fill: plum;
}



<!-- .show-mean { -->
<!--   opacity: 1; -->
<!-- } -->
<!-- .hide-mean { -->
<!--   opacity: 0.5 -->
<!-- } -->

```

