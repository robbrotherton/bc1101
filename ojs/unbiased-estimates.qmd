---
title: "(Un)Biased estimated"
format: html
execute: 
  echo: false
---

::: {#height-container}
:::

```{ojs}
jStat = require("https://cdn.jsdelivr.net/npm/jstat@latest/dist/jstat.min.js")
```

```{r}
data <- tibble::tibble(value = seq(-4, 4, length.out = 201),
                       density = dnorm(value)) |> 
  purrr::transpose()

ojs_define(data)
```

```{ojs}

w = 800
h = 500
  
x = d3.scaleLinear()
    .domain([-4, 4])
    .range([0, 500])
y = d3.scaleLinear()
    .domain([0, 0.41])
    .range([h-100, 0])

xSD = d3.scaleLinear()
    .domain([-0.5, 0.5])
    .range([550, 650])
<!-- ySD = d3.scaleLinear() -->
<!--     .domain([0, 0.41]) -->
<!--     .range([h-100, 0]) -->
    
line = d3.line()
    .x(d => x(d.value))
    .y(d => y(d.density))
    

update_svg = {

  function sd (array) {
    const n = array.length
    const mean = array.reduce((a, b) => a + b) / n
    return Math.sqrt(array.map(x => Math.pow(x - mean,   2)).reduce((a, b) => a + b) / n)
  }
  
  var sdArray = [];
  var sample = [];
    
  function newSample() {
    for (var i = 0; i < 10; i++) {
      sample[i] = jStat.normal.sample(0, 1);
    }
    console.log(sample);
    sdArray.unshift(sd(sample));
    if (sdArray.length > 35) sdArray.splice(35, 1);
    console.log(sdArray);
    
    updateSD();
    updateSampleCircles();
  }
  
  function updateSD() {
    sdText.selectAll("circle").remove()
    
    sdText.selectAll("circle")
      .data(sdArray)
      .enter().append('circle')
      .attr("fill", "red")
      .attr("r", 5)
      .attr("cx", d => xSD(d))
      .attr("cy", function(d,i){return h - (i-1) * 15})
      .transition().duration(300)
      .attr("cy", function(d,i){return h - i * 15})
  }
  
  function updateSampleCircles() {
    console.log("updating circles");
    sampleCircles.selectAll('circle').remove()
    sampleCircles.selectAll('circle')
      .data(sample)
      .enter().append("circle")
      .attr("fill", "lightblue")
      .attr("r", 10)
      .attr("cx", d => x(d))
      .attr("cy", h - 50)
      .attr("opacity", 0)
      .transition().duration(0).delay(function(d, i){return i*50}).attr("opacity", 1);
  }

  
  d3.select("#heights-svg").remove()
  
  const svg = d3.select("#height-container")
    .append("svg").attr("id", "heights-svg")
    .attr("width", w).attr("height", h)
    
  const curve = svg.append("path")
      .attr("d", line(data))
      .attr("stroke", "black")
      .attr("stroke-width", 3)
      .attr("fill", "none")
      .attr("class", "invertable")
      
  const SDline = svg.append("line")
    .attr("x1", xSD(1))
    .attr("x2", xSD(1))
    .attr("y1", 0)
    .attr("y2", h)
    .attr("stroke", "black")
    
  const sdText = svg.append("g")
  const sampleCircles = svg.append("g")
  
  const button = svg.append("text")
    .html("&#x21bb;")
    .attr("x", 10)
    .attr("y", h - 50)
    .on("click", newSample)
    
  
  <!-- sdText.selectAll("circle") -->
  <!--       .data(sdArray) -->
  <!--       .enter() -->
  <!--       .append("circle") -->
  <!--       .attr("fill", "red") -->
  <!--       .attr("r", 5) -->
  <!--       .attr("cx", d => xSD(d)) -->
  <!--       .attr("cy", function(d,i){return 20 + i * 30}) -->
  
  newSample();


}

```

