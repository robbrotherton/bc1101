{
  "hash": "81862d316e4e381dc2ddc93136452bda",
  "result": {
    "markdown": "---\ntitle: \"(Un)Biased estimates\"\nformat: html\ntoc: false\nexecute: \n  echo: false\n---\n\n\n\n::: {#height-container}\n:::\n\n::: {#timeline-container}\n:::\n\n\n```{ojs}\njStat = require(\"https://cdn.jsdelivr.net/npm/jstat@latest/dist/jstat.min.js\")\n```\n\n::: {.cell}\n\n:::\n\n```{ojs}\ndodger = radius => {\n  const radius2 = radius ** 2;\n  const bisect = d3.bisector(d => d.x);\n  const circles = [];\n  return x => {\n    const l = bisect.left(circles, x - radius);\n    const r = bisect.right(circles, x + radius, l);\n    let y = 0;\n    for (let i = l; i < r; ++i) {\n      const { x: xi, y: yi } = circles[i];\n      const x2 = (xi - x) ** 2;\n      const y2 = (yi - y) ** 2;\n      if (radius2 > x2 + y2) {\n        y = yi + Math.sqrt(radius2 - x2) + 1e-6;\n        i = l - 1;\n        continue;\n      }\n    }\n    circles.splice(bisect.left(circles, x, l, r), 0, { x, y });\n    return y;\n  };\n}\n\ndodge = dodger(radius * 2 + 1);\n```\n\n```{ojs}\nw = 800\nh = 500\ncurveWidth = 500\n\nradius = 1.4\n\nx = d3.scaleLinear()\n    .domain([-4, 4])\n    .range([0, curveWidth])\ny = d3.scaleLinear()\n    .domain([0, 0.5])\n    .range([h-100, 0])\n\nxSD = d3.scaleLinear()\n    .domain([-1, 1])\n    .range([curveWidth, w])\nySD = d3.scaleLinear()\n    .domain([0, 35])\n    .range([100, h-100])\n\nyy = d3.scaleLinear()\n    .domain([-1, 1])\n    .range([200, 0])\nyAxis = g => g\n    .attr(\"transform\", `translate(1,0)`)\n    .call(d3.axisLeft(yy))\nxAxisGrid = d3.axisBottom(x).tickSize(-200).tickFormat('').ticks(10);\nyAxisGrid = d3.axisLeft(y).tickSize(-300).tickFormat('').ticks(10);\n    \nline = d3.line()\n    .x(d => x(d.value))\n    .y(d => y(d.density))\n```\n\n```{ojs}\n\nfunction mean(array) {\n    return array.reduce((a, b) => a + b) / array.length;\n}\n\nfunction sample_variance(array) {\n    const n = array.length\n    const m = mean(array)\n    return array.map(x => Math.pow(x - m, 2)).reduce((a, b) => a + b) / (n - 1);\n}\n\nfunction population_variance(array) {\n    const n = array.length\n    const m = mean(array)\n    return array.map(x => Math.pow(x - m, 2)).reduce((a, b) => a + b) / n;\n}\n\nfunction get_descriptives (array) {\n    return {mean: mean(array),\n            sample_variance: sample_variance(array) - 1, \n            population_variance: population_variance(array) - 1}\n}\n\nfunction getNewData (array) {\n    \n    return {sample_estimates: getSampleEstimates(array)\n            <!-- running_averages: getRunningAverages(array) -->\n            }\n}\n\nfunction getSampleEstimates(array) {\n    return [{param: \"population\", value: population_variance(array) - 1},\n            {param: \"sample\",     value: sample_variance(array) - 1},\n            {param: \"mean\",       value: mean(array)}]\n}\n\n```\n\n```{ojs}\nupdate_svg = {\n\n  var sample = [];\n  var sample_estimates = [];\n  var running_averages = [{param: \"population\", value: [0], id: [0]},\n                          {param: \"sample\",     value: [0], id: [0]},\n                          {param: \"mean\",       value: [0], id: [0]}];\n  \n  var nSamplesDrawn = 0;\n  \n  var legendSelected = [\"sample\", \"population\"]\n  \n  var biasY = d3.scaleLinear()\n    .range([h-100, 100])\n    \n  \n    \n  function clearData() {\n    sample = [];\n    sample_estimates = [];\n    running_averages = [{param: \"population\",   value: [0], id: [0]},\n                          {param: \"sample\",     value: [0], id: [0]},\n                          {param: \"mean\",       value: [0], id: [0]}];\n    nSamplesDrawn = 0;\n    \n    sampleCircles.selectAll('circle').remove()\n    biasDots.selectAll(\"circle\").remove()\n    biasLines.selectAll(\"line\").attr(\"x1\", xSD(0)).attr(\"x2\", xSD(0))\n  }\n  \n  function updateRunningAverages(estimates) {\n      var cur_n = nSamplesDrawn\n      var prev_n = cur_n - 1\n      \n      var old = running_averages[0].value[prev_n]\n      var new_pop = ((old * prev_n) + estimates[0].value)/cur_n\n      running_averages[0].value.push(new_pop)\n      \n      var old = running_averages[1].value[prev_n]\n      var new_sam = ((old * prev_n) + estimates[1].value)/cur_n\n      running_averages[1].value.push(new_sam)\n      \n      var old = running_averages[2].value[prev_n]\n      var new_mea = ((old * prev_n) + estimates[2].value)/cur_n\n      running_averages[2].value.push(new_mea)\n    \n      running_averages[0].id.push(cur_n)\n      running_averages[1].id.push(cur_n)\n      running_averages[2].id.push(cur_n)\n\n}\n\n  function updateVisibility() {\n  \n    var params = [\"population\", \"sample\", \"mean\"]\n    \n    for (var i = 0; i < 3; i++) {\n      var param = params[i]\n      var elementIds = \"#\" + param + \"-estimate, #\" + param + \"-line\"\n      \n      svg.selectAll(elementIds).classed(\"hide\", legendStatus[i].hide)\n      timesvg.selectAll(\"#\" + param + \"-path\").classed(\"hide\", legendStatus[i].hide)\n    }\n  }\n  \n  function newSample() {\n    \n    nSamplesDrawn++\n    \n    for (var i = 0; i < 10; i++) {\n      sample[i] = jStat.normal.sample(0, 1);\n    }\n    \n    var estimates = getSampleEstimates(sample)\n    estimates.map(d => d.id = nSamplesDrawn);\n    sample_estimates.push(estimates)\n    \n    estimates.map(d => d.id = nSamplesDrawn);\n    sample_estimates.push(estimates)\n    \n    updateRunningAverages(estimates);\n    \n    updateBiasChart();\n    updateSampleCircles();\n    updateLines();\n    updatePath();\n    updateVisibility();\n    \n    svg.select(\"#counter\").text(nSamplesDrawn)\n    \n    <!-- svg.selectAll(\"#population-estimate, #population-line, #population-path\").classed(\"hide\", legendStatus[0].hide) -->\n    <!-- svg.selectAll(\"#sample-estimate, #sample-line, #sample-path\").classed(\"hide\", legendStatus[1].hide) -->\n    <!-- svg.selectAll(\"#mean-estimate, #mean-line, #mean-path\").classed(\"hide\", legendStatus[2].hide) -->\n  }\n  \n  function updateBiasChart() {\n      biasY.domain([nSamplesDrawn-35, nSamplesDrawn])\n      \n      biasDots.selectAll(\"circle\").remove()\n        biasDots.selectAll(\"circle\")\n          .data(sample_estimates.flat().slice(-210))\n          .enter()\n          .append(\"circle\")\n            .attr(\"r\", 3)\n            .attr(\"cx\", d => xSD(d.value))\n            .attr(\"cy\", d => biasY(d.id))\n            .attr(\"id\", d => d.param + \"-estimate\")\n  }\n  \n  function updateLines() {\n\n      const dat = [\n        running_averages[0].value[nSamplesDrawn],\n        running_averages[1].value[nSamplesDrawn],\n        running_averages[2].value[nSamplesDrawn]\n      ]\n      \n      biasLines.selectAll(\"line\")\n        .data(dat)\n        .attr(\"x1\", d => xSD(d)).attr(\"x2\", d => xSD(d))\n  }\n  \n  function updatePath() {\n      biasPaths.selectAll(\"g\").remove()\n      \n      biasPaths.selectAll(\"g\")\n        .data(running_averages)\n        .enter()\n        .append(\"g\")\n        .attr(\"class\", \"bias-paths\")\n        .append(\"path\")\n          .attr(\"d\", d => biasLine(d.id, d.value))\n          .attr(\"id\", d => d.param + \"-path\")\n\n  }\n  \n  function updateSampleCircles() {\n    sampleCircles.selectAll('circle').remove()\n    sampleCircles.selectAll('circle')\n      .data(sample)\n      .enter().append(\"circle\")\n      .attr(\"class\", \"sample\")\n      .attr(\"r\", 5)\n      .attr(\"cx\", d => x(d))\n      .attr(\"cy\", h - 80)\n  }\n  \n  const sleep = (milliseconds) => {\n    return new Promise(resolve => setTimeout(resolve, milliseconds))\n  }\n  var playing = false;\n  function playButtonClicked() {\n    \n    playing = !playing; \n    console.log(playing);\n  \n  play_button.text(function(){\n    if(playing) {\n      return \"◼\"\n  } else {\n    return \"▶\"\n  }\n  })\n  \n  if (playing) {\n    continuouslyDrawSamples();\n  }\n  }\n  \n  function continuouslyDrawSamples() {\n    if (playing) {\n      newSample();\n      sleep(200).then(continuouslyDrawSamples);\n    }\n  }\n  \n    \n  var popData = [];\n  for (let i = 0; i < population.length; ++i) {\n    const cx = x(population[i]);\n    const cy = dodge(cx) - radius - 1;\n    popData.push({cx: cx, cy: cy})\n  }\n  \n\n\n  \n  d3.select(\"#heights-svg\").remove()\n  \n  const svg = d3.select(\"#height-container\")\n    .append(\"svg\").attr(\"id\", \"heights-svg\")\n    .attr(\"width\", w).attr(\"height\", h)\n    \n  const pop = svg.append(\"g\")\n  const sampleCircles = svg.append(\"g\")\n  const biasChart = svg.append(\"g\")\n  const biasDots = biasChart.append(\"g\")\n  const biasLines = biasChart.append(\"g\")\n  \n  pop.selectAll(\"circle\")\n      .data(popData)\n      .enter()\n      .append(\"circle\")\n        .attr(\"class\", \"pop\")\n        .attr(\"cx\", d => d.cx)\n        .attr(\"cy\", d => (h - 100) - d.cy)\n        .attr(\"r\", radius)\n  pop.append(\"text\")\n    .text(\"POPULATION\")\n    .attr(\"x\", curveWidth/2)\n    .attr(\"y\", h - 150)\n    .attr(\"text-anchor\", \"middle\")\n      \n  const curve = svg.append(\"path\")\n      .attr(\"d\", line(data))\n      .attr(\"stroke\", \"black\")\n      .attr(\"stroke-width\", 3)\n      .attr(\"fill\", \"none\")\n      .attr(\"class\", \"invertable\")\n      \n  const sdAxis = svg.append(\"g\").attr(\"class\", \"axis invertable\")\n  const axisLabels = [-0.75, -0.5, -0.25, 0, 0.25, 0.5, 0.75]\n  sdAxis.selectAll(\"line\")\n    .data(axisLabels)\n    .enter().append(\"line\")\n      .attr(\"class\", function(d,i){\n        if(i==3) {return \"axis-major\"} else {return \"axis-minor\"}\n      })\n      .attr(\"x1\", d => xSD(d))\n      .attr(\"x2\", d => xSD(d))\n      .attr(\"y1\", ySD(0))\n      .attr(\"y2\", ySD(34))\n  sdAxis.selectAll(\"text\").data(axisLabels).enter().append(\"text\")\n      .text(d => d)\n      .attr(\"x\", d => xSD(d))\n      .attr(\"y\", ySD(-1))\n      .attr(\"text-anchor\", \"middle\")\n  sdAxis.append(\"text\").attr(\"class\", \"bias-chart-title\")\n    .text(\"Under/Over-Estimation of parameter\")\n    .attr(\"x\", xSD(0))\n    .attr(\"y\", ySD(-4))\n    .attr(\"text-anchor\", \"middle\")\n    \n  var legendStatus = [{param: \"population\", hide: false},\n                      {param: \"sample\",     hide: false},\n                      {param: \"mean\",       hide: true}]\n                      \n  \n  function updateLegendStatus(param) {\n    var index;\n    if (param===\"population\") {index = 0;} \n    if (param===\"sample\") {index = 1;} \n    if (param===\"mean\") {index = 2;} \n    \n    legendStatus[index].hide = !legendStatus[index].hide\n    \n    var classes = \"#\" + param + \"-estimate, #\" + param + \"-line\"\n    svg.selectAll(classes).classed(\"hide\", legendStatus[index].hide)\n    timesvg.selectAll(\"#\" + param + \"-path\").classed(\"hide\", legendStatus[index].hide)\n    svg.select(\"#\" + param + \"-legend\").classed(\"legend-unselected\", legendStatus[index].hide)\n  }\n  \n  \n  \n  \n  const biasLegend = svg.append(\"g\")\n  biasLegend.selectAll(\"circle\")\n    .data(legendStatus)\n    .enter()\n    .append(\"circle\").attr(\"id\", d => d.param + \"-legend\")\n    .attr(\"cx\", (d,i) => xSD((i-1)*0.5))\n    .attr(\"cy\", ySD(-3))\n    .attr(\"r\", 5)\n    .attr(\"class\", \"legend-dots\")\n    .classed(\"legend-unselected\", d => d.hide)\n    .on(\"click\", function(event, data){updateLegendStatus(data.param);})\n  \n\n  \n  biasLines.selectAll(\"line\")\n    .data(running_averages)\n    .enter()\n    .append(\"line\").attr(\"id\", d => d.param + \"-line\")\n      .attr(\"stroke-width\", 2)\n      .attr(\"x1\", d => xSD(0)).attr(\"x2\", d => xSD(0))\n      .attr(\"y1\", ySD(0))\n      .attr(\"y2\", ySD(34))\n        \n\n         \n        \n        \n    const sample_counter = svg.append(\"g\")\n    sample_counter.append(\"text\")\n        .text(d => \"Total samples: \")\n        .attr(\"x\", 500)\n        .attr(\"y\", 450)\n        .attr(\"text-anchor\", \"end\")\n    sample_counter.append(\"text\").attr(\"id\", \"counter\")\n        .text(d => \"0\")\n        .attr(\"x\", 505)\n        .attr(\"y\", 450)\n        .attr(\"text-anchor\", \"start\")\n        \n  \n  \n<!-- buttons -->\n  const reset_button = svg.append(\"text\")\n  .attr(\"class\", \"button invertable\")\n    .html(\"&#x21bb;\")\n    .attr(\"x\", 10)\n    .attr(\"y\", h - 50)\n    .on(\"click\", clearData)\n  \n  const button = svg.append(\"text\")\n  .attr(\"class\", \"button invertable\")\n    .text(\"ᐳ\")\n    .attr(\"x\", 30)\n    .attr(\"y\", h - 50)\n    .on(\"click\", newSample)\n    \n  const play_button = svg.append(\"text\").attr(\"id\", \"play-button\")\n  .attr(\"class\", \"button invertable\")\n    .attr(\"x\", 50)\n    .attr(\"y\", h - 50)\n    .html(\"►\")\n    .on(\"click\", playButtonClicked)\n    \n\n    \n  <!-- newSample(); -->\n  \n  \n  const timeX = d3.scaleLinear()\n    .domain([0,500])\n    .range([0, 300])\n  const timeY = d3.scaleLinear()\n    .domain([-1, 1])\n    .range([200, 0])\n  const biasLine = function(x, y){\n      return d3.line()\n      .x(function(d,i) { return timeX(x[i]); }) \n      .y(function(d,i) { return timeY(y[i]); })\n      (Array(x.length));\n  }\n  \n  const timesvg =   d3.select(\"#timeline-container\")\n    .append(\"svg\").attr(\"id\", \"timeline-svg\")\n    .attr(\"width\", 300).attr(\"height\", 200)\n\n  timesvg.append(\"g\")\n      .selectAll(\"line\")\n      .data([-.75, -.5, -.25, 0, .25])\n      .enter().append(\"line\")\n        .attr(\"x1\", d => timeX(1)).attr(\"x2\", d => timeX(500))\n        .attr(\"y1\", d => timeY(d)).attr(\"y2\", d => timeY(d))\n        .attr(\"class\", function(d){if(d===0){return\"axis-major\"}else{return \"axis-minor\"}})\n    \n  const biasPaths = timesvg.append(\"g\")\n  \n  \n     <!-- svg.selectAll(\"#mean-estimate, #mean-line, #mean-path\").attr(\"class\", meanClass) -->\n\n}\n\n```\n\n\n\n::: {.content-hidden}\n# CSS\n:::\n\n\n::: {.cell}\n<style type=\"text/css\">\n\n:root {\n  --population-color: pink;\n  --sample-color: var(--link-color);\n  --mean-color: purple;\n}\n\n.axis {\n  font-size: 0.75em;\n}\n.bias-chart-title {\n  font-size: 1.2em;\n}\n.axis-major {\n  stroke: black;\n  stroke-width: 2;\n}\n.axis-minor {\n  stroke: #ddd;\n  stroke-width: 1;\n}\n\n.pop, .sample {\n  fill: lightblue;\n}\n.pop {\n  stroke: lightblue;\n}\n.sample {\n  stroke: white;\n}\n\n#sample-estimate, #sample-line, #sample-legend {\n  fill: var(--sample-color);\n  stroke: var(--sample-color);\n}\n\n#mean-estimate, #mean-line, #mean-legend {\n  fill:   var(--mean-color);\n  stroke: var(--mean-color);\n}\n\n#population-estimate, #population-line, #population-legend {\n  fill:   var(--population-color);\n  stroke: var(--population-color);\n}\n\n.legend-unselected {\n  fill-opacity: 0.1 !important;\n}\n\n.bias-paths {\n  fill: none\n}\n\n#mean-path {\n  stroke: var(--mean-color);\n}\n#sample-path {\n  stroke: var(--sample-color);\n}\n#population-path {\n  stroke: var(--population-color);\n}\n\n.hide {\n  fill: none !important;\n  stroke: none !important;\n}\n\n\n.button {\n   font-family: Times;\n}\n.button:hover {\n  fill: red;\n  cursor: pointer;\n}\n\n\n.legend-dots:hover {\n  cursor: pointer;\n}\n\n</style>\n:::\n",
    "supporting": [
      "unbiased-estimates_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<script type=\"ojs-define\">\n{\"contents\":[{\"name\":\"data\",\"value\":[{\"value\":-4,\"density\":0.0001},{\"value\":-3.96,\"density\":0.0002},{\"value\":-3.92,\"density\":0.0002},{\"value\":-3.88,\"density\":0.0002},{\"value\":-3.84,\"density\":0.0003},{\"value\":-3.8,\"density\":0.0003},{\"value\":-3.76,\"density\":0.0003},{\"value\":-3.72,\"density\":0.0004},{\"value\":-3.68,\"density\":0.0005},{\"value\":-3.64,\"density\":0.0005},{\"value\":-3.6,\"density\":0.0006},{\"value\":-3.56,\"density\":0.0007},{\"value\":-3.52,\"density\":0.0008},{\"value\":-3.48,\"density\":0.0009},{\"value\":-3.44,\"density\":0.0011},{\"value\":-3.4,\"density\":0.0012},{\"value\":-3.36,\"density\":0.0014},{\"value\":-3.32,\"density\":0.0016},{\"value\":-3.28,\"density\":0.0018},{\"value\":-3.24,\"density\":0.0021},{\"value\":-3.2,\"density\":0.0024},{\"value\":-3.16,\"density\":0.0027},{\"value\":-3.12,\"density\":0.0031},{\"value\":-3.08,\"density\":0.0035},{\"value\":-3.04,\"density\":0.0039},{\"value\":-3,\"density\":0.0044},{\"value\":-2.96,\"density\":0.005},{\"value\":-2.92,\"density\":0.0056},{\"value\":-2.88,\"density\":0.0063},{\"value\":-2.84,\"density\":0.0071},{\"value\":-2.8,\"density\":0.0079},{\"value\":-2.76,\"density\":0.0088},{\"value\":-2.72,\"density\":0.0099},{\"value\":-2.68,\"density\":0.011},{\"value\":-2.64,\"density\":0.0122},{\"value\":-2.6,\"density\":0.0136},{\"value\":-2.56,\"density\":0.0151},{\"value\":-2.52,\"density\":0.0167},{\"value\":-2.48,\"density\":0.0184},{\"value\":-2.44,\"density\":0.0203},{\"value\":-2.4,\"density\":0.0224},{\"value\":-2.36,\"density\":0.0246},{\"value\":-2.32,\"density\":0.027},{\"value\":-2.28,\"density\":0.0297},{\"value\":-2.24,\"density\":0.0325},{\"value\":-2.2,\"density\":0.0355},{\"value\":-2.16,\"density\":0.0387},{\"value\":-2.12,\"density\":0.0422},{\"value\":-2.08,\"density\":0.0459},{\"value\":-2.04,\"density\":0.0498},{\"value\":-2,\"density\":0.054},{\"value\":-1.96,\"density\":0.0584},{\"value\":-1.92,\"density\":0.0632},{\"value\":-1.88,\"density\":0.0681},{\"value\":-1.84,\"density\":0.0734},{\"value\":-1.8,\"density\":0.079},{\"value\":-1.76,\"density\":0.0848},{\"value\":-1.72,\"density\":0.0909},{\"value\":-1.68,\"density\":0.0973},{\"value\":-1.64,\"density\":0.104},{\"value\":-1.6,\"density\":0.1109},{\"value\":-1.56,\"density\":0.1182},{\"value\":-1.52,\"density\":0.1257},{\"value\":-1.48,\"density\":0.1334},{\"value\":-1.44,\"density\":0.1415},{\"value\":-1.4,\"density\":0.1497},{\"value\":-1.36,\"density\":0.1582},{\"value\":-1.32,\"density\":0.1669},{\"value\":-1.28,\"density\":0.1758},{\"value\":-1.24,\"density\":0.1849},{\"value\":-1.2,\"density\":0.1942},{\"value\":-1.16,\"density\":0.2036},{\"value\":-1.12,\"density\":0.2131},{\"value\":-1.08,\"density\":0.2227},{\"value\":-1.04,\"density\":0.2323},{\"value\":-1,\"density\":0.242},{\"value\":-0.96,\"density\":0.2516},{\"value\":-0.92,\"density\":0.2613},{\"value\":-0.88,\"density\":0.2709},{\"value\":-0.84,\"density\":0.2803},{\"value\":-0.8,\"density\":0.2897},{\"value\":-0.76,\"density\":0.2989},{\"value\":-0.72,\"density\":0.3079},{\"value\":-0.68,\"density\":0.3166},{\"value\":-0.64,\"density\":0.3251},{\"value\":-0.6,\"density\":0.3332},{\"value\":-0.56,\"density\":0.341},{\"value\":-0.52,\"density\":0.3485},{\"value\":-0.48,\"density\":0.3555},{\"value\":-0.44,\"density\":0.3621},{\"value\":-0.4,\"density\":0.3683},{\"value\":-0.36,\"density\":0.3739},{\"value\":-0.32,\"density\":0.379},{\"value\":-0.28,\"density\":0.3836},{\"value\":-0.24,\"density\":0.3876},{\"value\":-0.2,\"density\":0.391},{\"value\":-0.16,\"density\":0.3939},{\"value\":-0.12,\"density\":0.3961},{\"value\":-0.08,\"density\":0.3977},{\"value\":-0.04,\"density\":0.3986},{\"value\":0,\"density\":0.3989},{\"value\":0.04,\"density\":0.3986},{\"value\":0.08,\"density\":0.3977},{\"value\":0.12,\"density\":0.3961},{\"value\":0.16,\"density\":0.3939},{\"value\":0.2,\"density\":0.391},{\"value\":0.24,\"density\":0.3876},{\"value\":0.28,\"density\":0.3836},{\"value\":0.32,\"density\":0.379},{\"value\":0.36,\"density\":0.3739},{\"value\":0.4,\"density\":0.3683},{\"value\":0.44,\"density\":0.3621},{\"value\":0.48,\"density\":0.3555},{\"value\":0.52,\"density\":0.3485},{\"value\":0.56,\"density\":0.341},{\"value\":0.6,\"density\":0.3332},{\"value\":0.64,\"density\":0.3251},{\"value\":0.68,\"density\":0.3166},{\"value\":0.72,\"density\":0.3079},{\"value\":0.76,\"density\":0.2989},{\"value\":0.8,\"density\":0.2897},{\"value\":0.84,\"density\":0.2803},{\"value\":0.88,\"density\":0.2709},{\"value\":0.92,\"density\":0.2613},{\"value\":0.96,\"density\":0.2516},{\"value\":1,\"density\":0.242},{\"value\":1.04,\"density\":0.2323},{\"value\":1.08,\"density\":0.2227},{\"value\":1.12,\"density\":0.2131},{\"value\":1.16,\"density\":0.2036},{\"value\":1.2,\"density\":0.1942},{\"value\":1.24,\"density\":0.1849},{\"value\":1.28,\"density\":0.1758},{\"value\":1.32,\"density\":0.1669},{\"value\":1.36,\"density\":0.1582},{\"value\":1.4,\"density\":0.1497},{\"value\":1.44,\"density\":0.1415},{\"value\":1.48,\"density\":0.1334},{\"value\":1.52,\"density\":0.1257},{\"value\":1.56,\"density\":0.1182},{\"value\":1.6,\"density\":0.1109},{\"value\":1.64,\"density\":0.104},{\"value\":1.68,\"density\":0.0973},{\"value\":1.72,\"density\":0.0909},{\"value\":1.76,\"density\":0.0848},{\"value\":1.8,\"density\":0.079},{\"value\":1.84,\"density\":0.0734},{\"value\":1.88,\"density\":0.0681},{\"value\":1.92,\"density\":0.0632},{\"value\":1.96,\"density\":0.0584},{\"value\":2,\"density\":0.054},{\"value\":2.04,\"density\":0.0498},{\"value\":2.08,\"density\":0.0459},{\"value\":2.12,\"density\":0.0422},{\"value\":2.16,\"density\":0.0387},{\"value\":2.2,\"density\":0.0355},{\"value\":2.24,\"density\":0.0325},{\"value\":2.28,\"density\":0.0297},{\"value\":2.32,\"density\":0.027},{\"value\":2.36,\"density\":0.0246},{\"value\":2.4,\"density\":0.0224},{\"value\":2.44,\"density\":0.0203},{\"value\":2.48,\"density\":0.0184},{\"value\":2.52,\"density\":0.0167},{\"value\":2.56,\"density\":0.0151},{\"value\":2.6,\"density\":0.0136},{\"value\":2.64,\"density\":0.0122},{\"value\":2.68,\"density\":0.011},{\"value\":2.72,\"density\":0.0099},{\"value\":2.76,\"density\":0.0088},{\"value\":2.8,\"density\":0.0079},{\"value\":2.84,\"density\":0.0071},{\"value\":2.88,\"density\":0.0063},{\"value\":2.92,\"density\":0.0056},{\"value\":2.96,\"density\":0.005},{\"value\":3,\"density\":0.0044},{\"value\":3.04,\"density\":0.0039},{\"value\":3.08,\"density\":0.0035},{\"value\":3.12,\"density\":0.0031},{\"value\":3.16,\"density\":0.0027},{\"value\":3.2,\"density\":0.0024},{\"value\":3.24,\"density\":0.0021},{\"value\":3.28,\"density\":0.0018},{\"value\":3.32,\"density\":0.0016},{\"value\":3.36,\"density\":0.0014},{\"value\":3.4,\"density\":0.0012},{\"value\":3.44,\"density\":0.0011},{\"value\":3.48,\"density\":0.0009},{\"value\":3.52,\"density\":0.0008},{\"value\":3.56,\"density\":0.0007},{\"value\":3.6,\"density\":0.0006},{\"value\":3.64,\"density\":0.0005},{\"value\":3.68,\"density\":0.0005},{\"value\":3.72,\"density\":0.0004},{\"value\":3.76,\"density\":0.0003},{\"value\":3.8,\"density\":0.0003},{\"value\":3.84,\"density\":0.0003},{\"value\":3.88,\"density\":0.0002},{\"value\":3.92,\"density\":0.0002},{\"value\":3.96,\"density\":0.0002},{\"value\":4,\"density\":0.0001}]}]}\n</script>\n<script type=\"ojs-define\">\n{\"contents\":[{\"name\":\"population\",\"value\":[0.2696,-0.63,0.8687,1.7272,0.0242,0.368,-1.3092,0.7386,0.0449,-1.0484,1.7279,-1.1786,0.6532,-0.3686,-0.5996,0.0546,1.7077,-1.0944,-0.2893,2.2074,0.5187,-1.4049,2.0149,-1.1882,0.1904,-1.1697,-0.0381,2.3542,1.3934,-0.5603,-0.6715,0.4924,-1.1794,-1.0587,1.1379,-0.1603,0.6305,1.617,-0.1935,-1.6078,-0.8852,-0.4323,-0.4216,-0.1705,0.2458,-0.7457,-0.2739,1.8246,0.0142,0.188,-0.0541,0.4616,-0.5968,1.2633,-1.1453,1.0846,-1.529,-1.5737,-0.1141,0.1112,0.2141,0.5538,-1.0595,-1.61,-0.3382,0.2049,-0.2243,-0.9096,-0.8081,0.5531,-0.3892,-0.4472,-0.0211,-0.5994,-0.3109,-0.6816,-0.2021,1.1168,0.826,1.2509,2.6081,-0.051,2.2272,-0.0139,-1.5474,-1.3799,1.4799,-0.2549,-0.3263,-0.7266,-1.9523,0.4229,1.1817,0.918,0.0955,-1.6844,0.9903,-0.7078,-0.594,-1.0659,-0.9408,0.0939,0.0663,-0.9907,-0.0721,-0.2233,-0.1428,0.5354,-0.3746,-0.9182,-0.6412,-0.8529,-1.6151,1.1065,-0.4329,0.6031,0.042,0.5861,-1.0351,0.8282,-0.357,0.1875,-0.2115,-0.4183,-0.7489,-0.166,-2.3974,0.8833,-0.2541,-1.6494,0.1663,0.9241,-0.9601,0.4801,1.1275,0.6681,1.357,1.0229,-0.0217,-1.4936,-0.9945,0.5879,0.7891,1.3235,0.7172,-1.3807,0.1029,-1.799,0.973,0.2165,0.5251,-0.5433,-1.717,1.0301,-1.1471,-0.2661,-1.1672,-0.2121,-1.7218,-1.4383,0.8346,0.4728,0.4313,0.4715,1.7369,0.9048,0.2903,-0.8739,-0.7175,-0.1777,1.034,-1.9079,0.7973,-0.0949,0.2056,0.8839,-1.7031,0.1358,1.179,0.3843,0.0357,0.9343,-0.1194,-1.1277,0.4175,0.0515,-0.0878,0.1046,-1.0096,-0.2837,1.13,-0.0409,1.3368,0.4017,-0.6976,-2.2625,0.7876,-0.4515,-0.561,0.6231,1.4221,-0.7584,-0.0553,-0.4805,-0.9205,-0.6476,0.5179,1.4784,-2.4567,-1.4495,-0.3998,0.5167,-0.2925,1.344,0.2531,-0.9538,-1.0039,0.551,0.3324,0.1457,-0.4217,0.0042,-0.7034,1.4488,-1.3231,-0.4606,-0.4927,2.0279,-1.0905,0.7257,0.0516,-0.4553,0.4865,0.1063,0.0358,-0.5917,0.8987,0.0394,-0.1076,1.145,-3.0312,0.1843,-0.2163,1.1649,-0.4509,-0.2539,-0.369,0.3789,-1.479,-0.6713,-0.5638,-1.6857,0.5123,-0.2176,1.6339,-0.4295,1.7235,2.0682,-2.4649,-0.162,-0.2392,1.2095,0.1829,0.9658,1.1168,-1.6254,-0.7739,-0.2275,0.2168,0.0641,-1.5542,1.462,-0.0036,-1.0503,1.4185,-0.6354,1.6946,0.763,-0.2266,-1.5363,0.7482,-1.2129,1.0978,0.4918,1.1727,-1.0928,-0.685,-0.4577,-0.5889,0.7149,-0.1581,-1.009,-0.4393,-0.903,-0.0672,-0.5834,-0.0167,0.5087,-0.4124,-0.7689,0.4162,-0.04,-1.2831,0.7209,-0.8415,-0.5703,-0.4726,-1.0615,0.1,-0.7847,-1.7895,-1.4041,0.8001,0.3168,-1.1612,0.4214,-0.5817,0.7652,-0.5124,-0.2683,-0.5861,1.1897,-0.6649,0.0167,-0.1072,-0.6392,1.5364,1.3148,0.3439,0.8169,1.0953,1.1188,-1.5332,0.4774,1.0465,1.0312,1.3567,1.0779,-0.6437,1.0581,1.3176,-0.0137,-0.5338,-0.6155,0.7016,-0.6907,-1.0241,0.0374,0.1225,-0.7516,-0.102,-0.4458,0.3813,0.228,0.7297,2.0605,-1.4149,-0.6835,0.5639,-0.2018,-1.6588,-0.2191,0.9377,0.5878,-0.0899,-3.0397,-0.5582,-1.3292,0.9363,-0.0604,2.1035,-0.7005,-0.9649,0.2364,1.0579,-0.7358,0.8624,-0.4819,1.179,-0.2105,-0.0408,-1.5373,-1.2835,0.0636,-0.889,-0.0175,1.903,-2.2068,0.3018,0.1887,-1.5629,1.3386,-0.6851,-0.1961,-1.4872,-1.8941,1.3913,1.6084,1.0622,0.147,-0.4275,-0.6438,0.272,-0.7961,-0.6539,-0.4012,0.5264,1.1566,-1.8148,1.0105,-0.6963,-0.2258,1.9568,0.476,-0.824,-0.1124,-0.356,0.1434,-1.4624,1.1625,-0.3503,1.3843,1.6048,-0.9927,-0.8442,0.6818,1.1796,0.2877,-0.0206,-0.0716,0.3864,0.5675,-0.1411,-1.5074,1.4527,-0.3136,-1.1703,1.4326,0.412,0.3833,-1.7267,0.6413,0.738,0.9335,1.896,0.5367,0.1693,0.0914,0.5785,-0.6615,0.2748,-1.03,0.9092,-1.2292,0.7735,0.4663,-0.1202,-2.3244,-1.0996,-0.2987,-0.0331,-0.7011,-0.2425,-0.1879,-1.307,1.4401,-0.1072,-0.0996,-0.3932,0.7316,1.0294,0.4672,0.4294,-0.5155,-1.304,1.0781,-1.3089,-0.3143,0.094,0.564,0.4632,-1.8238,-0.1099,1.9446,-0.5072,-1.6688,0.6399,2.5535,-0.5199,-1.3713,-0.676,0.3734,-0.6692,-0.7722,1.5343,-1.6339,1.1893,0.6784,-1.2677,-0.3778,0.4466,1.5639,0.5285,1.1135,-0.5829,-0.365,-0.4467,-0.2744,-0.0044,-0.1587,-0.8048,1.1798,-0.5001,0.7204,-0.279,1.3786,-1.2666,0.1879,-1.3355,-0.4343,-0.0822,-0.155,-0.7898,-1.069,-0.4785,1.0802,-0.0969,-0.4088,-0.549,-0.2473,-0.7553,0.1258,-1.027,-0.3685,0.9417,-0.7311,-0.5354,1.4432,0.9027,0.6841,-0.6043,-0.2308,-0.4287,1.1583,-0.9727,-1.1176,-0.0294,-0.2059,0.5572,-0.4631,-0.2692,-0.8226,-1.1227,1.0983,0.2106,-0.2321,-0.3541,0.273,2.8116,0.3353,-0.3823,-2.7555,-0.4597,-0.2626,0.0798,1.0808,0.7718,1.226,0.4014,-0.3925,0.123,0.7082,-0.5382,0.5322,-1.0189,-0.9875,-0.6091,1.3107,0.1892,-0.3449,1.6085,-0.4157,-1.1683,0.2036,0.0301,-0.2385,-0.5476,0.7509,-0.3508,0.4193,-0.346,0.6455,1.3332,-0.7894,0.1858,0.1346,-1.5423,-1.7545,-0.195,2.3795,1.1889,0.3156,-0.8331,-1.2904,0.352,2.3191,-0.8337,-1.2411,0.8514,1.6757,0.6192,-0.3378,-0.442,0.0061,-1.1063,-0.2997,-0.3741,1.9342,0.4223,1.1044,-1.0981,-0.6615,-0.0185,0.2915,-0.5201,-0.8007,-1.8016,-0.8672,-0.9391,1.4259,-0.8115,0.1259,0.5089,-0.1408,-1.5955,0.6954,1.0688,-0.5309,-0.1181,-0.042,0.4117,0.2989,-0.8449,-4.9193,-1.741,0.3779,0.4324,-0.9411,-0.383,0.1037,-0.8191,-2.5227,-0.4701,-0.0407,0.941,-0.1683,0.7335,-1.0153,1.6288,2.0787,-0.9285,1.8762,1.665,0.7781,-0.8889,0.2096,1.0343,-2.898,-0.414,-0.9775,0.7692,-0.7753,-0.8598,0.7859,-0.0886,0.6594,-0.7709,0.3599,-0.1801,-2.1792,0.2821,0.5092,0.7826,0.0647,0.842,-1.9545,0.905,0.2348,-0.2886,-0.8706,0.7824,-0.6262,-1.294,1.2664,1.721,-1.0353,0.1435,-0.7622,0.4987,0.4813,0.3984,-1.238,0.654,0.1422,1.0872,0.0325,1.4001,1.8146,-0.2224,0.7467,-0.6385,-1.2541,-0.1675,-1.3113,0.3516,0.1981,0.592,-0.2056,0.0295,0.5239,-0.631,-0.7963,1.2726,-0.7789,0.8642,-0.3216,-1.8682,0.2949,1.2393,-0.6216,-1.9667,1.7182,0.3578,-1.3795,-0.5563,0.1644,0.1148,2.3125,0.533,-1.1035,-0.092,-0.0606,0.4776,-0.9894,0.4318,1.3332,0.7186,-0.1612,2.2052,0.7988,0.2474,-0.5075,-0.7383,-0.5445,0.9377,0.3203,-0.0879,1.4141,-0.1487,0.4207,0.5363,-0.8203,0.8374,-0.2374,0.767,-1.6086,-0.6044,-0.5164,0.1295,-1.0548,0.2809,0.6468,-0.2394,-1.7646,-0.9132,1.0891,1.2241,-1.1402,-0.0282,0.6387,-1.2646,-0.3638,-0.6987,0.1024,-1.1308,-1.5964,-0.2484,-1.5669,-0.2543,-1.5586,-1.4842,-0.4531,1.3256,-0.837,-1.0054,-0.5505,3.2378,-0.9774,0.7302,-0.3308,1.3042,0.2087,0.5962,-0.1176,1.6475,-0.3186,1.1164,-0.9355,0.4307,-1.8964,-0.728,2.202,-0.2408,2.306,0.7227,-0.0807,-1.1527,0.9849,-0.618,0.4979,1.7635,-0.7481,-0.2304,0.836,1.1427,-0.481,0.7818,1.5846,-0.2322,-1.4802,-0.8,-0.0181,-1.4672,1.0709,-0.4214,-0.2624,-0.9037,0.1133,1.3621,-0.218,-0.624,0.409,0.4912,-0.1671,1.0284,0.2276,-0.2898,-0.8922,2.4606,-0.4844,1.4055,-1.4443,-0.126,-0.3103,-1.1975,0.1262,0.1971,-0.0335,2.3511,-0.0533,0.9458,-0.4944,0.6345,0.1769,0.5988,-0.5828,-0.3339,0.5064,-0.4538,1.8947,-0.7023,0.961,1.2235,-1.3348,-1.0153,0.1182,-1.196,1.2566,-0.6853,-0.1627,-0.5811,0.7513,0.4485,-1.0921,-1.2292,-1.1353,0.5061,0.8091,0.23,-0.9682,0.1373,0.9217,-1.557,-1.0318,-1.0571,0.8675,-1.8902,-0.4324,0.1901,1.8732,1.5766,-1.633,-2.6245,1.1884,-0.8713,-1.4485,-0.6014,0.0642,0.0331,2.1445,0.3262,-0.4182,1.221,-0.333,-1.1234,0.3201,0.2119,-0.6268,0.7208,0.2393,1.117,-1.0607,0.5138,1.1158,0.2528,-0.0517,0.1976,-0.1621,0.1027,-0.2764,0.0669,-0.0129,-0.1665,-1.7762,-1.8721,1.163,0.6354,0.2056,-0.0301,-0.592,-0.6786,0.0794,-0.3699,-0.1358,1.7809,1.4827,-1.4068,-0.7636,-0.8781,0.0078,0.5606,0.2335,2.2173,2.3856,1.2274,1.5411,0.9461,-1.3786,-0.1176,0.5067,2.0849,0.336,1.3147,-0.2694,1.7725,-0.5216,0.0371,-1.5946,-0.6626,0.6025,0.0949,0.5837,1.703,1.3961,1.9944,0.057,-0.2895,-0.2241,0.1286,2.8955,-0.4599,-2.1078,-1.2611,0.5002,-0.306,-1.1143,0.9995,-1.2998,1.061,0.8868,0.2191,-0.1691,-2.5106,-1.2985,1.4439,-2.412,1.1422,-0.1688,-1.6709,-1.1337,0.2919,-1.044,-1.0644,-0.1151,-1.0495,-0.5721,0.6178,1.0713,0.5652,-0.0152,-0.289,-0.8564,0.7485,-0.6054,-1.0253,1.453,-1.1786,-0.472,1.8434,-0.3611,-1.1815,-1.8638,1.1173,-0.4581,-0.1635,0.0721,-1.0669,-0.3083,-1.3559,0.008,0.5303,-1.1176,-0.093,1.7676,-0.6593,-0.7251,0.5024,-1.9653,0.0049,-0.3412,-0.616,-0.782,-0.3037,-0.7533,-0.8112,-1.3986,0.2877,1.8395,0.0024,0.783,-1.2503,0.0598,-0.2493,1.1995,0.2677,0.7307,-0.0139,0.2162,-0.4559,-1.6504,0.9995,-0.0455,-0.4094,0.8563,0.4234,0.0515,-0.4479,0.8101,-1.0906,-1.2165,1.7969,-1.0374,1.0026,-0.3697,0.3711,1.4269,0.3733,0.5827,1.5494,1.2192,-1.0102,0.5528,-0.9161,1.6525,-0.8359,1.4186,0.1383,-0.0345,1.1904,-1.9561,-1.3623,-0.7122,0.7791,1.7669,-1.2102,-0.5083,-0.8592,-0.1918,0.1546,-0.2679,0.5376,0.9154,0.9722,0.544,-0.3031,-0.5452,-0.0048,-0.7831,1.132,-1.0689,-0.1207,0.0781,-0.6743,1.2125,-0.2959,0.3552,-0.6207,1.0016,0.2386,1.5351,0.7248,0.8439,0.4533,0.4547,-0.0043,0.0291,2.1848,-0.2506,0.8283,2.7243,0.0747,-0.4048,0.5418,0.3789,0.1181,0.3641,1.0583,0.5594,-1.6835,-0.564,-0.3673,-1.7064,0.5564,-1.6296,-0.7123,1.1536,1.2163,-1.7297,-0.719,1.398,-0.155,0.2131,-1.6545,-0.0731,0.0633,0.5913,0.1923,0.2908,2.2772,-0.9823,-0.5433,-0.9994,-0.7522,0.6366,0.2949,0.2295,1.5274,0.053,0.8844,0.9017,0.71,0.0391,-0.1275,0.9544,-0.0033,0.0024,0.3735,1.8439,0.8429,0.7604,0.2899,-0.7614,0.0654,-0.2778,-0.5368,0.0359,-0.7331,-0.3742,0.3316,1.0393,-0.2981,-0.3042,-0.6221,-2.6551,-0.2019,-0.0538,-1.4866,-0.285,0.846,-1.2457,-1.6578,-0.7073,0.4007,-0.7942,1.0101,-0.2445,0.0157,1.2281,-1.2731,-0.9348,-0.554,-0.2753,-0.6438,-0.4027,-0.3799,0.1114,-1.4015,1.0213,-0.2631,-0.7923,-0.6635,0.3338,-1.4431,0.5285,0.4949,-0.2836,-0.1272,-1.3877,0.5964,-1.4776,0.4408,-0.0726,-0.4714,0.136,-0.1229,0.8946,-0.4666,-0.7905,0.2639,0.6868,-1.9707,-0.7094,-2.0979,0.2748,-0.8549,1.0676,1.9374,-0.3968,1.0995,0.0138,1.3663,-0.7671,0.7621,-0.541,-0.0307,0.5584,-0.934,-0.3661,1.2739,-0.5367,-0.0527,0.9922,0.7867,0.8251,-2.7153,-2.3301,0.1296,0.3728,-1.5752,-1.183,-0.1382,-1.9513,0.0534,0.3637,1.8211,0.8359,-0.7018,1.1733,-1.58,-1.7919,0.4183,1.5216,-0.2419,1.1279,0.1438,1.1255,-0.3809,-0.0816,2.2654,0.086,0.4221,-0.2432,-0.2857,-1.2806,-1.6373,0.661,0.7238,0.9686,0.2102,0.1253,1.312,0.67,0.9768,2.3471,1.1328,-1.1369,1.272,0.9497,0.9388,-0.5039,0.1385,0.1496,1.8039,-0.8196,1.7572,1.4324,1.7696,0.199,-1.7886,0.3448,0.0725,0.3745,-0.8991,0.4367,0.735,-0.9468,-0.3115,-0.2067,0.0074,0.0227,-0.8185,1.5523,0.7752,0.4952,-0.0328,-0.2172,0.8204,0.3096,-0.4016,-0.4898,-0.3457,1.4675,1.3991,0.4426,-0.0591,-1.8573,-1.5242,1.3772,-0.0014,0.2907,3.113,-0.2447,-0.6264,0.9143,-0.8917,-0.3491,-1.6137,-0.4014,0.5027,0.5836,-0.5984,-0.1973,0.4411,-0.0702,-2.6307,0.6157,1.1427,-0.2591,-0.2508,0.6713,-1.1768,-2.9933,-1.5021,-0.0758,-0.1837,-1.1828,-0.5103,-1.7887,0.5309,-2.4298,2.0206,0.2802,0.5098,-1.6899,-0.2709,1.1032,-0.0219,-0.9014,-1.0688,-0.6498,-0.5286,-0.908,1.3199,-0.6088,-0.7478,0.211,-0.9067,1.1901,-2.2853,1.2632,-0.0102,-0.2325,1.0214,1.8447,0.2507,1.3717,-0.1545,-0.6101,-1.1212,0.2033,1.7111,-0.6668,0.5241,0.72,1.4565,0.7308,-0.8541,0.3023,-0.7251,1.5065,1.9534,0.4018,-0.7567,-0.946,-0.6423,0.8398,0.2056,-0.5793,0.352,0.6598,0.7785,1.1377,0.8599,-0.7619,-0.5274,-0.7933,-1.8426,-1.0173,-1.4201,1.6971,-0.6504,0.5229,0.8772,0.4245,0.3356,-0.9367,-1.1586,-0.1086,-2.1563,0.2866,-1.1951,0.0745,0.0907,0.0782,-1.0435,0.9302,0.0463,-0.3027,1.222,0.8671,0.3633,0.1372,-0.5599,-0.5355,0.9705,-0.472,0.2383,-0.0722,-0.2851,2.482,1.1187,0.9992,0.9993,1.0663,-0.0537,-0.0847,-0.1828,0.4564,0.2722,-0.4365,-0.9757,-0.8225,-0.9629,-0.551,1.3637,0.0925,-0.2047,-1.7203,0.9172,0.5318,0.4825,-0.9308,-0.7782,-0.1168,0.023,0.011,1.1377,-0.4303,-0.2052,1.5647,-0.5949,-0.4138,0.3922,-1.2323,1.7952,1.2993,-1.4357,-0.7175,-0.4836,-0.2537,0.0192,-0.0448,-0.1997,1.645,0.605,1.0276,0.7109,3.3788,-0.7265,-0.1754,-0.9402,-1.285,-0.9075,0.1703,-1.5633,-0.6652,-0.6137,0.2098,-0.0947,0.1469,-0.9153,0.0939,-0.5933,0.0728,0.4388,-0.3397,0.7404,0.4701,0.697,0.9244,1.143,-2.3954,-0.2054,0.7672,-1.2792,0.1811,0.469,-1.44,0.4571,-0.9032,0.3166,0.1606,-0.4961,-1.1415,-2.2753,-1.8846,0.2306,0.3441,-1.0906,0.8806,0.1583,0.2061,-0.4221,-0.2798,0.1985,-0.4211,0.4918,-0.0904,0.1165,0.9851,-0.6454,0.9441,0.3527,-0.4249,-1.1129,0.389,-0.7719,1.0682,0.3677,2.1692,-0.4296,0.2739,-0.7873,-0.8507,0.7482,-1.3121,1.3472,1.5344,0.5369,-0.2716,-0.9438,-0.7192,-1.4432,-0.599,-0.4774,1.7331,2.5607,1.9271,0.0974,-0.4796,0.4945,-0.1016,2.3413,0.9641,-1.4969,-1.6335,-1.3703,2.1574,0.7053,-1.5882,0.3312,0.513,-1.3016,-0.046,0.2632,0.1254,0.0367,-1.22,0.16,-1.4064,0.8128,1.2214,0.2869,-0.3861,-1.5654,1.7877,2.1167,-1.3055,-0.1174,-1.6549,0.9044,-0.5583,-2.7759,-0.3726,-0.0346,0.0586,0.6372,1.047,-0.8265,-0.2417,-0.0864,1.488,-0.4616,-0.483,-2.3011,0.8133,0.3682,-0.4098,-0.3704,1.2896,-1.2593,-0.6525,-0.7254,1.2491,-0.4059,1.7128,0.6155,0.1514,0.9122,1.6847,-0.4692,-1.294,-0.9756,0.0555,0.3639,0.3441,1.1205,-0.1177,-0.4544,0.3954,-1.7613,-0.6008,1.6748,0.1509,1.133,0.9626,-0.3879,0.3524,0.2986,1.1007,0.903,0.597,-0.6953,-0.8271,0.4617,0.0203,-1.985,-1.3363,-0.157,-0.2805,0.5225,0.74,0.642,0.4925,-0.2136,0.2798,-0.738,-0.7552,-0.1688,-0.3633,0.4715,-1.421,-0.0867,0.9924,1.6338,0.727,-0.4723,1.7393,-1.0559,1.1896,0.2234,-1.8454,0.899,0.0642,-0.0532,1.0991,-0.0752,-1.4522,-0.1501,-0.3201,-0.5595,-0.6133,-1.2045,-1.0784,0.3233,-1.7921,1.3075,-0.8557,0.3143,-0.0587,0.5769,0.5501,-0.003,-2.3128,-0.7724,0.1316,0.2288,-2.2938,-0.3345,0.8963,-1.0125,1.1676,-0.6613,1.7027,-0.8804,0.5455,0.8525,-0.1776,1.513,-0.6237,0.4579,0.7976,1.5731,-0.0532,1.2285,0.9803,1.1275,-0.9553,0.1021,-1.2388,-0.7178,-0.2971,-0.6038,1.0441,0.4924,0.1063,-1.3909,0.2092,-0.0997,-2.9618,2.9703,-0.7565,-0.5235,1.5564,1.1629,0.4718,-0.7706,-1.2893,0.9374,0.1797,0.2842,0.1932,-1.4264,0.2081,1.7078,0.2895,-0.7456,0.4093,-0.8613,-0.3608,0.6777,-3.0491,-0.5517,-0.3817,1.1292,0.7854,-0.6178,1.8549,-0.0511,0.6415,0.817,0.9627,1.7952,0.036,-0.4425,0.2567,0.5297,-0.9221,-2.3704,2.0267,-1.4985,-0.267,-0.8067,0.4067,-0.2359,-0.62,0.5105,0.4198,0.6408,0.6102,1.6175,0.216,-0.9274,1.9385,0.6861,1.521,-0.5784,-0.3724,1.0223,-0.7593,0.7541,0.1742,-0.6704,0.4537,-0.2013,0.4184,0.099,0.8072,-0.4744,0.1039,-1.9013,0.7321,0.3961,-1.3126,0.6236,0.0716,-1.0804,-0.0945,-0.5055,0.4499,0.97,-0.9055,0.9266,-0.3662,1.753,0.4248,-0.5746,-0.6075,0.0656,0.5061,0.5568,1.2354,-0.1853,0.4647,-0.1968,-1.6246,-0.4762,-0.232,1.1627,0.2099,0.8246,-0.6717,-1.9869,-0.5561,-0.0549,0.0781,-0.1125,-0.6973,1.0351,-1.4469,1.8681,0.2604,1.6775,0.4876,-0.8134,1.9066,-0.1302,-0.5723,-0.6252,-1.2142,-1.5192,-1.8924,-0.1527,1.4474,-0.0747,-0.0808,-1.9417,-1.1086,0.236,0.2408,2.5978,0.2064,0.2162,0.1363,0.3647,-0.3931,0.6313,1.8802,-0.2167,-0.0067,0.6314,0.1961,0.3795,-0.8784,-1.4843,-0.3454,0.901,-0.1678,-0.5365,0.4735,0.1476,2.8595,0.6184,0.4156,1.6216,-1.7298,0.3717,0.4427,1.0893,-0.5161,-0.8683,-1.1853,0.8711,-2.0273,-0.6783,0.1228,0.619,-1.4512,-0.8312,-0.3106,-0.1334,1.9129,0.5177,0.4062,0.2247,0.1495,-0.1757,1.1197,-0.9903,-0.5275,-0.0482,0.0303,1.0485,-2.1594,1.0007,-0.3528,1.8506,-0.6308,-0.4881,1.1499,-0.7671,-0.3586,0.1291,0.454,-0.2133,0.1859,0.1503,-0.8299,-1.5555,0.5457,0.7743,-1.1635,-1.715,-1.8212,0.9732,-1.5923,-1.7418,1.0405,-1.4913,-0.7242,-1.097,0.7598,-0.6718,0.2194,-0.8357,-0.1246,0.8996,1.8324,-0.4637,-0.0666,-0.8213,-0.885,0.9483,-0.5448,0.2054,-0.1618,0.4897,-1.0225,-0.3074,0.4915,1.2999,1.463,-1.6537,-1.0962,-0.2894,-0.013,0.4329,0.8402,-1.0129,-1.5186,-0.5693,-0.9937,0.2656,1.3945,0.2632,1.2715,-0.7006,0.9053,-1.3969,1.3101,-0.1155,1.9946,0.5649,0.6156,-0.6468,-1.7094,0.2967,-0.8222,0.1657,-0.5991,-0.0041,0.5777,-0.218,0.5602,-0.5229,0.8468,-0.2511,-1.4633,-0.3188,-2.6023,-2.3424,0.1114,0.7181,0.3909,1.0264,0.5836,-0.1188,0.6548,-0.8471,-0.9445,1.5309,0.5339,0.4187,0.6781,-0.1985,0.6668,-0.1101,0.3659,0.9962,-0.8992,1.978,-1.151,0.2991,-1.7986,-0.7535,-1.5168,1.4395,-0.2347,-0.1989,0.617,1.8731,-0.0117,1.2491,-0.9196,0.5513,-0.8336,-2.2321,-0.4902,0.4906,-0.2433,1.6716,0.8924,0.2135,0.265,1.2976,-1.2006,-0.2228,-1.0322,1.2712,0.8537,-1.1425,0.2248,1.2142,1.5352,-0.8767,-0.8616,1.0898,1.3212,-0.4096,-0.2205,-1.2413,0.6487,-0.3445,0.2181,-0.1101,-0.2688,0.9861,1.7555,0.2893,-1.0052,-0.0146,-0.2805,-0.1849,0.372,-0.8515,-0.0589,-0.3473,0.3587,0.7212,2.3587,-0.8314,-0.3313,-0.1231,0.3383,-0.2673,0.6413,-2.3939,-1.2223,0.7915,-0.2928,-0.9474,-1.6171,-0.2437,-1.0865,-1.4303,1.0262,-1.7155,-1.2429,1.1698,0.5419,1.0403,2.112,1.6022,3.7416,0.5563,-0.7743,-0.8672,1.0673,-0.4178,0.793,2.1816,-0.5411,-0.1091,-0.8092,0.3496,0.2641,1.47,-0.8347,-2.2925,0.2068,0.6063,-0.5213,0.1622,0.4293,-0.3205,0.7457,0.6663,-0.4597,0.318,-1.891,0.5848,1.4781,1.0267,-0.6548,0.1661,0.4571,0.8893,0.9112,-0.7307,-1.3201,0.1753,-0.4457,1.6585,0.4222,1.2746,0.8357,-0.1453,1.8825,-0.3209,-0.3283,0.5821,-1.6599,-0.1605,-1.1815,0.2125,0.2767,0.4821,-0.2549,0.2944,1.4244,-0.7984,0.3856,-0.6221,-1.0415,-1.1377,-0.4955,1.1535,-1.7411,-0.6508,-0.5266,1.4515,1.2625,-1.2699,-1.1726,-0.0087,0.4844,0.7907,-0.0211,0.5924,-0.0854,-1.0915,-0.3111,-0.1056,-1.2872,-0.9763,-0.7622,-0.1745,1.6355,-1.7718,-0.5567,0.0795,-0.6523,-0.6975,-0.4952,0.6149,1.6694,-0.4085,-3.639,0.5286,0.0337,0.4623,-0.7793,-0.4525,-0.4563,0.7377,-1.3939,-1.2986,1.1343,-1.3608,0.8883,0.393,-0.6132,0.0563,-0.2671,0.2278,1.308,0.1864,1.2615,1.1849,-0.4048,-0.2641,-1.0839,0.2622,-0.1772,0.3617,0.844,-1.115,1.5411,0.6711,0.695,2.2019,0.0037,1.8229,0.7215,-0.6487,-0.8936,-0.9611,-0.4026,0.1816,1.004,1.7754,-0.7555,-0.3004,0.5138,-1.2875,0.708,-0.0365,-0.1413,0.4417,-0.1471,-1.2829,-0.6826,1.2937,0.1019,-0.3983,-0.3456,0.2365,0.3504,0.1183,-1.2459,-0.4111,0.4956,1.0068,-0.5763,-0.6945,0.7033,0.505,0.028,0.7771,-1.4237,-1.3816,0.3317,-0.6127,-0.2034,-1.5561,0.8918,-0.1544,-0.0785,-0.3409,2.9445,0.5741,0.9533,0.4762,-0.3302,0.6134,-0.4349,0.5627,-1.169,0.408,1.1617,0.4448,-0.0132,0.2386,-0.6141,0.2956,0.4992,0.4521,-0.379,-0.9121,1.4357,-2.0806,-0.3226,1.4244,0.037,-0.7916,0.5773,-1.5352,0.5953,-0.2628,-0.0014,0.6597,1.6488,-0.094,1.4821,-0.0936,-1.1944,0.2724,-0.3388,0.6311,-1.9242,-1.2776,1.7361,1.8968,2.2965,-0.1509,0.1337,-0.4693,-0.6521,0.4885,-1.8244,-1.5155,0.9913,-0.3047,-0.4807,-2.4249,0.9737,0.7191,0.6699,-1.593,-0.5678,0.9894,-0.7822,0.1942,-1.1456,0.1506,-0.2851,0.0609,1.2782,2.4633,-0.1703,0.8958,-1.705,0.3283,-1.1888,-1.0187,0.3773,1.3115,-0.0548,0.0077,-1.3935,-0.3889,0.0616,-1.7086,0.6335,1.1971,1.1364,1.3818,-0.6114,0.4277,1.4891,-0.4278,-0.7328,-0.5283,-1.1569,-0.137,0.702,0.801,1.1767,0.5446,2.9167,1.7288,1.5119,-0.0479,-0.7453,0.6404,-0.3633,2.6536,0.6754,0.659,-0.3707,-0.4463,0.153,-0.2288,1.2154,2.0286,-1.0706,0.6046,-0.5006,-0.3158,0.0028,2.0374,-0.4578,-2.2127,-1.7327,0.3707,0.8594,1.0517,0.5081,-1.2646,1.4416,0.0532,1.5715,1.9572,0.1489,-0.3,-0.3647,-0.1352,-0.1132,-0.004,-0.4456,-0.7177,-0.8394,1.7117,0.7184,2.5388,-0.2548,-1.6789,-2.2107,-0.4881,-1.0899,-1.296,-2.4818,0.3557,0.8811,0.2822,-1.0655,-1.4521,-1.4085,0.2901,-0.7517,0.4526,0.1488,0.372,-0.3047,0.2822,-1.4194,0.8975,-0.0578,-0.2073,-1.0025,1.7957,0.6974,1.1585,1.3376,0.4078,0.0382,0.5223,0.4484,-0.6137,-1.5233,-0.8501,1.4116,0.716,-0.0522,0.353,-0.5962,1.3763,-1.4257,-1.7957,0.6644,1.6985,-0.4991,-0.7084,0.7402,0.2793,0.5463,0.47,1.4583,-1.3768,0.203,-1.9933,1.0213,-0.5785,-1.4419,-0.214,0.724,2.1161,0.8176,0.4755,0.5573,1.1593,0.5693,0.5871,-0.2441,-0.1585,-0.367,-1.0914,-0.4485,0.8248,1.5987,-0.3024,-0.1898,0.1687,0.1988,0.3434,0.7351,0.4385,0.0643,-0.2481,1.072,0.0296,1.1415,-0.4997,0.2013,0.3209,0.3211,0.4226,-0.7757,-0.2145,-1.4449,1.2623,0.6603,1.8306,-0.4243,-0.6148,0.6814,0.4408,1.3409,-0.0431,-2.442,0.2572,0.3563,-0.4415,0.9542,1.1025,-0.2692,0.7657,0.1968,0.2764,-1.009,0.3428,1.1766,1.2469,0.3756,2.0064,0.2378,-0.8928,1.1154,-0.0701,0.0176,-0.4145,-1.3714,-0.3442,0.3146,-0.327,0.0555,0.0151,-0.0996,-0.8068,-0.477,0.7446,0.4188,-1.2171,-1.3586,2.814,-0.5481,-0.5142,1.3385,0.9705,0.288,-1.269,-1.472,0.2969,-0.0832,0.7939,-1.0005,-0.8382,1.1911,-0.2223,-0.4399,-0.7135,1.5626,-0.061,0.8097,-0.0725,-0.181,0.6568,0.1577,-0.0379,-1.1911,-0.5696,-1.3183,-1.148,0.9645,0.7875,0.1696,-0.6902,-0.6104,-0.3287,0.9909,0.6705,-1.1454,0.4002,0.217,0.0196,-0.46,0.5087,0.3566,1.1763,1.859,-0.3204,0.9979,0.0505,-1.6464,0.5889,-1.0312,-1.5499,-0.5293,2.0701,-0.4794,0.6998,-1.2694,2.1011,-1.0355,0.6447,-1.0879,-0.0658,-0.5646,-0.294,-2.2191,-0.4648,-1.4465,-0.4616,-1.441,-1.7022,0.4389,-0.395,-0.498,-0.1818,-0.3657,0.5279,-0.8206,-0.1665,1.0043,0.2732,-0.1974,-0.8172,0.5167,-0.467,0.6065,-0.9602,-0.4377,-0.1032,0.862,-0.307,-0.9087,0.8806,1.6999,-0.2641,-0.2403,-2.4154,0.3509,-1.2727,-0.6303,-0.9217,-1.1175,-0.543,1.2166,-0.5827,0.6612,0.8008,-0.0314,1.2159,1.6432,-0.5225,1.0437,-1.1571,0.9476,1.9494,0.7737,0.5729,1.1914,-1.3276,1.5286,-0.6985,-0.1236,0.4467,-0.3826,-0.3989,0.9778,-0.6258,-0.0937,-0.5441,-1.424,2.069,1.1842,-0.4635,1.618,-0.9694,-0.0673,-0.0831,0.9294,-0.6177,1.262,-0.014,-3.0747,-1.3495,0.012,-1.5786,-0.1747,-1.1091,1.6171,-1.7139,-0.447,-0.1404,-0.7203,0.7138,-0.9855,1.1009,0.7184,-0.2484,2.4899,-1.7659,-0.1192,0.0582,0.9198,0.1107,-0.3083,-0.2579,0.6231,0.1447,-0.7929,0.0825,0.2875,-1.0158,0.3992,-2.1532,-1.1982,0.5642,0.1648,0.0741,0.2215,-0.7767,-1.5128,0.2029,1.6995,0.9519,0.054,1.0202,1.6948,-0.722,-0.394,-1.7978,0.3831,0.613,1.0767,0.2244,0.3642,-0.5598,0.7561,-0.9852,0.0102,-0.2316,1.4687,1.3174,1.8726,-0.3759,1.2877,0.5333,0.31,2.0626,-1.6409,-1.159,-0.4469,-1.068,-2.0966,-0.5139,1.0939,0.6437,-1.4436,-1.1072,0.4417,0.8571,-0.4616,0.015,-0.7146,0.8322,1.3932,1.3082,-0.9052,1.3162,0.5398,1.4546,0.2727,0.5134,0.2559,-0.1978,-0.8142,-0.6623,-0.4108,0.7337,1.4149,1.7662,0.2595,-0.9689,-1.7148,1.2106,-0.3651,-1.9411,-1.1106,1.4085,1.5584,0.0089,-0.7341,1.1269,-0.0103,1.4966,2.1002,-0.9786,0.2981,0.6202,0.4331,-0.5558,-0.1706,-0.2801,-1.1074,0.9896,0.7353,0.1196,-0.4986,-0.2095,-0.2184,-1.1337,-0.1219,1.4435,0.8399,0.3086,-0.442,-0.4202,1.2433,0.4789,0.6958,-0.198,1.6256,-1.3891,0.1359,-0.0224,0.1317,0.3297,1.7042,0.6777,-0.744,-0.1239,-1.1635,-0.4359,-1.6753,1.9024,-0.1789,-0.2916,-0.0135,-1.5396,0.3842,-0.3467,0.5153,1.1731,-0.3606,-2.4993,0.4922,-0.0411,-0.6867,0.1769,-2.7447,0.4849,-0.4359,-1.5607,-1.5642,-0.0691,-0.7559,-0.5039,-0.4923,-1.3395,-0.9458,0.0403,-0.0031,-1.3205,-0.7289,-0.7446,-0.8415,0.9852,-0.2229,0.5467,-1.2915,-0.632,-0.8553,1.0111,0.9793,-0.0504,1.2144,-0.3416,-1.6762,0.3325,0.746,0.438,0.9886,-0.8132,-1.3391,1.5052,1.397,0.477,-0.6215,1.0743,-0.123,0.7901,-1.2596,-1.1712,-0.9437,0.6506,1.3041,1.3101,0.1017,-0.904,-0.7097,-0.8717,0.3472,0.9601,0.6526,-0.3362,-1.3675,-0.8558,-0.3388,1.3457,1.5043,0.9737,0.3444,0.6678,0.1701,0.9649,-0.1124,0.3024,-0.7477,0.0681,1.2125,-0.7026,-1.4313,2.616,0.4983,1.0224,-0.9052,0.0764,0.128,0.3206,0.7601,0.9029,0.5745,-0.8596,0.7913,-0.3416,1.2147,0.1482,-0.4928]}]}\n</script>\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}