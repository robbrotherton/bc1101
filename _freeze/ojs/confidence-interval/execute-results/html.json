{
  "hash": "e40e2cacebed41a06b1e02c4573f1af2",
  "result": {
    "markdown": "---\nformat: html\ntitle: \"Confidence Interval\"\ntoc: false\n---\n\n\n::: {#controls}\n\n\n::: {.cell}\n\n:::\n\n\n\n\n:::\n\n::: {#ci-container}\n:::\n\n\n\n```{ojs}\n\njStat = require(\"../js/jstat.js\")\n\n\nci = {\n\n  const w = 1050, h = 600;\n  const margin = {bottom: 30};\n  const f = d3.format(\".2f\");\n  \n  var point_estimate, sd, std_err, confidence, n, df, xlim, ci_x_lim;\n  \n  const x = d3.scaleLinear()\n    .range([0, w])\n  const xRaw = d3.scaleLinear()\n    .domain([-1, 1])\n    .range([0, w])\n  const y = d3.scaleLinear()\n    .domain([0, 0.43])\n    .range([h - margin.bottom, 0])\n  const line = d3.line()\n    .x(d => x(d.value))\n    .y(d => y(d.density));\n  const xAxis = d3.axisBottom(x);\n  const xAxisRaw = d3.axisBottom(xRaw).tickSize(10);\n  \n  function makeCurve(xlim) {\n    var arr = [];\n    var x = jStat(-xlim, xlim, 210)[0];\n    for (var i = 0; i < x.length; i++) {\n      arr.push({value: x[i], density: jStat.studentt.pdf(x[i], df)})\n    }\n    return arr\n  }\n  \n  const container = d3.select(\"#ci-container\").append(\"div\").attr(\"id\", \"params\")\n  container.append(\"div\").style(\"position\", \"absolute\")\n    .call(dropDown)\n    .call(textInput, {id: 'point-estimate', label: 'Point estimate: ', value: 0})\n    .call(textInput, {id: 'standard-deviation', label: 'Standard deviation: ', value: 1})\n    .call(stdErrSpan)\n    .call(slider, {id: 'n', label: 'n = ', value: 30})\n    .call(slider, {id: 'ci', label: 'CI: ', value: 95})\n  \n  const svg = d3.select(\"#ci-container\").append(\"svg\")\n    .attr(\"width\", w).attr(\"height\", h)\n    \n  const axis = svg.append(\"g\")\n    .attr(\"transform\", `translate(0, ${y(0)})`)\n    .style(\"color\", \"steelblue\")\n    .call(xAxis);\n    \n  const axisRaw = svg.append(\"g\")\n    .attr(\"transform\", `translate(0, ${y(0)})`)\n    .call(xAxisRaw);\n    \n  const defs = svg.append(\"defs\")\n  const mask = defs.append(\"mask\").attr(\"id\", \"mask\")\n  const mask_rect = mask.append(\"rect\")\n  .attr(\"height\", h)\n  .style(\"fill\", \"white\")\n  \n  const ci_fill = svg.append(\"path\")\n    .attr(\"mask\", \"url(#mask)\")\n    .style(\"stroke\", \"none\").style(\"fill\", \"lightblue\")\n  \n  const ci_curve = svg.append(\"path\")\n    .attr(\"class\", \"invertable\")\n    .style(\"stroke\", \"black\")\n    .style(\"fill\", \"none\")\n    .style(\"stroke-width\", 4)\n  \n  const ci_line = svg.append(\"line\")\n    .style(\"stroke\", \"black\").style(\"stroke-dasharray\", [5,5])\n  \n  const ci_point_estimate = svg.append(\"line\")\n    .style(\"stroke\", \"black\").style(\"stroke-dasharray\", [5,5])\n    \n  const ci_limit_labels = svg.append(\"g\")\n  const ci_limit_lower = ci_limit_labels.append(\"text\")\n  const ci_limit_upper = ci_limit_labels.append(\"text\").style(\"text-anchor\", \"end\")\n  \n  const inputCI =  d3.select(\"#input-ci\")\n  const inputN =  d3.select(\"#input-n\")\n  const inputPoint =  d3.select(\"#input-point-estimate\")\n  const inputSd =  d3.select(\"#input-standard-deviation\")\n  const inputTest =  d3.select(\"#test\")\n  \n  function initialize() {\n    point_estimate = Number(inputPoint.property(\"value\"));\n    sd = Number(inputSd.property(\"value\"));\n    n = Number(inputN.property(\"value\"));\n    std_err = computeStdErr();\n    df = computeDf(n);\n    confidence = Number(inputCI.property(\"value\"));\n    updateSliderTextValues();\n    updateCI();\n  }\n  \n  function updateSliderTextValues() {\n    d3.select(\"#value-standard-error\").text(f(std_err));\n    d3.select(\"#value-ci\").text(confidence);\n    d3.select(\"#value-n\").text(n);\n  }\n  \n  inputCI.on(\"input\", initialize)\n  inputN.on(\"input\", initialize)\n  inputPoint.on(\"input\", initialize)\n  inputSd.on(\"input\", initialize)\n  inputTest.on(\"change\", initialize)\n  \n  function computeDf(n) {\n    var selectedTestType = inputTest.node().value;\n    if (selectedTestType==\"single\" || selectedTestType==\"related\") return n - 1;\n    if (selectedTestType==\"independent\") return n - 2;\n  }\n  \n  function computeStdErr() {\n    var variance = sd * sd;\n    var selectedTestType = inputTest.node().value;\n    \n    if (selectedTestType==\"single\") return sd / Math.sqrt(n);\n    if (selectedTestType==\"independent\") return Math.sqrt(variance/(n/2) + variance/(n/2)) ;\n    if (selectedTestType==\"related\") return sd / Math.sqrt(n);\n  }\n  \n \n  function updateCI() {\n    var selectedTestType = inputTest.node().value;\n    if (selectedTestType==\"independent\") {\n      xlim = sd / (std_err / 2);\n      xRaw.domain([point_estimate - sd*2, point_estimate + sd*2]);\n    } else {\n      xlim = sd / std_err;\n      xRaw.domain([point_estimate - sd, point_estimate + sd]);\n    }\n    \n    x.domain([-xlim, xlim]);\n    axis.call(xAxis);\n    axisRaw.call(xAxisRaw);\n\n    ci_x_lim = jStat.studentt.inv((1 - (confidence/100)) / 2, df);\n    <!-- console.log(ci_x_lim); -->\n    var line_height = jStat.studentt.pdf(ci_x_lim, df) / 2;\n\n    var ci_lims = [point_estimate + ci_x_lim * std_err, point_estimate - ci_x_lim * std_err];\n\n    ci_limit_lower\n      .text(f(ci_lims[0]))\n      .attr(\"x\", x(ci_x_lim))\n      .attr(\"y\", y(line_height))\n    ci_limit_upper\n      .text(f(ci_lims[1]))\n      .attr(\"x\", x(-ci_x_lim))\n      .attr(\"y\", y(line_height))\n\n    ci_fill.attr(\"d\", line(makeCurve(15)))\n    ci_curve.attr(\"d\", line(makeCurve(xlim)))\n    \n    mask_rect\n      .attr(\"x\", x(ci_x_lim))\n      .attr(\"width\", x(-ci_x_lim) - x(ci_x_lim));\n\n    ci_line\n      .attr(\"transform\", `translate(0, ${y(line_height)})`)\n      .attr(\"x1\", x(-ci_x_lim)).attr(\"x2\", x(ci_x_lim))\n    ci_point_estimate\n      .attr(\"transform\", `translate(${x(0)}, 0)`)\n      .attr(\"y1\", y(jStat.studentt.pdf(0, df))).attr(\"y2\", y(0))\n  }\n  \n  \n  \n  initialize();\n}\n\ndropDown = function(selection) {\n  selection.append(\"div\").html(`\n  <label for=\"test\">Test type:</label>\n  <select id=\"test\" name=\"test\">\n    <option value=\"single\">Single-sample</option>\n    <option value=\"independent\" selected>Independent-samples</option>\n    <option value=\"related\">Related-samples</option>\n  </select>\n  `)\n}\n\ntextInput = function(selection, options) {\n  selection.append(\"div\").html(`\n  \n  <label for=\"input-${options.id}\" class = \"text-input-label\" style=\"\">${options.label}\n<input type=\"text\" id=\"input-${options.id}\" class=\"text-input-box math\" name=\"${options.id}\" value=\"${options.value}\" style=\"width: 3em;\">\n</label>`)\n}\n\nslider = function(selection, options) {\n  selection.append(\"div\").html(`\n  \n  <label for=\"input-${options.id}\" style=\"font-family: KaTeX_Main; font-size: 1em; font-style: italic; height: 1em;\">${options.label}</label>\n<span id=\"value-${options.id}\" class=\"math\" style=\"display: inline-block; width: 1em;\">${options.value}</span>\n<input data-prevent-swipe type=\"range\" id=\"input-${options.id}\" name=\"scale\" value=\"${options.value}\" min=\"2\" max=\"100\" step=\"1\" style=\"border: none; height: 1em; font-family: KaTeX_Main; font-size: 1em; margin-left: 0.5em; width: 50%; vertical-align: unset;\">\n  `)\n}\n\nstdErrSpan = function(selection, options) {\n  selection.append(\"div\").html(`\n    Standard error: <span id=\"value-standard-error\"></span>\n  `)\n}\n\n```\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}