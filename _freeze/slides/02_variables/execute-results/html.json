{
  "hash": "83f245ddf8d4355c935807ced36f117c",
  "result": {
    "markdown": "---\nformat: revealjs\n---\n\n\n# 2|VARIABLES\n\n::: {#cover-image style=\"position: absolute\"}\n:::\n\n![](covers/variables-no-axis.svg){style=\"position: absolute;\"}\n\n# Overview\n\n- [Statistics: Why? How? What?](#making-statistics)\n- [Measuring things]\n- [Populations & samples]\n- [Learning checks]\n\n\n\n# Making statistics\n\n\n- Where do statistics come from?\n\n\n## Producing a statistic\n\n- How many books are [__red__]{style=\"color: red;\"}\n  - Gather data to determine what proportion of books are red\n  - Enter your best estimate and explain your process\n  - Suggested time limit: 5 minutes\n\n![](media/red-book.svg)\n\n\n\n## Making statistics\n\n> In the United States today half of all children (35.6 million) live in a household where a parent or other adult uses tobacco, drinks heavily or uses illicit drugs^[[The National Center on  Addiction and Substance Abuse at Columbia University, 2005](https://web.archive.org/web/20191017204229/https://www.centeronaddiction.org/addiction-research/reports/family-matters-substance-abuse-and-american-family)]\n\n- Other questions...\n  - How many students are smokers?\n  - Young people, narcissism, anxiety, depression ^[See [Singal, 2016](https://www.thecut.com/2016/03/for-80-years-young-americans-have-been-getting-more-anxious-and-depressed.html)]\n\n\n# Measuring things\n\n## Constructs & operational definitions\n\n- Construct: Extroversion\n- Operational definition: Big 5 questions\n\n::: {.fragment}\n- Construct: Intelligence\n- Operational definition: IQ test\n:::\n\n:::{.fragment}\n- Construct: Height\n- Operational definition: How far the top of your head is from the floor according to a tape measure\n:::\n\n\n## Operationalizing variables\n\n- Usually more than one way we could measure & record data\n- Result in different types of data, and potentially different applicable analyses\n- How to decide on operational definition?\n  - Aspects to consider:\n    - Type of variable (discrete / continuous)\n    - Scale of measurement (nominal / ordinal / interval / ratio)\n\n\n## Types of variable {.smaller}\n\n:::: {.columns}\n::: {.column width=50%}\n- Discrete\n  - Count as whole numbers\n  - Separate, indivisible categories\n  - No values exist between neighboring categories\n  - E.g. number of children/cats/tvs; positive cases; hospital admissions\n:::\n\n::: {.column width=50%}\n- Continuous\n  - Can be measured with decimals\n  - Has infinite number of possible values\n  - Every interval is divisible into infinite number of parts\n  - E.g. height, time, temperature\n:::\n::::\n\n\n\n\n:::: {.columns .c}\n\n\n::: {.cell}\n\n:::\n\n\n::: {.column width=\"50%\"}\n\n```{ojs}\nbar_xScale = d3.scaleBand()\n  .domain([1,2,3,4,5])\n  .range([m, w - m])\n\nbar_yScale = d3.scaleLinear()\n  .domain([0, 3])\n  .range([h - m, m])\n    \nbar_chart = {\n\n  const svg = d3.select(DOM.svg(w, h))\n    .attr(\"class\", \"invertable\")\n    .attr(\"lazy-load\", true)\n  \n  const axis_lines = svg.append(\"g\")\n    .attr(\"stroke\", \"black\")\n    .attr(\"fill\", \"none\")\n    \n  const bars = svg.append(\"g\")\n    .attr(\"fill\", \"black\")\n    .attr(\"stroke\", \"none\")\n  \n  bars.selectAll(\"rect\")\n    .data(bar_data)\n    .enter()\n      .append(\"rect\") \n      .attr(\"transform\", \"rotate(180)\")\n      .attr(\"transform-origin\", \"center center\")\n      .attr(\"x\", d => bar_xScale(d.value)+2.5)\n      .attr(\"y\", m)\n      .attr(\"width\", (w-2*m)/5-5)\n      .attr(\"height\", d => d.density*(h-m*2)/3)\n      \n\n  svg.on('click',function(){\n   bars.selectAll(\"rect\")\n    .attr(\"height\", 0)\n    .transition()\n    .duration(300)\n    .delay(function(d, i){return (6-i)*300})\n    .attr(\"height\", d => d.density*(h-m*2)/3);\n  })\n  \n\n  axis_lines.selectAll(\"line\")\n    .data(line_data)\n    .enter()\n      .append(\"line\")\n        .attr(\"x1\", d => d.x1)\n        .attr(\"x2\", d => d.x2)\n        .attr(\"y1\", d => d.y1)\n        .attr(\"y2\", d => d.y2)\n    \n  return svg.node();\n}\n```\n\n:::\n\n::: {.column width=\"50%\"}\n\n```{ojs}\n\nxScale = d3.scaleLinear()\n  .domain([-3, 3])\n  .range([margins.left, w - m])\n\nyScale = d3.scaleLinear()\n  .domain([0, 0.4])\n  .range([h - m, m])\n  \nsmooth_curve = {\n  const svg_curve = d3.select(DOM.svg(w, h))\n    .attr(\"class\", \"invertable\");\n  \n  const axis_lines = svg_curve.append(\"g\")\n    .attr(\"stroke\", \"black\")\n    .attr(\"fill\", \"none\")\n  \n  var p = svg_curve.append(\"path\")\n    .datum(curve_data)\n    .attr(\"stroke\", \"black\")\n    .attr(\"stroke-width\", 2)\n    .attr(\"fill\", \"none\")\n    .attr(\"d\", line)\n    \n  var totalLength = p.node().getTotalLength();\n\n  svg_curve.on(\"click\", function(){\n    p.transition()\n      .duration(0)\n      .attr(\"stroke-dasharray\", totalLength + \" \" + totalLength)\n      .attr(\"stroke-dashoffset\", totalLength)\n      .transition()\n      .duration(2000)\n      .attr(\"stroke-dashoffset\", 0)})\n        \n  axis_lines.selectAll(\"line\")\n    .data(line_data)\n    .enter()\n      .append(\"line\")\n        .attr(\"x1\", d => d.x1)\n        .attr(\"x2\", d => d.x2)\n        .attr(\"y1\", d => d.y1)\n        .attr(\"y2\", d => d.y2)\n    \n  return svg_curve.node();\n}\n```\n\n:::\n\n::::\n\n\n\n\n```{ojs}\n\nw = 400\nh = 200\n\nm = 20\nhalf_m = m * 0.5\n\nmargins = ({top: 20, right: 20, bottom: 20, left: 20})\n\nline_data = [\n    {x1: half_m, x2: w - half_m, y1: h - half_m, y2: h - half_m},\n    {x1: half_m, x2: half_m, y1: h - half_m, y2: half_m}\n  ]\n  \nline = d3.line()\n    .x(d => xScale(d.value))\n    .y(d => yScale(d.density))\n    \n\n```\n\n\n\n\n## Scales of measurement {.smaller}\n\n\n::: {.cell}\n::: {.cell-output-display}\n`````{=html}\n<table>\n <thead>\n  <tr>\n   <th style=\"text-align:left;\"> Scale </th>\n   <th style=\"text-align:left;\"> Characteristics </th>\n   <th style=\"text-align:left;\"> Examples </th>\n  </tr>\n </thead>\n<tbody>\n  <tr>\n   <td style=\"text-align:left;\"> Nominal </td>\n   <td style=\"text-align:left;\"> Named categories<br>\n                                      No quantitative distinctions </td>\n   <td style=\"text-align:left;\"> Gender<br>Eye color<br>Experimental condition </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Ordinal </td>\n   <td style=\"text-align:left;\"> Ordered categories<br>\n                                      Indicates direction, but not size of difference </td>\n   <td style=\"text-align:left;\"> Rank<br>Clothing sizes<br>Olympic medals </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Interval </td>\n   <td style=\"text-align:left;\"> Ordered categories<br>\n                                      Equal intervals between categories<br>\n                                      Arbitrary or absent zero point </td>\n   <td style=\"text-align:left;\"> Temperature (Celcius/Fahrenheit)<br>Golf scores </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Ratio </td>\n   <td style=\"text-align:left;\"> Ordered categories<br>\n                                      Equal interval between categories<br>\n                                      Absolute zero point </td>\n   <td style=\"text-align:left;\"> Temperature (Kelvin)<br>\n                               Number of correct answers<br>\n                               Response time </td>\n  </tr>\n</tbody>\n</table>\n\n`````\n:::\n:::\n\n\n\n## Likert scales\n\n\n::: {.cell}\n<style type=\"text/css\">\n\n.form-check-input {\n  width: 2em;\n  height: 2em;\n}\n\n.likert {\n  border: 1px black solid;\n  margin-top: 1em;\n  padding: 0.5em;\n}\n\n.likert > p {\n  margin-top: 0;\n  font-style: normal;\n}\n\n.likert .likert-options {\n  display: flex; \n  justify-content: center;\n}\n\n</style>\n:::\n\n\n::: {.likert}\nWhat is your current level of happiness?\n\n::: {.likert-options}\n\n::: {.cell}\n::: {.cell-output-display}\n```{=html}\n  \n    <label class=\"form-check-label\">\n    <input class=\"form-check-input\" type=\"radio\" name=\"flexRadioDefault\" >\n    1. A lot less than usual\n    </label>\n```\n:::\n\n::: {.cell-output-display}\n```{=html}\n  \n    <label class=\"form-check-label\">\n    <input class=\"form-check-input\" type=\"radio\" name=\"flexRadioDefault\" >\n    2. A little less than usual\n    </label>\n```\n:::\n\n::: {.cell-output-display}\n```{=html}\n  \n    <label class=\"form-check-label\">\n    <input class=\"form-check-input\" type=\"radio\" name=\"flexRadioDefault\" checked>\n    3. About average\n    </label>\n```\n:::\n\n::: {.cell-output-display}\n```{=html}\n  \n    <label class=\"form-check-label\">\n    <input class=\"form-check-input\" type=\"radio\" name=\"flexRadioDefault\" >\n    4. A little more than usual\n    </label>\n```\n:::\n\n::: {.cell-output-display}\n```{=html}\n  \n    <label class=\"form-check-label\">\n    <input class=\"form-check-input\" type=\"radio\" name=\"flexRadioDefault\" >\n    5. A lot more than usual\n    </label>\n```\n:::\n:::\n\n:::\n:::\n<!-- ::: {.center} -->\n<!-- * [] 1. A lot less than usual -->\n<!-- 2. A little less than usual -->\n<!-- 3. About average -->\n<!-- 4. A little more than usual -->\n<!-- 5. A lot more than usual -->\n<!-- ::: -->\n\n# Populations & samples\n\n## Draw sample, make inference\n\n\n::: {.cell}\n<style type=\"text/css\">\n\n#population-box {\n  opacity: 0.9;\n}\n\n#population-box:hover {\n  opacity: 0;\n}\n\n#refresh form {\n  overflow: hidden;\n}\n\n#refresh button {\n  color: black;\n  background: none;\n  border: none;\n  font-size: 0.8em !important;\n}\n\n#refresh button:hover {\n  -webkit-animation:spin 1s linear;\n  -moz-animation:spin 1s linear;\n  animation:spin 1s;\n}\n\n@-moz-keyframes spin { \n    100% { -moz-transform: rotate(360deg); } \n}\n@-webkit-keyframes spin { \n    100% { -webkit-transform: rotate(360deg); } \n}\n@keyframes spin { \n    100% { \n        -webkit-transform: rotate(360deg); \n        transform:rotate(360deg); \n    } \n}\n\n</style>\n:::\n\n\n::: {#refresh .invertable style=\"position: absolute; top: 49%; left: 15%;\" }\n\n```{ojs}\nviewof s = Inputs.button(html`&#x21bb;`)\n```\n\n:::\n\n\n\n```{ojs}\n\ndata = {\n  let arr = [];\n  for (var i = 0; i < 150; i++) {\n    arr.push({\n      x: Math.floor(Math.random() * xmax),\n      y: Math.floor(Math.random() * ymax),\n      color: Math.floor(Math.random() * 7)\n    });\n  }\n  return arr;\n}\n\nwidth = 1050\nheight = 500\nr = 15\nxmax = 400\nymax = 100\nsample_y = height - r - 1\nmargin = ({top: r*2, right: 10, bottom: r, left: 5});\n\n\npop = {\n  const svg = d3.select(DOM.svg(width, height));\n\n  const sample = svg.append(\"g\").attr(\"id\", \"sample-circles\")\n  const circles = svg.append(\"g\").attr(\"id\", \"pop-circles\")\n  \n  let path = {\n    x: (width*0.5 + xmax*.5 + r),\n    y: (margin.top + ymax*0.5),\n    cy: (height - r - (margin.top + ymax*0.5)) * 0.5\n  };\n  \n  const paths = svg.append(\"g\").attr(\"id\", \"paths\")\n                        .attr(\"stroke\", \"black\")\n                        .attr(\"fill\", \"none\")\n                        .attr(\"class\", \"invertable\");\n                        \n  const labels = svg.append(\"g\").attr(\"id\", \"labels\")\n                        .attr(\"text-anchor\", \"middle\")\n                        .attr(\"dy\", \"1em\")\n                        .attr(\"class\", \"invertable\");\n                        \n\n  sample.selectAll(\"circle\")\n    .data(new_sample)\n    .enter()\n    .append(\"circle\")\n      .attr(\"fill\", d => color(d))\n      .attr(\"stroke\", \"black\")\n      .attr(\"r\", r)\n      .attr(\"cx\", function(d, i) {return (i * 41.5 + width/2 - xmax/2 + r)})\n      .attr(\"cy\", 55)\n        .transition()\n        .duration(700)\n        .delay(function(d, i) {return i * 50})\n        .attr(\"cy\", sample_y);\n  \n  circles.selectAll(\"circle\")\n    .data(data)\n    .enter()\n    .append(\"circle\")\n      .attr(\"fill\", d => color(d.color))\n      .attr(\"stroke\", \"black\")\n      .attr(\"r\", 15)\n      .attr(\"cx\", d => x(d.x))\n      .attr(\"cy\", d => y(d.y))\n          \n  svg.append(\"rect\").attr(\"id\", \"population-box\")\n    .attr(\"x\", width/2 - xmax/2 - r)\n    .attr(\"y\", margin.top - r)\n    .attr(\"width\", xmax + 2*r)\n    .attr(\"height\",ymax + 2*r)\n    .attr(\"fill\", \"white\")\n    \n  svg.append(\"rect\").attr(\"id\", \"population-outline\")\n    .attr(\"x\", width/2 - xmax/2 - r)\n    .attr(\"y\", margin.top - r)\n    .attr(\"width\", xmax + 2*r)\n    .attr(\"height\",ymax + 2*r)\n    .attr(\"stroke\", \"black\")\n    .attr(\"fill\", \"none\")\n    \n  paths.append(\"path\").attr(\"id\", \"inference-path\")\n    .attr(\"d\", \"M\" + path.x + \" \" + path.y + \" q200 \" + path.cy + \" 0 \" + (height - r - path.y))\n    .attr(\"stroke-dasharray\", [5, 5])\n    \n  paths.append(\"path\").attr(\"id\", \"sample-path\")\n    .attr(\"d\", \"M\" + (path.x - xmax - 2*r) + \" \" + path.y + \" q-200,\" + path.cy + \" 0 \" + (height - r - path.y))\n    \n  svg.append(\"polygon\").attr(\"id\", \"down-arrow\")\n    .attr(\"points\", [[0,0],[10,0],[5,10]])\n    .attr(\"transform\", \"translate(200,\" + (path.cy+margin.top+ymax*0.5 - 10) +\") scale(2)\")\n    .attr(\"class\", \"invertable\");\n    \n  svg.append(\"polygon\").attr(\"id\", \"up-arrow\")\n    .attr(\"points\", [[0,0],[10,0],[5,10]])\n    .attr(\"transform\", \"translate(850,\" + (path.cy+margin.top+ymax*0.5 + 10) +\") scale(2) rotate(180)\")\n    .attr(\"class\", \"invertable\");\n    \n  labels.append(\"text\").attr(\"id\", \"population-label\")\n    .text(\"POPULATION\")\n    .attr(\"x\", width/2)\n    .attr(\"y\", margin.top + ymax + 2*r + 20)\n    \n  labels.append(\"text\").attr(\"id\", \"sample-label\")\n    .text(\"SAMPLE\")\n    .attr(\"x\", width/2)\n    .attr(\"y\", sample_y - r - 10)\n    \n\n  return svg.node();\n}\n\n\n\nx = d3.scaleLinear()\n  .domain([0, xmax])\n  .range([width/2 - xmax/2, width/2 + xmax/2])\n\ny = d3.scaleLinear()\n  .domain([0, ymax])\n  .range([margin.top + ymax, margin.top])\n  \ncolor = d3.scaleOrdinal().\n  domain(data.map(d => d.color))\n  .range(d3.schemeSet3);\n  \nnew_sample = {\n  s;\n  let arr = [];\n  for (var i = 0; i < 10; i++) {\n    arr.push(Math.floor(Math.random() * 7))\n  }\n  return arr;\n}\n\n```\n\n\n\n\n## Terminology\n\n:::: {.columns}\n\n::: {.column width=\"50%\"}\n- __Populations__\n  - Population *parameters*\n  - Usually Greek symbols\n  - e.g. $\\mu$; $N$\n  - Inferential statistics\n:::\n\n::: {.column width=\"50%\"}\n- __Samples__\n  - Sample *statistics*\n  - Usually letters\n  - e.g. $M$; $n$\n  - Descriptive statistics\n:::\n\n::::\n\n\n# Learning checks\n\n- A tax form asks people to identify their\n  - Age\n  - Annual income\n  - Number of dependents\n  - Social security number\n- For each variable...\n  1. Identify the scale of measurement that probably is used\n  2. Explain whether the variable is continuous or discrete\n  \n::: {.content-hidden}\n# Data and figures\n:::\n\n\n```{ojs}\n\ncover = {\n\n  const w = 1050\n  const h = 525\n  const marginX = 105\n  const marginY = 45\n  \n  const svg = d3.select(\"#cover-image\")\n    .append(\"svg\")\n    .attr(\"width\", w)\n    .attr(\"height\", h)\n    \n  const lines = svg.append(\"g\").attr(\"id\", \"axis-lines\")\n    .attr(\"stroke\", \"black\")\n    .attr(\"class\", \"invertable\")\n    \n  lines.append(\"line\")\n      .attr(\"x1\", marginX)\n      .attr(\"x2\", w-marginX)\n      .attr(\"y1\", h-marginY)\n      .attr(\"y2\", h-marginY)\n  lines.append(\"line\")\n    .attr(\"x1\", marginX)\n    .attr(\"x2\", marginX)\n    .attr(\"y1\", h-marginY)\n    .attr(\"y2\", marginY)\n  \n  const labels = svg.append(\"g\").attr(\"id\", \"axis-text\")\n    .attr(\"stroke\", \"black\")\n    .attr(\"class\", \"invertable\")\n    .attr(\"font-family\", \"KaTeX_Main\")\n    .attr(\"font-style\", \"italic\")\n  \n  labels.append(\"text\")\n    .attr(\"x\", w/2)\n    .attr(\"y\", h - (marginY-30))\n    .text(\"x\")\n  labels.append(\"text\")\n    .attr(\"x\", marginX-30)\n    .attr(\"y\", h/2)\n    .text(\"y\")\n}\n\n```\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<script type=\"ojs-define\">\r\n{\"contents\":[{\"name\":\"curve_data\",\"value\":[{\"value\":-3,\"density\":0.0044},{\"value\":-2.9,\"density\":0.006},{\"value\":-2.8,\"density\":0.0079},{\"value\":-2.7,\"density\":0.0104},{\"value\":-2.6,\"density\":0.0136},{\"value\":-2.5,\"density\":0.0175},{\"value\":-2.4,\"density\":0.0224},{\"value\":-2.3,\"density\":0.0283},{\"value\":-2.2,\"density\":0.0355},{\"value\":-2.1,\"density\":0.044},{\"value\":-2,\"density\":0.054},{\"value\":-1.9,\"density\":0.0656},{\"value\":-1.8,\"density\":0.079},{\"value\":-1.7,\"density\":0.094},{\"value\":-1.6,\"density\":0.1109},{\"value\":-1.5,\"density\":0.1295},{\"value\":-1.4,\"density\":0.1497},{\"value\":-1.3,\"density\":0.1714},{\"value\":-1.2,\"density\":0.1942},{\"value\":-1.1,\"density\":0.2179},{\"value\":-1,\"density\":0.242},{\"value\":-0.9,\"density\":0.2661},{\"value\":-0.8,\"density\":0.2897},{\"value\":-0.7,\"density\":0.3123},{\"value\":-0.6,\"density\":0.3332},{\"value\":-0.5,\"density\":0.3521},{\"value\":-0.4,\"density\":0.3683},{\"value\":-0.3,\"density\":0.3814},{\"value\":-0.2,\"density\":0.391},{\"value\":-0.1,\"density\":0.397},{\"value\":0,\"density\":0.3989},{\"value\":0.1,\"density\":0.397},{\"value\":0.2,\"density\":0.391},{\"value\":0.3,\"density\":0.3814},{\"value\":0.4,\"density\":0.3683},{\"value\":0.5,\"density\":0.3521},{\"value\":0.6,\"density\":0.3332},{\"value\":0.7,\"density\":0.3123},{\"value\":0.8,\"density\":0.2897},{\"value\":0.9,\"density\":0.2661},{\"value\":1,\"density\":0.242},{\"value\":1.1,\"density\":0.2179},{\"value\":1.2,\"density\":0.1942},{\"value\":1.3,\"density\":0.1714},{\"value\":1.4,\"density\":0.1497},{\"value\":1.5,\"density\":0.1295},{\"value\":1.6,\"density\":0.1109},{\"value\":1.7,\"density\":0.094},{\"value\":1.8,\"density\":0.079},{\"value\":1.9,\"density\":0.0656},{\"value\":2,\"density\":0.054},{\"value\":2.1,\"density\":0.044},{\"value\":2.2,\"density\":0.0355},{\"value\":2.3,\"density\":0.0283},{\"value\":2.4,\"density\":0.0224},{\"value\":2.5,\"density\":0.0175},{\"value\":2.6,\"density\":0.0136},{\"value\":2.7,\"density\":0.0104},{\"value\":2.8,\"density\":0.0079},{\"value\":2.9,\"density\":0.006},{\"value\":3,\"density\":0.0044}]}]}\r\n</script>\r\n<script type=\"ojs-define\">\r\n{\"contents\":[{\"name\":\"bar_data\",\"value\":[{\"value\":1,\"density\":1},{\"value\":2,\"density\":2},{\"value\":3,\"density\":3},{\"value\":4,\"density\":2},{\"value\":5,\"density\":1}]}]}\r\n</script>\r\n"
      ],
      "include-after-body": [
        "\r\n<script>\r\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\r\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\r\n  // slide changes (different for each slide format).\r\n  (function () {\r\n    function fireSlideChanged(previousSlide, currentSlide) {\r\n\r\n      // dispatch for htmlwidgets\r\n      const event = window.document.createEvent(\"Event\");\r\n      event.initEvent(\"slideenter\", true, true);\r\n      window.document.dispatchEvent(event);\r\n\r\n      // dispatch for shiny\r\n      if (window.jQuery) {\r\n        if (previousSlide) {\r\n          window.jQuery(previousSlide).trigger(\"hidden\");\r\n        }\r\n        if (currentSlide) {\r\n          window.jQuery(currentSlide).trigger(\"shown\");\r\n        }\r\n      }\r\n    }\r\n\r\n    // hookup for reveal\r\n    if (window.Reveal) {\r\n      window.Reveal.addEventListener(\"slidechanged\", function(event) {\r\n        fireSlideChanged(event.previousSlide, event.currentSlide);\r\n      });\r\n    }\r\n\r\n    // hookup for slidy\r\n    if (window.w3c_slidy) {\r\n      window.w3c_slidy.add_observer(function (slide_num) {\r\n        // slide_num starts at position 1\r\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\r\n      });\r\n    }\r\n\r\n  })();\r\n</script>\r\n\r\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}