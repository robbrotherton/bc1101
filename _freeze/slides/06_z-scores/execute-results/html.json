{
  "hash": "b5636eb8f9cebde6c0701614c999507f",
  "result": {
    "markdown": "---\nformat: revealjs\n---\n\n\n# 6|$z$-scores\n\n::: {#cover-container}\n:::\n\n\n# Overview\n\n- [$z$-scores]\n- [Standardized distributions]\n- [$z$-scores & making inferences](#inferential)\n- [Learning checks]\n\n\n# $z$-scores\n\n\n## $z$-score calculation\n\n- $z$-score formula:\n\n::: {.center-element}\n$z = \\dfrac{X - \\mu}\\sigma$\n&nbsp;&nbsp;&nbsp;&nbsp;or...&nbsp;&nbsp;&nbsp;&nbsp;\n$z = \\dfrac{X - M}s$\n:::\n\n- Numerator: deviation score\n- Denominator: standard deviation\n- $z$ expresses deviation in SD units\n\n## $z$-score description {.small}\n\n:::: {.columns}\n\n::: {.column .small}\n- $z$-score describes exact location of any score in a distribution\n- Two pieces of information:\n  - Sign\n    - Positive or negative\n    - Indicates whether score is located above or below the mean\n  - Magnitude\n    - Indicates distance between score and mean in standard deviation units\n    - $z = 0$ is equal to the mean\n:::\n\n\n::: {.column}\n![](media/z-distribution.svg){.invertable style=\"position: absolute; top: 50%; left: 25%; transform: translate(-50%, -50%);\"}\n:::\n\n::::\n\n\n## Example: test scores\n\n- How well did you do on a test\n- Is your score good, bad, just ok?\n\n\n::: {.cell}\n::: {.cell-output-display}\n|Test           | Score|  M| SD|\n|:--------------|-----:|--:|--:|\n|geniustest.com |    80| 70| 70|\n|mensa.lu       |    40| 20|  5|\n:::\n:::\n\n\n- $z$-score can describe location of a score in any distribution\n  - Makes scores from different distributions comparable\n\n\n## Example: test scores\n\n- Comparing scores from different distributions\n  - How many SDs is a score above/below the mean?\n\n:::: {.columns}\n\n::: {.column .center-element}\n$z = \\dfrac{80-70}{5} = \\dfrac{10}{5} = 2$\n\n![](media/iq-dist-1.svg){.invertable}\n\n\n:::\n\n::: {.column .center-element}\n$z = \\dfrac{40-20}{10} = \\dfrac{20}{10} = 2$\n\n![](media/iq-dist-2.svg){.invertable}\n:::\n::::\n\n## Determining raw score from $z$-score\n\n::: {.center-element}\n$z = \\dfrac{X - \\mu}\\sigma$\n&nbsp;&nbsp;&nbsp;&nbsp;so...&nbsp;&nbsp;&nbsp;&nbsp;\n$X = \\mu + z\\sigma$\n:::\n\n  - Algebraically solve for $X$ \n  - Raw score $X$ equals population mean plus $z$ multiplied by standard deviation \n\n## Determining raw score from $z$-score\n\n\n:::: {.columns}\n\n::: {.column}\n$$\\begin{align} \nX & = \\mu + z\\sigma \\\\\n& = 70 + 2*5 \\\\ \n& = 70 + 10 \\\\\n& = 80 \\end{align}$$\n\n![](media/iq-z-dist-1.svg){.invertable}\n:::\n\n::: {.column}\n$$\\begin{align} \nX & = \\mu + z\\sigma \\\\\n& = 20 + 2*10 \\\\ \n& = 20 + 20 \\\\\n& = 40 \\end{align}$$\n\n![](media/iq-z-dist-2.svg){.invertable}\n:::\n::::\n\n# Standardized distributions\n\n## $z$ distribution\n\n- Every $X$ value can be transformed to a $z$-score\n    - $z$-score distribution is called a standardized distribution \n- Characteristics of $z$-score transformation\n    - Same shape as original distribution\n    - Mean of $z$-score distribution is always $0$\n        - Because the mean is the balance point; $\\Sigma (X - \\mu)$ always equals $0$\n    - Standard deviation is always $1.00$\n        - Because $SD$ is the denominator\n\n## Example\n\n![](media/generic-dist-1.svg){.invertable width=70%}\n\n![](media/generic-dist-2.svg){.invertable width=70%}\n\n\n## Other standardized distributions {.small}\n\n- Standardized: Predetermined mean & SD\n    - $z$ distribution has $\\mu = 0$ and $\\sigma = 1$\n    - SAT has $\\mu = 500$ and $\\sigma = 100$\n    - IQ has $\\mu=100$ and $\\sigma=15$ points<br><br>\n\n- Standardizing a distribution has two steps\n  1. Original raw scores transformed to $z$-scores\n  2. The $z$-scores are transformed to new $X$ values so that the specific predetermined $\\mu$ and $\\sigma$ are attained  \n      2a. Multiply to set SD  \n      2b. Add or subtract a constant to set the mean\n\n\n\n## Standardizing scores {.smaller}\n\n:::: {.columns }\n::: {.column width=\"12%\"}\n \n:::\n::: {.column width=\"22%\"}\nOriginal\n:::\n::: {.column width=\"22%\"}\n1. $z$-scores\n:::\n::: {.column width=\"22%\"}\n2a. Set SD\n:::\n::: {.column width=\"22%\"}\n2b. Set $M$\n:::\n::::\n\n:::: {.columns}\n::: {.column width=\"12%\"}\ngeniustest\n:::\n::: {.column width=\"22%\"}\n![](media/standardizing-genius.svg){.invertable}\n:::\n::: {.column width=\"22%\"}\n![](media/standardizing-z.svg){.invertable}\n:::\n::: {.column width=\"22%\"}\n![](media/standardizing-sd.svg){.invertable}\n:::\n::: {.column width=\"22%\"}\n![](media/standardizing-iq.svg){.invertable}\n:::\n::::\n\n:::: {.columns}\n::: {.column width=\"12%\"}\nmensa.lu\n:::\n::: {.column width=\"22%\"}\n![](media/standardizing-mensa.svg){.invertable}\n:::\n::: {.column width=\"22%\"}\n![](media/standardizing-z.svg){.invertable}\n:::\n::: {.column width=\"22%\"}\n![](media/standardizing-sd.svg){.invertable}\n:::\n::: {.column width=\"22%\"}\n![](media/standardizing-iq.svg){.invertable}\n:::\n::::\n\n\n\n# $z$-scores and inferential stats {#inferential}\n\n- What’s the use of $z$-scores?\n  - Research questions are often about looking for differences\n  - Does one individual seem different from others?\n  - Is a sample “noticeably different” from the population?\n  - $z$ is one indication of how typical a score is\n  - $z \\approx 0$ is a typical score; $z \\le -2.00$ or $\\ge 2.00$ are less typical\n\n\n## $z$-scores and inferential stats\n\n![](media/spiderman-comic.jpg)\n\n\n## $z$-scores and inferential stats\n\n::: {#stopwatch-container .center-element}\n:::\n\n- <https://humanbenchmark.com/tests/reactiontime>\n  - Do 5 reaction time trials\n  - (click when the color changes)\n  - Note your reaction time in $ms$\n  - Then click play to resume lecture when you're done\n\n\n\n\n\n## Peter Parker {.small}\n\n:::: {.columns}\n::: {.column width=\"30%\"}\n![](media/spiderman-small.png){width=50% .center-element}\n\n- Peter Parker $RT = 159ms$\n  - Impressive?\n  - Depends on population characteristics\n:::\n\n::: {.column width=\"70%\" .center-element}\n\n\n::: {.cell}\n\n:::\n\n\n\n![](media/spiderman-dist.svg){.invertable}\n\n$\\begin{align} z & = \\dfrac{X - \\mu}{\\sigma} \\\\\n& = \\dfrac{159 - 284}{50} = -2.5 \\end{align}$\n\n:::\n::::\n\n\n## CBT for OCD {.small}\n\n\n::: {.cell}\n\n:::\n\n\n\n- Efficacy of CBT for OCD^[[Abramowitz et al. (2010)](http://dx.doi.org/10.1037/a0018260)]\n  - Pre-treatment population $M = 30.25; SD = 14.89$\n  - Suppose a treated individual scores $X = 15.49$\n\n:::: {.columns}\n\n::: {.column width=\"50%\"}\n![](media/cbt-dist.svg){.invertable}\n:::\n\n::: {.column width=\"50%\"}\n$\\begin{align} z & = \\dfrac{X - M}{s} \\\\\n& = \\dfrac{15.49 - 30.25}{14.89} \\\\\n& = -0.99 \\end{align}$\n:::\n\n::::\n\n\n# Learning checks\n\n\n1. For a population with $\\mu = 50$ and $\\sigma = 10$, what is the $X$ value corresponding to $z = 0.4$?\n\n2. In a sample distribution, $X = 56$ corresponds to $z = 1.00$, and $X = 47$ corresponds to $z = -0.50$. Find the mean and standard deviation for the sample.\n\n\n::: {.content-hidden}\n\n# Data and figures\n\n## Cover\n\n:::\n\n\n::: {.cell}\n\n:::\n\n```{ojs}\n\nw = 1050\nh = 500\n\nxScale = d3.scaleLinear()\n  .domain([-3, 3])\n  .range([0, w])\nyScale = d3.scaleLinear()\n  .domain([0, 0.42])\n  .range([h, 0])\nline = d3.line()\n    .x(d => xScale(d.value))\n    .y(d => yScale(d.density))\n\nchart = {\n\nconst svg = d3.select(\"#cover-container\")\n  .append(\"svg\")\n  .attr(\"width\", w).attr(\"height\", h)\n\nconst g = svg.selectAll(\"g\")\n  .data([0,1,2,3])\n  .enter()\n  .append(\"g\")\n    .append(\"path\").attr(\"id\", d => \"path\" + d)\n    .attr(\"d\", line(data))\n    \nsvg.select(\"#path0\").attr(\"class\", \"invertable\")\n  .style(\"fill\", \"none\")\n  .style(\"stroke\", \"black\")\n  .style(\"stroke-width\", 2)\n\nsvg.selectAll(\"#path1, #path2, #path3\").attr(\"class\", \"fill\")\n    .style(\"fill\", \"thistle\")\n    .style(\"fill-opacity\", 0)\n\n\nsvg.select(\"#path1\").attr(\"clip-path\", \"url(#clip1)\")\nsvg.select(\"#path2\").attr(\"clip-path\", \"url(#clip2)\")\nsvg.select(\"#path3\").attr(\"clip-path\", \"url(#clip3)\")\n\n\nvar Gen = d3.line()\n  .x(d => xScale(d.value))\n  .y(d => yScale(d.density))\n\nconst clipPaths = svg.append(\"g\")\n\nclipPaths.append(\"clipPath\").attr(\"id\", \"clip1\")\n  .append(\"path\")\n    .attr(\"d\", Gen([{value: -3, density: 0},\n                    {value: -3, density: 1},\n                    {value:  3, density: 1},\n                    {value:  3, density: 0},\n                    {value: -3, density: 0}]))\nclipPaths.append(\"clipPath\").attr(\"id\", \"clip2\")\n  .append(\"path\")\n    .attr(\"d\", Gen([{value: -2, density: 0},\n                    {value: -2, density: 1},\n                    {value: 2, density: 1},\n                    {value: 2, density: 0},\n                    {value: -2, density: 0}]))\nclipPaths.append(\"clipPath\").attr(\"id\", \"clip3\")\n  .append(\"path\")\n    .attr(\"d\", Gen([{value: -1, density: 0},\n                    {value: -1, density: 1},\n                    {value:  1, density: 1},\n                    {value:  1, density: 0},\n                    {value: -1, density: 0}]))\n                    \nsvg.selectAll(\".fill\")\n  .data([0,1,2])\n  .transition().duration(3000).delay(d => d * 1000)\n    .style(\"fill-opacity\", 0.4)\n\n\n}\n\n```\n\n\n::: {.content-hidden}\n\n::: {.cell}\n\n:::\n\n\n## z distribution\n\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n:::\n\n\n\n## IQ distributions\n\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n:::\n\n\n### Standardizing\n\n\n::: {.cell}\n\n:::\n\n\n## Generic z distribution\n\n\n::: {.cell}\n\n:::\n\n\n\n## CBT for OCD example\n\n\n::: {.cell}\n\n:::\n\n\n## Stopwatch\n\n:::\n\n\n```{ojs}\nstopwatch = {\n  const w = 200\n  const h = 215\n  \n  const svg = d3.select(\"#stopwatch-container\")\n    .append(\"svg\").attr(\"width\", w).attr(\"height\", h)\n    \n  svg.append(\"circle\")\n    .attr(\"r\", w/2)\n    .attr(\"fill\", \"lightblue\")\n    .attr(\"transform\", \"translate(100, 110)\")\n    \n  svg.append(\"circle\")\n    .attr(\"r\", 10)\n    .attr(\"fill\", \"white\")\n    .attr(\"transform\", \"translate(100, 110)\")\n    \n  svg.append(\"rect\")\n    .attr(\"rx\", 5)\n    .attr(\"ry\", 5)\n    .attr(\"width\", 30)\n    .attr(\"height\", 10)\n    .attr(\"fill\", \"lightblue\")\n    .attr(\"transform\", \"translate(85, 0)\")\n    \n  const hand = svg.append(\"line\")\n    .attr(\"y1\", 15)\n    .attr(\"y2\", -85)\n    .attr(\"stroke\", \"white\")\n    .attr(\"stroke-width\", 5)\n    .attr(\"transform\", \"translate(100, 110)\")\n    \n  function rotateHand() {\n    var i = d3.interpolate(0, 360);\n      return function(t) {\n        return \"translate(100, 110) rotate(\" + i(t) + \")\";\n      }\n  }\n  \n  function anim() {\n    hand\n    .transition().duration(5000).ease(d3.easeLinear)\n    .attrTween(\"transform\", rotateHand)\n    .on(\"end\", anim)\n  }\n  \n  anim();\n}\n```\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<script type=\"ojs-define\">\r\n{\"contents\":[{\"name\":\"data\",\"value\":[{\"value\":-3,\"density\":0.0044},{\"value\":-2.9,\"density\":0.006},{\"value\":-2.8,\"density\":0.0079},{\"value\":-2.7,\"density\":0.0104},{\"value\":-2.6,\"density\":0.0136},{\"value\":-2.5,\"density\":0.0175},{\"value\":-2.4,\"density\":0.0224},{\"value\":-2.3,\"density\":0.0283},{\"value\":-2.2,\"density\":0.0355},{\"value\":-2.1,\"density\":0.044},{\"value\":-2,\"density\":0.054},{\"value\":-1.9,\"density\":0.0656},{\"value\":-1.8,\"density\":0.079},{\"value\":-1.7,\"density\":0.094},{\"value\":-1.6,\"density\":0.1109},{\"value\":-1.5,\"density\":0.1295},{\"value\":-1.4,\"density\":0.1497},{\"value\":-1.3,\"density\":0.1714},{\"value\":-1.2,\"density\":0.1942},{\"value\":-1.1,\"density\":0.2179},{\"value\":-1,\"density\":0.242},{\"value\":-0.9,\"density\":0.2661},{\"value\":-0.8,\"density\":0.2897},{\"value\":-0.7,\"density\":0.3123},{\"value\":-0.6,\"density\":0.3332},{\"value\":-0.5,\"density\":0.3521},{\"value\":-0.4,\"density\":0.3683},{\"value\":-0.3,\"density\":0.3814},{\"value\":-0.2,\"density\":0.391},{\"value\":-0.1,\"density\":0.397},{\"value\":0,\"density\":0.3989},{\"value\":0.1,\"density\":0.397},{\"value\":0.2,\"density\":0.391},{\"value\":0.3,\"density\":0.3814},{\"value\":0.4,\"density\":0.3683},{\"value\":0.5,\"density\":0.3521},{\"value\":0.6,\"density\":0.3332},{\"value\":0.7,\"density\":0.3123},{\"value\":0.8,\"density\":0.2897},{\"value\":0.9,\"density\":0.2661},{\"value\":1,\"density\":0.242},{\"value\":1.1,\"density\":0.2179},{\"value\":1.2,\"density\":0.1942},{\"value\":1.3,\"density\":0.1714},{\"value\":1.4,\"density\":0.1497},{\"value\":1.5,\"density\":0.1295},{\"value\":1.6,\"density\":0.1109},{\"value\":1.7,\"density\":0.094},{\"value\":1.8,\"density\":0.079},{\"value\":1.9,\"density\":0.0656},{\"value\":2,\"density\":0.054},{\"value\":2.1,\"density\":0.044},{\"value\":2.2,\"density\":0.0355},{\"value\":2.3,\"density\":0.0283},{\"value\":2.4,\"density\":0.0224},{\"value\":2.5,\"density\":0.0175},{\"value\":2.6,\"density\":0.0136},{\"value\":2.7,\"density\":0.0104},{\"value\":2.8,\"density\":0.0079},{\"value\":2.9,\"density\":0.006},{\"value\":3,\"density\":0.0044}]}]}\r\n</script>\r\n"
      ],
      "include-after-body": [
        "\r\n<script>\r\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\r\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\r\n  // slide changes (different for each slide format).\r\n  (function () {\r\n    // dispatch for htmlwidgets\r\n    function fireSlideEnter() {\r\n      const event = window.document.createEvent(\"Event\");\r\n      event.initEvent(\"slideenter\", true, true);\r\n      window.document.dispatchEvent(event);\r\n    }\r\n\r\n    function fireSlideChanged(previousSlide, currentSlide) {\r\n      fireSlideEnter();\r\n\r\n      // dispatch for shiny\r\n      if (window.jQuery) {\r\n        if (previousSlide) {\r\n          window.jQuery(previousSlide).trigger(\"hidden\");\r\n        }\r\n        if (currentSlide) {\r\n          window.jQuery(currentSlide).trigger(\"shown\");\r\n        }\r\n      }\r\n    }\r\n\r\n    // hookup for slidy\r\n    if (window.w3c_slidy) {\r\n      window.w3c_slidy.add_observer(function (slide_num) {\r\n        // slide_num starts at position 1\r\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\r\n      });\r\n    }\r\n\r\n  })();\r\n</script>\r\n\r\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}