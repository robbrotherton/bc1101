{
  "hash": "4ea952023991edaf2cc83befab474405",
  "result": {
    "markdown": "---\nformat: revealjs\n---\n\n\n# 12|THE $t$-TEST [part 2]{style=\"color: #777; float: right;\"}\n\n![](covers/12_the-t-test-pt-2.svg){.invertable-blue}\n\n\n# Overview\n\n- [Research designs]\n- [Assumptions]\n- [Effect size]\n- [Confidence intervals]\n- [Learning checks]\n\n\n\n# Research designs\n\n- Single-sample $t$-test\n  - Compare sample against expected population mean based on logic/theory/scale design\n\n:::: {.columns}\n\n::: {.column width=\"50%\"}\n- E.g. 'common sense' theory\n  - Population average amount of sleep\n:::\n\n::: {.column width=\"50%\" .center-element}\n$\\mu = 8$ hours\n  \n![](media/theoretical-distribution.svg){.invertable}\n:::\n\n::::\n\n\n## Research designs\n\n- E.g. measure of happiness\n\n:::: {.columns}\n\n::: {.column width=\"60%\"}\n\n\n::: {.cell}\n::: {.cell-output-display}\n```{=html}\n<div style=\"border: 1px solid; border-radius: 5px; padding: 1em; width: 85%; font-size: 0.75em\">\n<p style=\"font-weight: bold;\">What is your current level of happiness?</p>\n  <label>\n    <input class=\"form-check-input\" type=\"radio\" name=\"likert\" style=\"margin-left: 1em;\" >\n    1. A lot less than usual\n  </label><br>  <label>\n    <input class=\"form-check-input\" type=\"radio\" name=\"likert\" style=\"margin-left: 1em;\" >\n    2. A little less than usual\n  </label><br>  <label>\n    <input class=\"form-check-input\" type=\"radio\" name=\"likert\" style=\"margin-left: 1em;\" checked>\n    3. About average\n  </label><br>  <label>\n    <input class=\"form-check-input\" type=\"radio\" name=\"likert\" style=\"margin-left: 1em;\" >\n    4. A little more than usual\n  </label><br>  <label>\n    <input class=\"form-check-input\" type=\"radio\" name=\"likert\" style=\"margin-left: 1em;\" >\n    5. A lot more than usual\n  </label><br>\n</div>\n```\n:::\n:::\n\n\n:::\n\n::: {.column width=\"40%\" .center-element}\n\n$\\mu = 3$\n\n![](media/theoretical-distribution.svg){.invertable style=\"margin-top: 0;\"}\n:::\n\n::::\n\n\n\n# Assumptions {.smaller}\n\n- Assumptions for [single-sample $t$-tests]{.emph}\n  1. Independence\n      - Independent random sampling\n      - Values in the sample are independent observations\n  2. Normality\n      - The population sampled is normally distributed\n      - With large samples $(n > 30)$, this assumption can be violated without affecting the validity of the hypothesis test\n  3. Homogeneity of variance\n      - Variability in the original and treated populations is the same\n\n\n# Effect size {.small}\n\n\n::: {.cell}\n\n:::\n\n\n\n- Hypothesis test Step 4: Make decision (reject null?)\n- Step 4b: Evaluate effect size\n  - Cohen’s $d$ for single-sample $t$-test\n  - Original equation included population SD, $\\sigma$\n  - Estimated Cohen’s $d$ uses sample SD, $s$\n\n::: {.c .smaller}\n$\\text{Estimated } d = \\dfrac{\\text{mean difference}}{\\text{sample standard deviation}} = \\dfrac{M - \\mu}{s}$\n\n$\\text{For class RT data, } d = \\dfrac{322.59 - 284}{45.31} = 0.85$\n:::\n\n\n## Effect size: $r^2$\n\n- Proportion of all variability in the data attributable to treatment effect\n- Simplifying assumption: Treatment adds or subtracts a constant to each score\n- E.g. 1 point on a scale of 1 to 5\n- $r^2$ separates that [variability due to treatment]{.emph} from [natural variability]{.emph} between scores\n\n::: {.c}\n$r^2 = \\dfrac{SS_{treatment}}{SS_{total}}$\n:::\n\n\n## $r^2$ {.smallest}\n\n\n:::: {.columns}\n\n::: {.column width=\"50%\"}\n1. Calculate sum of squared deviations from sample $M$\n    - Variability [excluding]{.emph} treatment effect\n    - $SS_{without \\ treatment}$\n2. Calculate $SS$ from $H_0$ $\\mu$\n    - This is [total]{.emph} variability\n    - $SS_{total}$\n3. Substract $SS_{without \\ treatment}$ from $SS_{total}$ to find $SS_{treatment}$\n    - [Variability attributable to treatment effect]{.emph}\n:::\n\n::: {.column width=\"50%\"}\n![](media/r-squared-diagram-1.svg){.invertable}\n\n![](media/r-squared-diagram-2.svg){.invertable}\n:::\n\n::::\n\n::: {style=\"margin-top: -1em;\"}\n$$\\begin{align}\nr^2 = \\dfrac{SS_{treatment}}{SS_{total}} &= \\dfrac{SS_{total} - SS_{without \\ treatment}}{SS_{total}} \\\\\n&= \\dfrac{10-6}{10} = 0.4\n\\end{align}$$\n:::\n\n\n## $r^2$ {.small}\n\n- If we already calculated $t$…\n\n::: {.c}\n$r^2 = \\dfrac{t^2}{t^2 + df}$\n:::\n\n- Works for any kind of $t$-test\n  - Single / related / independent-samples\n\n\n- Interpreting $r^2$\n  - $r^2 = 0.01$:   small effect\n  - $r^2 = 0.09$:   medium effect\n  - $r^2 = 0.25$:   large effect\n  \n\n# Reporting results\n\n> Given the average reaction time for the population of $\\mu = 284 ms$, according to humanbenchmark.com, a two-tailed single-sample $t$-test suggests that BC1101 students have significantly different reaction times $(M = 322.59$; $SD = 45.31)$ than the general population; $t(22) =$ $4.08$, $p < .05$, $d = 0.85$.\n\n\n# Confidence intervals {.smallest}\n\n- Complementary to significance & effect size\n- Quantifies [precision]{.emph} of sample estimate\n- Comprised of: \n  - [The point estimate]{.emph} \n      - Our best guess of the population parameter \n  - [Margin of error]{.emph} \n      - A range either side of point estimate\n      - Indicates the amount of uncertainty surrounding estimate of population mean \n      - Based on desired 'confidence', i.e. range of the distribution\n      - E.g. 95%, 99%, 80%, etc...\n\n## Calculating CI boundaries\n\n:::: {.columns}\n\n::: {.column width=\"50%\"}\n- So far, we have been specifying $\\mu$, calculating $M$ and $s_M$, solving for $t$\n- For CI, rearrange to solve for $\\mu$\n  - Calculate $M$ and $s_M$, specify $t$ (based on desired width of CI —99%, 95%, 90%, 80% etc), solve for $\\mu$\n:::\n\n::: {.column width=\"50%\"}\n::: {.c}\n$t = \\dfrac{M - \\mu}{s_M}$\n\n$\\mu = M \\pm t * s_M$\n:::\n:::\n\n::::\n\n\n\n\n## Confidence interval interpretation {.small}\n\n- What does a confidence interval tell us?\n  - Indicates precision of parameter estimate\n  - “This sample came from a population which would produce sample means which fall within this range 95% of the time”\n  - NOT “we are 95% sure the true population mean is within this range”\n\n> \"The parameter is an unknown constant and no probability statement concerning its value may be made.\"[^1]\n\n[^1]: Jerzy Neyman, original developer of confidence intervals\n\n## Factors that affect CI width\n\n\n::: {#params style=\"position: absolute; width: 50%; font-size: 0.8em;\"}\n\n::: {.cell}\n::: {.cell-output-display}\n```{=html}\n\n<label for=\"input-mu\" class = \"text-input-label\" style=\"\">Point estimate: \n<input type=\"text\" id=\"input-mu\" class=\"text-input-box math\" name=\"mu\" value=\"0\" style=\"width: 3em;\">\n</label>\n```\n:::\n\n::: {.cell-output-display}\n```{=html}\n\n<label for=\"input-sigma\" class = \"text-input-label\" style=\"\">Variability: \n<input type=\"text\" id=\"input-sigma\" class=\"text-input-box math\" name=\"sigma\" value=\"1\" style=\"width: 3em;\">\n</label>\n```\n:::\n\n::: {.cell-output-display}\n```{=html}\n<label for=\"input-n\" style=\"font-family: KaTeX_Main; font-size: 1em; font-style: italic; height: 1em;\">n = </label>\n<span id=\"value-n\" class=\"math\" style=\"display: inline-block; width: 1em;\">30</span>\n<input data-prevent-swipe type=\"range\" id=\"input-n\" name=\"scale\" value=\"30\" min=\"2\" max=\"100\" step=\"1\" style=\"border: none; height: 1em; font-family: KaTeX_Main; font-size: 1em; margin-left: 0.5em; width: 50%; vertical-align: unset;\">\n\n```\n:::\n\n::: {.cell-output-display}\n```{=html}\n<label for=\"input-ci\" style=\"font-family: KaTeX_Main; font-size: 1em; font-style: italic; height: 1em;\">CI: </label>\n<span id=\"value-ci\" class=\"math\" style=\"display: inline-block; width: 1em;\">95</span>\n<input data-prevent-swipe type=\"range\" id=\"input-ci\" name=\"scale\" value=\"95\" min=\"0\" max=\"100\" step=\"1\" style=\"border: none; height: 1em; font-family: KaTeX_Main; font-size: 1em; margin-left: 0.5em; width: 50%; vertical-align: unset;\">\n\n```\n:::\n:::\n\n\n:::\n\n\n::: {#ci-container}\n:::\n\n\n## CI & NHST {.small}\n\n- $p$ value and CI always agree about statistical significance if CI is $1 – alpha$\n  - E.g. $\\alpha = .05$ and 95% confidence interval\n- If the $p < \\alpha$, the confidence interval will not contain the null hypothesis value\n- If the confidence interval does not contain the null hypothesis value, the results are statistically significant\n- Both significance level and confidence level define a distance from a mean to a limit\n  - The distances in both cases are exactly the same\n\n## CI & NHST\n\n::: {#params style=\"position: absolute; width: 50%; font-size: 0.8em;\"}\n\n::: {.cell}\n::: {.cell-output-display}\n```{=html}\n<label for=\"input-nhst-n\" style=\"font-family: KaTeX_Main; font-size: 1em; font-style: italic; height: 1em;\">n = </label>\n<span id=\"value-nhst-n\" class=\"math\" style=\"display: inline-block; width: 1em;\">15</span>\n<input data-prevent-swipe type=\"range\" id=\"input-nhst-n\" name=\"scale\" value=\"15\" min=\"10\" max=\"25\" step=\"1\" style=\"border: none; height: 1em; font-family: KaTeX_Main; font-size: 1em; margin-left: 0.5em; width: 50%; vertical-align: unset;\">\n\n```\n:::\n\n::: {.cell-output-display}\n```{=html}\n<label for=\"input-cohens-d\" style=\"font-family: KaTeX_Main; font-size: 1em; font-style: italic; height: 1em;\">d = </label>\n<span id=\"value-cohens-d\" class=\"math\" style=\"display: inline-block; width: 1em;\">0.7</span>\n<input data-prevent-swipe type=\"range\" id=\"input-cohens-d\" name=\"scale\" value=\"0.7\" min=\"0\" max=\"1\" step=\"0.01\" style=\"border: none; height: 1em; font-family: KaTeX_Main; font-size: 1em; margin-left: 0.5em; width: 50%; vertical-align: unset;\">\n\n```\n:::\n:::\n\n\n::: {#viz-controls}\nShow: \n<label for=\"h0\"><input id=\"h0\" type=\"radio\" name=\"controls\">$H_0$</label>\n<label for=\"h1\"><input id=\"h1\" type=\"radio\" name=\"controls\">$H_1$</label>\n<label for=\"both\"><input id=\"both\" type=\"radio\" name=\"controls\" checked>Both</label>\n:::\n\n:::\n\n::: {#ci-nhst-container}\n:::\n\n::: {#p-value-container .center-element}\n<span class=\"math italic\">p </span><span id=\"p-value\" class=\"math\"></span>\n:::\n\n\n# Learning checks\n\n1. What value of $t$ would you expect to see if the null hypothesis is true?\n2. Which combination of factors is most likely to produce a significant value for the $t$ statistic?\n    - Small mean difference and large sample variability\n    - Small mean difference and small sample variability\n    - Large mean difference and large sample variability\n    - Large mean difference and small sample variability\n\n\n::: {.content-hidden}\n\n# Data and figures\n\n## Cover\n\n\n::: {.cell}\n\n:::\n\n\n\n## Sleep\n\n\n::: {.cell}\n\n:::\n\n\n\n## r^2 diagrams\n\n\n::: {.cell}\n\n:::\n\n\n## OJS confidence\n\n:::\n\n\n```{ojs}\n\njStat = require(\"../js/jstat.js\")\n\nci = {\n\n  const w = 1050, h = 600;\n  const margin = {bottom: 30};\n  const f = d3.format(\".2f\");\n  var mean, sd, confidence, n, std_err, xlim, ci_x_lim;\n  \n  const x = d3.scaleLinear()\n    .range([0, w])\n  const xRaw = d3.scaleLinear()\n    .domain([-1, 1])\n    .range([0, w])\n  const y = d3.scaleLinear()\n    .domain([0, 0.43])\n    .range([h - margin.bottom, 0])\n  const line = d3.line()\n    .x(d => x(d.value))\n    .y(d => y(d.density));\n  const xAxis = d3.axisBottom(x);\n  const xAxisRaw = d3.axisBottom(xRaw).tickSize(10);\n  \n  function makeCurve(xlim) {\n    var arr = [];\n    var x = jStat(-xlim, xlim, 210)[0];\n    for (var i = 0; i < x.length; i++) {\n      arr.push({value: x[i], density: jStat.studentt.pdf(x[i], n - 1)})\n    }\n    return arr\n  }\n  \n  const svg = d3.select(\"#ci-container\").append(\"svg\")\n    .attr(\"width\", w).attr(\"height\", h)\n    \n  const axis = svg.append(\"g\")\n    .attr(\"transform\", `translate(0, ${y(0)})`)\n    .style(\"color\", \"steelblue\")\n    .call(xAxis);\n    \n  const axisRaw = svg.append(\"g\")\n    .attr(\"transform\", `translate(0, ${y(0)})`)\n    .call(xAxisRaw);\n    \n  const defs = svg.append(\"defs\")\n  const mask = defs.append(\"mask\").attr(\"id\", \"mask\")\n  const mask_rect = mask.append(\"rect\")\n  .attr(\"height\", h)\n  .style(\"fill\", \"white\")\n  \n  const ci_fill = svg.append(\"path\")\n    .attr(\"mask\", \"url(#mask)\")\n    .style(\"stroke\", \"none\").style(\"fill\", \"lightblue\")\n  \n  const ci_curve = svg.append(\"path\")\n    .attr(\"class\", \"invertable\")\n    .style(\"stroke\", \"black\")\n    .style(\"fill\", \"none\")\n    .style(\"stroke-width\", 4)\n  \n  const ci_line = svg.append(\"line\")\n    .style(\"stroke\", \"black\").style(\"stroke-dasharray\", [5,5])\n  \n  const ci_point_estimate = svg.append(\"line\")\n    .style(\"stroke\", \"black\").style(\"stroke-dasharray\", [5,5])\n    \n  const ci_limit_labels = svg.append(\"g\")\n  const ci_limit_lower = ci_limit_labels.append(\"text\")\n  const ci_limit_upper = ci_limit_labels.append(\"text\").style(\"text-anchor\", \"end\")\n  \n  const inputCI =  d3.select(\"#input-ci\")\n  const inputN =  d3.select(\"#input-n\")\n  const inputMu =  d3.select(\"#input-mu\")\n  const inputSigma =  d3.select(\"#input-sigma\")\n  \n  function initialize() {\n    mean = Number(inputMu.property(\"value\"));\n    sd = inputSigma.property(\"value\");\n    confidence = inputCI.property(\"value\");\n    n = inputN.property(\"value\");\n    std_err = sd / Math.sqrt(n);\n    updateCI();\n  }\n  \n  inputMu.on(\"input\", function() {\n    mean = Number(this.value);\n    updateCI();\n  })\n  \n  inputSigma.on(\"input\", function() {\n    sd = Number(this.value);\n    std_err = sd / Math.sqrt(n);\n    updateCI();\n  })\n  \n  inputCI.on(\"input\", function() {\n    confidence = Number(this.value);\n    d3.select(\"#value-ci\").text(confidence);\n    \n    updateCI();\n  })\n  \n  inputN.on(\"input\", function() {\n    n = Number(this.value);\n    d3.select(\"#value-n\").text(n);\n    std_err = sd / Math.sqrt(n);\n\n    updateCI();\n  })\n\n  function updateCI() {\n    xlim = sd / std_err;\n    x.domain([-xlim, xlim]);\n    axis.call(xAxis);\n    xRaw.domain([mean - sd, mean + sd]);\n    axisRaw.call(xAxisRaw);\n    \n    ci_x_lim = jStat.studentt.inv((1 - (confidence/100)) / 2, n - 1);\n    var line_height = jStat.studentt.pdf(ci_x_lim, n-1) / 2;\n    \n    var ci_lims = [mean + ci_x_lim * std_err, mean - ci_x_lim * std_err];\n    \n    ci_limit_lower\n      .text(f(ci_lims[0]))\n      .attr(\"x\", x(ci_x_lim))\n      .attr(\"y\", y(line_height))\n    ci_limit_upper\n      .text(f(ci_lims[1]))\n      .attr(\"x\", x(-ci_x_lim))\n      .attr(\"y\", y(line_height))\n    \n    ci_fill.attr(\"d\", line(makeCurve(15)))\n    ci_curve.attr(\"d\", line(makeCurve(xlim)))\n    \n    mask_rect\n      .attr(\"x\", x(ci_x_lim))\n      .attr(\"width\", x(-ci_x_lim) - x(ci_x_lim));\n    \n    ci_line\n      .attr(\"transform\", `translate(0, ${y(line_height)})`)\n      .attr(\"x1\", x(-ci_x_lim)).attr(\"x2\", x(ci_x_lim))\n    ci_point_estimate\n      .attr(\"transform\", `translate(${x(0)}, 0)`)\n      .attr(\"y1\", y(jStat.studentt.pdf(0, n - 1))).attr(\"y2\", y(0))\n  }\n  \n  initialize();\n}\n\n```\n\n\n::: {.content-hidden}\n\n## CI & NHST OJS\n\n:::\n\n## blah\n\n\n```{ojs}\n\nci_nhst = {\n\n  const w = 1050, h = 500;\n  const margin = {bottom: 5};\n  const xlim = [-1, 1.5];\n  const sigma = 1;\n  const confidence = 95;\n  var cohensD, n, std_err, ci_x_lim;\n  \n  const x = d3.scaleLinear()\n    .domain(xlim)\n    .range([0, w])\n  const y = d3.scaleLinear()\n    .domain([0, 2])\n    .range([h - margin.bottom, 0])\n  const line = d3.line()\n    .x(d => x(d.value))\n    .y(d => y(d.density));\n  const xAxis = d3.axisBottom(x);\n  \n  function makeCurve(mu, std_err) {\n    var arr = [];\n    var x = jStat(xlim[0], xlim[1], 210)[0];\n    for (var i = 0; i < x.length; i++) {\n      arr.push({value: x[i], density: jStat.normal.pdf(x[i], mu, std_err)})\n    }\n    return arr\n  }\n  function makeFill(mu, std_err) {\n    var arr = [];\n    var x = jStat(-5, 5, 310)[0];\n    for (var i = 0; i < x.length; i++) {\n      arr.push({value: x[i], density: jStat.normal.pdf(x[i], mu, std_err)})\n    }\n    return arr\n  }\n  \n  const svg = d3.select(\"#ci-nhst-container\").append(\"svg\")\n    .attr(\"width\", w).attr(\"height\", h)\n    \n  <!-- const axis = svg.append(\"g\").attr(\"transform\", `translate(0, ${y(0)})`).call(xAxis); -->\n  \n  const ci_dist = svg.append(\"g\")\n  const null_dist = svg.append(\"g\")\n  \n\n  const defs = svg.append(\"defs\")\n  const mask = defs.append(\"mask\").attr(\"id\", \"nhst-mask\")\n  const mask_rect = mask.append(\"rect\")\n  .attr(\"height\", h)\n  .style(\"fill\", \"white\")\n  const null_mask = defs.append(\"mask\").attr(\"id\", \"null-mask\")\n  null_mask.append(\"rect\").attr(\"width\", w).attr(\"height\", h).style(\"fill\", \"white\")\n  const null_rect = null_mask.append(\"rect\")\n    .attr(\"height\", h)\n    .style(\"fill\", \"black\")\n  \n  const null_fill = null_dist.append(\"path\")\n    .attr(\"mask\", \"url(#null-mask)\")\n    .style(\"stroke\", \"none\")\n    .style(\"fill\", \"red\")\n    .style(\"opacity\", 0.7)\n  const null_curve = null_dist.append(\"path\")\n    .attr(\"class\", \"invertable\")\n    .style(\"stroke\", \"red\")\n    .style(\"fill\", \"none\")\n    .style(\"stroke-width\", 4)\n    .style(\"stroke-dasharray\", [10, 10])\n  const null_mu = null_dist.append(\"line\")\n    .attr(\"transform\", `translate(${x(0)}, 0)`)\n    .attr(\"y1\", y(0))\n    .style(\"stroke\", \"red\").style(\"stroke-dasharray\", [5,5])\n  const null_margin = null_dist.append(\"line\")\n    .style(\"stroke\", \"red\").style(\"stroke-dasharray\", [5,5])\n  \n  const ci_fill = ci_dist.append(\"path\")\n    .attr(\"mask\", \"url(#nhst-mask)\")\n    .style(\"stroke\", \"none\").style(\"fill\", \"lightblue\")\n  \n  const ci_curve = ci_dist.append(\"path\")\n    .attr(\"class\", \"invertable\")\n    .style(\"stroke\", \"black\")\n    .style(\"fill\", \"none\")\n    .style(\"stroke-width\", 4)\n  \n  const ci_line = ci_dist.append(\"line\")\n    .style(\"stroke\", \"black\").style(\"stroke-dasharray\", [5,5])\n  const ci_point_estimate = ci_dist.append(\"line\")\n    .style(\"stroke\", \"black\").style(\"stroke-dasharray\", [5,5])\n    \n  const p_value = svg.append(\"text\")\n    .attr(\"transform\", `translate(${w * 0.75}, ${h * 0.25})`)\n    .style(\"color\", \"var(--text-color)\")\n    .attr(\"class\", \"math\")\n\n  const inputCohensD =  d3.select(\"#input-cohens-d\")\n  const inputN =  d3.select(\"#input-nhst-n\")\n  \n  function initialize() {\n    cohensD = Number(inputCohensD.property(\"value\"));\n    n = Number(inputN.property(\"value\"));\n    std_err = sigma / Math.sqrt(n);\n    updateCI();\n  }\n  \n\n  inputCohensD.on(\"input\", function() {\n    initialize();\n    d3.select(\"#value-cohens-d\").text(cohensD);\n  })\n  inputN.on(\"input\", function() {\n    initialize();\n    d3.select(\"#value-nhst-n\").text(n);\n  })\n\n  function updateCI() {\n    null_fill.attr(\"d\", line(makeFill(0, std_err)));\n    null_curve.attr(\"d\", line(makeCurve(0, std_err)));\n    null_rect\n      .attr(\"x\", x(jStat.normal.inv(0.025, 0, std_err)))\n      .attr(\"width\", x(jStat.normal.inv(0.975, 0, std_err)) -\n                     x(jStat.normal.inv(0.025, 0, std_err)))\n    null_mu.attr(\"y2\", y(jStat.normal.pdf(0, 0, std_err)))\n    null_margin\n      .attr(\"transform\", `translate(0, ${y(jStat.normal.pdf(jStat.normal.inv(0.025, 0, std_err), 0, std_err))})`)\n      .attr(\"x1\", x(jStat.normal.inv(0.025, 0, std_err)))\n      .attr(\"x2\", x(jStat.normal.inv(0.975, 0, std_err)))\n                     \n    var ci_lim_lower = jStat.normal.inv(0.025, cohensD, std_err);\n    var ci_lim_upper = jStat.normal.inv(0.975, cohensD, std_err);\n    var ci_lims = [ci_lim_lower, ci_lim_upper];\n    \n    var line_height = jStat.normal.pdf(ci_lims[0], cohensD, std_err) / 2;\n\n    ci_fill.attr(\"d\", line(makeFill(cohensD, std_err)))\n    ci_curve.attr(\"d\", line(makeCurve(cohensD, std_err)))\n    mask_rect\n      .attr(\"x\", x(ci_lims[0]))\n      .attr(\"width\", x(ci_lims[1]) - x(ci_lims[0]));\n\n    ci_line\n      .attr(\"transform\", `translate(0, ${y(line_height)})`)\n      .attr(\"x1\", x(ci_lims[0])).attr(\"x2\", x(ci_lims[1]));\n    ci_point_estimate\n      .attr(\"transform\", `translate(${x(cohensD)}, 0)`)\n      .attr(\"y1\", y(jStat.normal.pdf(cohensD, cohensD, std_err))).attr(\"y2\", y(0))\n      \n      \n    var significant = ci_lims[0] > 0;\n    var p_value = d3.select(\"#p-value\");\n    if (significant) {\n      ci_fill.style(\"filter\", \"grayscale(0)\");\n      p_value.text(\"< .05 🥳\");\n    } else {\n      ci_fill.style(\"filter\", \"grayscale(1)\");\n      p_value.text(\"> .05\");\n    }\n  }\n  \n  d3.select(\"#h0\").on(\"input\", showSelected);\n  d3.select(\"#h1\").on(\"input\", showSelected);\n  d3.select(\"#both\").on(\"input\", showSelected);\n  \n  function showSelected() {\n    var h0 = d3.select(\"#h0\").property(\"checked\");\n    var h1 = d3.select(\"#h1\").property(\"checked\");\n    var both = d3.select(\"#both\").property(\"checked\");\n    var selected = [false, false];\n    if (h0 || both) { selected[0] = true; }\n    if (h1 || both) { selected[1] = true; }\n    null_dist.classed(\"hide-element\", !selected[0]);\n    ci_dist.classed(\"hide-element\", !selected[1]);\n    d3.select(\"#p-value-container\").classed(\"hide-element\", !both)\n  }\n  \n  initialize();\n}\n\n```\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\r\n<script>\r\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\r\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\r\n  // slide changes (different for each slide format).\r\n  (function () {\r\n    function fireSlideChanged(previousSlide, currentSlide) {\r\n\r\n      // dispatch for htmlwidgets\r\n      const event = window.document.createEvent(\"Event\");\r\n      event.initEvent(\"slideenter\", true, true);\r\n      window.document.dispatchEvent(event);\r\n\r\n      // dispatch for shiny\r\n      if (window.jQuery) {\r\n        if (previousSlide) {\r\n          window.jQuery(previousSlide).trigger(\"hidden\");\r\n        }\r\n        if (currentSlide) {\r\n          window.jQuery(currentSlide).trigger(\"shown\");\r\n        }\r\n      }\r\n    }\r\n\r\n    // hookup for reveal\r\n    if (window.Reveal) {\r\n      window.Reveal.addEventListener(\"slidechanged\", function(event) {\r\n        fireSlideChanged(event.previousSlide, event.currentSlide);\r\n      });\r\n    }\r\n\r\n    // hookup for slidy\r\n    if (window.w3c_slidy) {\r\n      window.w3c_slidy.add_observer(function (slide_num) {\r\n        // slide_num starts at position 1\r\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\r\n      });\r\n    }\r\n\r\n  })();\r\n</script>\r\n\r\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}