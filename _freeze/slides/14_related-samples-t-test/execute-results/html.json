{
  "hash": "2d497492c4d1ab0e1826d133903a5a99",
  "result": {
    "markdown": "---\nformat: revealjs\n---\n\n\n# 14|RELATED-SAMPLES $t$-TEST\n\n![](covers/11_the-t-test.svg)\n\n\n# Overview\n\n- [Research design]\n- Pros & cons \n- Calculating related-samples $t$-statistic\n- Comparing independent-samples and related-samples $t$ statistics\n- [Learning checks]\n\n# Research design\n\n## Independent-samples\n\n:::: {.columns}\n\n::: {.column width=\"50%\"}\n- \"Between-participants\" design\n- Two treated samples containing different people\n- Individual differences contribute to variability\n:::\n\n::: {.column width=\"50%\"}\n\n::: {#independent-samples-container}\n:::\n\n:::\n\n::::\n\n\n\n## Related-samples\n\n:::: {.columns}\n\n::: {.column width=\"50%\"}\n- Repeated-measures\n  - \"Within-participants\" design\n  - Two treatment conditions, but same individuals in both \n  - Record two scores per individual (one per condition)\n  - Individual differences cannot contribute to difference between groups  \n:::\n\n::: {.column width=\"50%\"}\nRight column\n:::\n\n::::\n\n\n## Related-samples\n\n:::: {.columns}\n\n::: {.column width=\"50%\"}\n- Matched-subjects\n  - Two samples of different people; each individual in sample A is “matched” on relevant variables with an individual in sample B\n  - Uses same statistical procedures as repeated-measures\n  - But requires twice as many participants as within-p's design\n:::\n\n::: {.column width=\"50%\"}\nRight column\n:::\n\n::::\n\n# Learning checks\n\n\n::: {.content-hidden}\n\n# Data and figures\n\n## Cover\n\n## Independent vs related samples figures\n\n\n::: {.cell}\n\n:::\n\n\n## OJS\n\n:::\n\n\n```{ojs}\nimport {makeRandomGenerator} from \"@forresto/random-seed\"\n\nrand = makeRandomGenerator(\"seed\")\n\nindependentSamplesFigure = {\n  \n  const w = 500\n  const h = 550\n  const r = 20\n  \n  const fill = d3.scaleOrdinal(d3.schemeSet3)\n  \n  function makeSample() {\n    var arr = [];\n    for (var i = 0; i < 10; i++) {\n      arr.push({id: i, color: Math.floor(Math.random()*10)})\n    }\n    return arr;\n  }\n  \n  const svg = d3.select(\"#independent-samples-container\")\n    .append(\"svg\")\n    .attr(\"viewBox\", \"0 0 \" + w + \" \" + h)\n    .attr(\"preserveAspectRatio\", \"xMinYMin meet\")\n\n  const labels = svg.append(\"g\")\n    .style(\"font-size\", \"0.7em\")\n    .style(\"font-weight\", \"bold\")\n    .attr(\"class\", \"invertable\")\n    \n  labels.selectAll(\"text\")\n    .data([\"A\",\"B\"]).enter().append(\"text\")\n    .attr(\"x\", (d,i) => w/4 + i * w/2).attr(\"y\", 20)\n    .text(d => \"SAMPLE \" + d).attr(\"text-anchor\", \"middle\")\n\n  const sampleDots = svg.append(\"g\")\n  \n  const a = svg.append(\"g\")\n  a.selectAll(\"circle\")\n    .data(makeSample()).enter().append(\"circle\")\n      .attr(\"cx\", w/4)\n      .attr(\"cy\", d => 60 + d.id*r*2.5)\n      .attr(\"r\", r)\n      .style(\"fill\", d => fill(d.color))\n      .style(\"stroke\", \"black\").style(\"stroke-weight\", 1)\n      \n  const b = svg.append(\"g\")\n  b.selectAll(\"circle\")\n    .data(makeSample()).enter().append(\"circle\")\n      .attr(\"cx\", w - w/4)\n      .attr(\"cy\", d => 60 + d.id*r*2.5)\n      .attr(\"r\", r)\n      .style(\"fill\", d => fill(d.color))\n      .style(\"stroke\", \"black\")\n      \n}\n\n```\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\r\n<script>\r\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\r\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\r\n  // slide changes (different for each slide format).\r\n  (function () {\r\n    function fireSlideChanged(previousSlide, currentSlide) {\r\n\r\n      // dispatch for htmlwidgets\r\n      const event = window.document.createEvent(\"Event\");\r\n      event.initEvent(\"slideenter\", true, true);\r\n      window.document.dispatchEvent(event);\r\n\r\n      // dispatch for shiny\r\n      if (window.jQuery) {\r\n        if (previousSlide) {\r\n          window.jQuery(previousSlide).trigger(\"hidden\");\r\n        }\r\n        if (currentSlide) {\r\n          window.jQuery(currentSlide).trigger(\"shown\");\r\n        }\r\n      }\r\n    }\r\n\r\n    // hookup for reveal\r\n    if (window.Reveal) {\r\n      window.Reveal.addEventListener(\"slidechanged\", function(event) {\r\n        fireSlideChanged(event.previousSlide, event.currentSlide);\r\n      });\r\n    }\r\n\r\n    // hookup for slidy\r\n    if (window.w3c_slidy) {\r\n      window.w3c_slidy.add_observer(function (slide_num) {\r\n        // slide_num starts at position 1\r\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\r\n      });\r\n    }\r\n\r\n  })();\r\n</script>\r\n\r\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}