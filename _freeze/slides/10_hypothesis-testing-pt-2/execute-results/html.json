{
  "hash": "da01599baf5cc64d0a4ab3e932c7bc85",
  "result": {
    "markdown": "---\nformat: \n  revealjs:\n    chalkboard: true\n    html-math-method:\n      method: mathjax\n      url: \"https://cdn.jsdelivr.net/npm/mathjax@4.0.0-beta.4/tex-mml-chtml.js\"\n---\n\n\n# 10|HYPOTHESIS TESTING\n\n[part 2]{.subhead}\n\n![](covers/10_hypothesis-testing-pt-2.svg){.invertable}\n\n\n# Overview\n\n- [Inferential errors]\n- [Effect size]\n- [Statistical power]\n- [Learning checks]\n\n\n\n# Inferential errors\n\n- Hypothesis testing is an [inferential]{.emph} process\n- Incorrect inferences are possible\n\n\n<table id=\"inf-tab\">\n  <thead>\n     <tr><th colspan=2 style=\"border-bottom: none;\"></th><th colspan=2 style=\"text-align: center;\">Actual situation</th></tr>\n     <tr><th colspan=2></th><th style=\"text-align: center;\">$H_0$ true</th><th style=\"text-align: center;\">$H_0$ false</th></tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td rowspan=2 style=\"writing-mode: vertical-rl; transform: rotate(180deg); text-align: center; font-weight: bold;\">Researcher's<br>Decision</td>\n      <td style=\"text-align: right; font-weight: bold;\" >Reject $H_0$</td>\n      <td style=\"text-align: center; color: red; border-color: var(--text-color);\">Type 1 error<br>$\\alpha$</td>\n      <td style=\"text-align: center; color: green; border-color: var(--text-color);\">Correct</td>\n    </tr>\n    <tr>\n      <td style=\"text-align: right; font-weight: bold;\" >Fail to reject $H_0$</td>\n      <td style=\"text-align: center; color: green; border-color: var(--text-color);\">Correct</td>\n      <td style=\"text-align: center; color: red; border-color: var(--text-color);\">Type 2 error<br>$\\beta$</td>  \n    </tr>\n  </tbody>\n</table>\n\n\n## Type 1 error\n\n- If $H_0$ is true...\n\n![](media/type-1-error-distribution.svg){.invertable}\n\n\n::: {.cell}\n\n:::\n\n\n\n## Inferential errors\n\n:::: {.columns}\n\n::: {.column width=\"50%\"}\n- Boy who cried wolf\n  - Villagers make Type 1 error (false positive) \n  - Type 2 error (false negative) \n  - In that order\n:::\n\n::: {.column width=\"50%\"}\n![](media/wolf.jpg)\n:::\n\n::::\n\n\n\n\n\n# Effect size {.small}\n\n:::: {.columns}\n\n::: {.column width=\"60%\"}\n- [Significant]{.emph} effects are not always [substantial]{.emph}\n  - As sample size increases, standard error of the mean decreases\n  - Tiny treatment effect might come out as “statistically significant”\n- Need to consider [effect size]{.emph}\n  - How big is the treatment effect?\n  - Quantifies the absolute magnitude of a treatment effect, independent of sample size\n:::\n\n::: {.column width=\"40%\"}\n\n\n![](media/effect-size-1.svg){.invertable}\n\n![](media/effect-size-2.svg){.invertable}\n\n![](media/effect-size-3.svg){.invertable}\n\n:::\n\n::::\n\n\n## Quantifying effect size {.small}\n\n- One measure: [Cohen’s $d$]{.emph}\n  - Quantifies the absolute magnitude of a treatment effect, independent of sample size\n  - Measures effect size in terms of standard deviation\n  - $d = 1.00$: treatment changed $\\mu$ by 1 SD\n\n$$\\text{Cohen's } d = \\dfrac{\\text{mean difference}}{\\text{standard deviation}} \n= \\dfrac{\\mu_{treatment} - \\mu_{no \\ treatment}}{\\sigma}$$\n\nFor $z$-tests:\n\n$$\\text{Estimated Cohen's }d = \\dfrac{\\text{mean difference}}{\\text{standard deviation}} \n= \\dfrac{M - \\mu}{\\sigma}$$\n\n\n## Interpreting Cohen's $d$\n\n\n:::: {.columns}\n\n::: {.column width=\"50%\"}\n\n- Cohen's rules of thumb\n\n\n::: {.cell}\n::: {.cell-output-display}\n`````{=html}\n<table>\n <thead>\n  <tr>\n   <th style=\"text-align:right;\"> \\(d\\) </th>\n   <th style=\"text-align:center;\"> Interpretation </th>\n  </tr>\n </thead>\n<tbody>\n  <tr>\n   <td style=\"text-align:right;\"> 0.2 </td>\n   <td style=\"text-align:center;\"> Small </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 0.5 </td>\n   <td style=\"text-align:center;\"> Medium </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 0.8 </td>\n   <td style=\"text-align:center;\"> Large </td>\n  </tr>\n</tbody>\n</table>\n\n`````\n:::\n:::\n\n:::\n\n::: {.column width=\"50%\"}\n![](media/effect-size-1.svg){.invertable width=\"80%\" style=\"margin-top: -2em;\"}\n\n![](media/effect-size-2.svg){.invertable width=\"80%\"}\n\n![](media/effect-size-3.svg){.invertable width=\"80%\"}\n:::\n\n::::\n\n## Effect size & sample size {.small}\n\n- SAT scores: $\\mu = 500; \\sigma = 100$\n  - Administer treatment (banana); $M = 501$\n  - Significant? $(\\alpha = .05$ two-tailed; critical values $z = \\pm 1.96)$\n  - Substantial? (effect size)\n\n:::: {.columns}\n\n::: {.column width=\"50%\" .fragment}\nWith 50 participants...\n\n$$z = \\dfrac{501 - 500}{100 / \\sqrt{50}} = 0.06 \\\\\nd = \\dfrac{501 - 500}{100} = 0.01$$\n:::\n\n::: {.column width=\"50%\" .fragment}\nWith 50,000 participants...\n\n$$z = \\dfrac{501 - 500}{100 / \\sqrt{50000}} = 2.22\\\\\nd = \\dfrac{501 - 500}{100} = 0.01$$\n:::\n\n::::\n  \n# Statistical power\n\n- Power: Probability of correctly rejecting a false null hypothesis\n  - Power = 1 – $\\beta$\n\n<table id=\"inf-tab\">\n  <thead>\n     <tr><th colspan=2 style=\"border-bottom: none;\"></th><th colspan=2 style=\"text-align: center;\">Actual situation</th></tr>\n     <tr><th colspan=2></th><th style=\"text-align: center;\">$H_0$ true</th><th style=\"text-align: center; background-color: #f5ea95;\">$H_0$ false</th></tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td rowspan=2 style=\"writing-mode: vertical-rl; transform: rotate(180deg); text-align: center; font-weight: bold;\">Researcher's<br>Decision</td>\n      <td style=\"text-align: right; font-weight: bold;\" >Reject $H_0$</td>\n      <td style=\"text-align: center; color: red; border-color: var(--text-color);\">Type 1 error<br>$\\alpha$</td>\n      <td style=\"text-align: center; color: #50C878; border-color: var(--text-color); background-color: #f5ea95;\">Correct<br>$1-\\beta$</td>\n    </tr>\n    <tr>\n      <td style=\"text-align: right; font-weight: bold;\" >Fail to reject $H_0$</td>\n      <td style=\"text-align: center; color: #50C878; border-color: var(--text-color);\">Correct</td>\n      <td style=\"text-align: center; color: red; border-color: var(--text-color); background-color: #f5ea95; background-opacity: 0.5;\">Type 2 error<br>$\\beta$</td>  \n    </tr>\n  </tbody>\n</table>\n\n## Power interactive\n\n:::: {#power-controls style=\"align-content: baseline; position: absolute; top: 4em; width: 100%; font-size: 0.5em; display: flex;\"}\n\n::: {#population-parameters style=\"width: 20%;\"}\nPopulation characteristics\n\n<label for=\"mu-input\" style=\"font-family: KaTeX_Main; font-size: 1em; font-style: italic; height: 1em;\">μ = </label>\n<input type=\"text\" id=\"mu-input\" class=\"invertable\" name=\"mu\" value=\"50\" style=\"background: none; border: none; height: 1em; font-family: KaTeX_Main; font-size: 1em; width: 2em; vertical-align: unset;\">\n\n<label for=\"sigma-input\" style=\"font-family: KaTeX_Main; font-size: 1em; font-style: italic; height: 1em;\">σ = </label>\n<input type=\"text\" id=\"sigma-input\" class=\"invertable\" name=\"sigma\" value=\"10\" style=\"background: none; border: none; height: 1em; font-family: KaTeX_Main; font-size: 1em; width: 2em; vertical-align: unset;\">\n:::\n\n::: {#data-parameters style=\"width: 60%;\"}\nExperiment parameters\n\n<label for=\"d-input\" style=\"font-family: KaTeX_Main; font-size: 1em; font-style: italic; height: 1em;\">d = </label><span id=\"d-value\" class=\"math\" style=\"display: inline-block; width: 1em;\"></span><input data-prevent-swipe type=\"range\" id=\"d-input\" name=\"d\" value=\"0.60\" min=\"-2\" max=\"2\" step=0.01 style=\"border: none; height: 1em; font-family: KaTeX_Main; font-size: 1em; margin-left: 1em; width: 50%; vertical-align: unset;\">\n\n<label for=\"n-input\" style=\"font-family: KaTeX_Main; font-size: 1em; font-style: italic; height: 1em;\">n = </label><span id=\"n-value\" class=\"math\" style=\"display: inline-block; width: 1em;\"></span><input data-prevent-swipe type=\"range\" id=\"n-input\" name=\"n\" value=\"20\" min=\"1\" max=\"100\" style=\"border: none; height: 1em; font-family: KaTeX_Main; font-size: 1em; margin-left: 1em; width: 50%; vertical-align: unset;\">\n\n<label for=\"alpha-input\" style=\"font-family: KaTeX_Main; font-size: 1em; font-style: italic; height: 1em;\">$\\alpha$ = </label><span id=\"alpha-value\" class=\"math\" style=\"display: inline-block; width: 1em;\"></span><input data-prevent-swipe type=\"range\" id=\"alpha-input\" name=\"alpha\" value=\"0.05\" min=\"0.01\" max=\"0.5\" step=0.01 style=\"border: none; height: 1em; font-family: KaTeX_Main; font-size: 1em; margin-left: 1em; width: 50%; vertical-align: unset;\"><label for=\"tails-input\" >Two-tailed</label><input type=\"checkbox\" id=\"tails-input\" name=\"tails\" checked>\n\n<p><span id=\"std-err-label\" class=\"math italic\">σ<sub>M</sub> = </span><span id=\"std-err-value\" class=\"math\"></span></p>\n:::\n\n\n::: {#diagram-options style=\"width: 20%;\"}\nDiagram options\n\n<label for=\"alt-input\" >Show $H_1$</label><input type=\"checkbox\" id=\"alt-input\" name=\"alt\" checked>\n\n$X$-axis:\n\n<input type=\"checkbox\" id=\"axis-raw\" name=\"axis\" checked><label for=\"axis-raw\" >Raw scores</label><br>\n<input type=\"checkbox\" id=\"axis-z-null\" name=\"axis\"><label for=\"axis-z-null\" >$H_0$ $z$-scores</label><br>\n<input type=\"checkbox\" id=\"axis-z-alt\" name=\"axis\"><label for=\"axis-z-alt\" >$H_1$ $z$-scores</label>\n\n:::\n::::\n\n:::{#power-interactive}\n:::\n\n\n:::{#power-values style=\"position: absolute; left: 0; top: 50%;\"}\n$\\beta =$ []{#beta-value .math style=\"color: grey;\"}  \nPower: []{#power-value .math style=\"color: steelblue;\"}\n:::\n\n\n\n\n\n\n## Influences {.smaller}\n\n- Factors that influence power\n  - See: <http://rpsychologist.com/d3/NHST/>\n- Effect size \n  - Larger effect size; greater power\n- Sample size\n  - Larger sample size; greater power\n- Alpha level \n  - Lowering alpha (making the test more stringent) reduces power\n- Directional hypothesis\n  - Using a one-tailed (directional) test increases power (relative to a two-tailed test)\n\n\n## Using statistical power {.small}\n\n- Power should be estimated before starting study\n  - Using known quantities \n  - Or, more often, making assumptions about factors that influence power\n- Determining whether a research study is likely to be successful\n  - Specify effect size, $n$, $\\alpha$; calculate power\n- Figuring out how many participants you need\n  - Specify desired power (e.g. .8), expected effect size, $\\alpha$\n  - Calculate required sample size\n\n\n## Power & sample sizes\n\n\n::: {.cell style='font-size: 0.65em;'}\n::: {.cell-output-display}\n`````{=html}\n<table>\n <thead>\n  <tr>\n   <th style=\"text-align:left;\"> Grouping variable </th>\n   <th style=\"text-align:left;\"> Dependent Variable </th>\n   <th style=\"text-align:right;\"> \\(d\\) </th>\n   <th style=\"text-align:right;\"> Required \\(n\\) </th>\n  </tr>\n </thead>\n<tbody>\n  <tr>\n   <td style=\"text-align:left;\"> Gender </td>\n   <td style=\"text-align:left;\"> Height </td>\n   <td style=\"text-align:right;\"> 1.85 </td>\n   <td style=\"text-align:right;\"> 6 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Liberal / Conservative </td>\n   <td style=\"text-align:left;\"> How important is social equality? </td>\n   <td style=\"text-align:right;\"> 0.69 </td>\n   <td style=\"text-align:right;\"> 34 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Do you like eggs? [yes / no] </td>\n   <td style=\"text-align:left;\"> How often do you eat egg salad? </td>\n   <td style=\"text-align:right;\"> 0.58 </td>\n   <td style=\"text-align:right;\"> 48 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Are you a smoker? [yes / no] </td>\n   <td style=\"text-align:left;\"> What is the likelihood of a smoker dying from a smoking-related illness? </td>\n   <td style=\"text-align:right;\"> 0.33 </td>\n   <td style=\"text-align:right;\"> 144 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Do you prefer science or art? </td>\n   <td style=\"text-align:left;\"> How many planets can you name correctly? </td>\n   <td style=\"text-align:right;\"> 0.07 </td>\n   <td style=\"text-align:right;\"> 3669 </td>\n  </tr>\n</tbody>\n</table>\n\n`````\n:::\n:::\n\n\n::: {.footnote .reference}\nSimmons, J. P., Nelson, L. D., & Simonsohn, U. (2013, January). Life after p-hacking. In *Meeting of the society for personality and social psychology*, New Orleans, LA (pp. 17-19). <http://dx.doi.org/10.2139/ssrn.2205186> \n:::\n\n## Low power\n\n<br>\n\n> Running a study with low statistical power is like setting out to look for distant galaxies with a pair of binoculars: even if what you're looking for is definitely out there, you have essentially no chance of seeing it.\n\n::: {.footnote .reference}\nStuart Ritchie, *Science Fictions*\n:::\n\n# Learning checks {.small}\n\n- True/False\n  - Larger differences between the sample and population mean increase effect size\n  - Increasing the sample size increases the effect size\n  - An effect that exists is more likely to be detected if $n$ is large\n  - An effect that exists is less likely to be detected if $\\sigma$ is large\n  - A Type I error is like convicting an innocent person in a jury trial\n  - A Type II error is like convicting a guilty person in a jury trial\n\n\n\n::: {.content-hidden}\n\n# Data and figures\n\n## Cover\n\n\n\n::: {.cell}\n\n:::\n\n\n\n## Effect size diagrams\n\n\n::: {.cell}\n\n:::\n\n\n\n## OJS power interactive\n:::\n\n\n\n```{ojs}\n\njStat = require(\"../js/jstat.js\")\n\nchart = {\n\n  const w = 1050\n  const h = 600\n  const margin = ({top: 20, right: 0, bottom: 80, left: 0})\n  const f = d3.format(\".2f\")\n  const f2 = d3.format(\".0f\")\n  const labelHeight = h/2\n  \n\n  var mu, sigma, d, mean_diff, n, alpha, beta, power, xlim, std_err, max_std_err, alpha_x, alpha_x2, showAlt, tails;\n  \n\n  var x = d3.scaleLinear()\n    .range([margin.left - 400, w + 400])\n  var z = d3.scaleLinear()\n    .range([margin.left - 400, w + 400])\n  var y = d3.scaleLinear()\n    .range([h - margin.bottom, margin.top])\n  const line = d3.line()\n    .x(d => x(d.value))\n    .y(d => y(d.density))\n  var xAxis = d3.axisBottom(x).ticks(10)\n  var zAxis = d3.axisBottom(z).tickSize(20)\n  var h1Axis = d3.axisBottom(z).tickSize(20)\n  \n  function curveData(mu, sm) {\n    var values = jStat(xlim[0], xlim[1], 310)[0],\n        arr = [];\n    for (var i in values) {\n      arr.push({\n          value: values[i], \n          density: jStat.normal.pdf(values[i], mu, sm)\n      })\n    }\n    return arr;\n  }\n  \n  const muInput = document.getElementById('mu-input')\n  const sigmaInput = document.getElementById('sigma-input');\n  const dInput = document.getElementById('d-input')\n  const nInput = document.getElementById('n-input')\n  const aInput = document.getElementById('alpha-input')\n  const altInput = document.getElementById('alt-input')\n  const tailsInput = document.getElementById('tails-input')\n  const axisRawInput = document.getElementById('axis-raw')\n  const axisZNullInput = document.getElementById('axis-z-null')\n  const axisZAltInput = document.getElementById('axis-z-alt')\n  \n  var hideAxisRaw = false;\n  var hideAxisZNull = true;\n  var hideAxisZAlt = true;\n  axisRawInput.oninput = function() {\n    hideAxisRaw = !hideAxisRaw;\n    axis.classed(\"hide-element\", hideAxisRaw)\n  }\n  axisZNullInput.oninput = function() {\n    hideAxisZNull = !hideAxisZNull;\n    svgH0Axis.classed(\"hide-element\", hideAxisZNull)\n  }\n  axisZAltInput.oninput = function() {\n    hideAxisZAlt = !hideAxisZAlt;\n    svgH1Axis.classed(\"hide-element\", hideAxisZAlt)\n  }\n  \n  muInput.oninput = function() {\n    mu = Number(muInput.value);\n    updateValues();\n    updateAxis();\n    updateZAxis();\n    redrawCurves();\n  };\n  \n  sigmaInput.oninput = function() {\n    sigma = sigmaInput.value;\n    mean_diff = d * sigma;\n    std_err = sigma/Math.sqrt(n);\n    max_std_err = sigma / Math.sqrt(50);\n    updateValues();\n    updateYScale();\n    updateAxis();\n    updateZAxis();\n    redrawCurves();\n  }\n  \n  function getParams() {\n    mu = Number(muInput.value);\n    sigma = Number(sigmaInput.value);\n    console.log(\"mu = \" + mu + \"; sigma = \" + sigma)\n    d = Number(dInput.value);\n    mean_diff = d * sigma;\n    n = Number(nInput.value);\n    alpha = Number(aInput.value);\n    std_err = sigma / Math.sqrt(n);\n    max_std_err = sigma / Math.sqrt(50);\n    tails = true;\n    updateCriticalValues();\n  }\n  \n  function updateCriticalValues() {\n    if(tails) {\n        alpha_x = mu + jStat.normal.inv(1 - alpha/2, 0, 1) * std_err\n    } else {\n        alpha_x = mu + jStat.normal.inv(1 - alpha, 0, 1) * std_err\n    }\n\n    if(tails) {\n        alpha_x2 = mu - jStat.normal.inv(1 - alpha/2, 0, 1) * std_err\n    } else {\n        alpha_x2 =-1000\n    }\n    console.log(\"crit high: \" + alpha_x + \"; crit low: \" + alpha_x2)\n  }\n  \n  function updateValues() {\n    updateCriticalValues();\n    \n      beta = jStat.normal.cdf(alpha_x, mu + mean_diff, std_err) - jStat.normal.cdf(alpha_x2, mu + mean_diff, std_err);\n    power = 1 - beta;\n    \n    d3.select(\"#d-value\").text(d)\n    d3.select(\"#n-value\").text(n)\n    d3.select(\"#alpha-value\").text(alpha)\n    d3.select(\"#std-err-value\").text(f(std_err))\n    d3.select(\"#beta-value\").text(f(beta))\n    d3.select(\"#power-value\").text(f(power))\n    \n\n  }\n  \n  function updateAxis() {\n    xlim = [mu - 12 * std_err, mu + 12 * std_err];\n    x.domain([xlim[0], xlim[1]])\n    <!-- xAxis.tickFormat(x => x / std_err).ticks([-3,-2,-1,0,1,2,3]); -->\n    axis.call(xAxis);\n  }\n  \n  function updateYScale() {\n    y.domain([0, jStat.normal.pdf(mu, mu, max_std_err)]);\n  }\n  \n  function updateZAxis() {\n    var tickSeq = [-3,-2,-1,0,1,2,3]\n    for (var i = 0; i < tickSeq.length; i++) {\n      tickSeq[i] = mu + tickSeq[i] * std_err;\n    }\n    var zlim = [mu - 3 * sigma, mu + 3 * sigma];\n    z.domain([xlim[0], xlim[1]])\n    zAxis\n      .tickFormat(z => f2((z - mu)/std_err))\n      .tickValues(tickSeq)\n    svgH0Axis\n      .call(zAxis);\n      \n    tickSeq = [-3,-2,-1,0,1,2,3]\n    for (var i = 0; i < tickSeq.length; i++) {\n      tickSeq[i] = mu + mean_diff + tickSeq[i] * std_err;\n    }\n    h1Axis\n      .tickFormat(z => f2((z - mu - mean_diff)/std_err))\n      .tickValues(tickSeq)\n    svgH1Axis\n      .call(h1Axis);\n  }\n  \n  function redrawCurves() {\n    <!-- updateAxis(); -->\n    redrawNull();\n    redrawAlt();\n  }\n  \n  function redrawNull() {\n    nullCurve.attr(\"d\", line(curveData(mu, std_err)));\n    nullLabel.attr(\"transform\", `translate(${x(mu)}, ${labelHeight})`);\n    nullFill.attr(\"d\", line(curveData(mu, std_err)));\n    nullClip.attr(\"points\", [[0,0], [0,h], [x(alpha_x2),h],[x(alpha_x2),0],\n                     [x(alpha_x),0], [x(alpha_x),h], [w,h],[w,0]]);\n    nullClipInterior.attr(\"points\", [[x(alpha_x2),0],[x(alpha_x2),h],\n                     [x(alpha_x),h], [x(alpha_x),0]]);\n                     \n  }\n  function redrawAlt() {\n    var dat = curveData(Number(mu + mean_diff), std_err)\n    altCurve.attr(\"d\", line(dat))\n    altFillPower.attr(\"d\", line(dat))\n    altFillBeta.attr(\"d\", line(dat))\n    altLabel.attr(\"transform\", `translate(${x(mu + mean_diff)}, ${labelHeight})`)\n  }\n  \n  nInput.oninput = function() {\n    n = Number(nInput.value)\n    std_err = sigma/Math.sqrt(n)\n    updateZAxis();\n    updateValues();\n    redrawCurves();\n  };\n  \n  dInput.oninput = function() {\n    d = Number(dInput.value);\n    mean_diff = d * sigma;\n    updateValues();\n    updateZAxis();\n    redrawAlt();\n  };\n  \n  aInput.oninput = function() {\n    alpha = Number(aInput.value)\n    updateValues();\n    redrawNull();\n  };\n  \n  tailsInput.oninput = function() {\n    tails = document.getElementById(\"tails-input\").checked\n    updateValues()\n    redrawNull()\n  }\n  \n  altInput.oninput = function() {\n    showAlt = document.getElementById(\"alt-input\").checked\n    \n    d3.select(\"#power-values\").classed(\"hide-element\", !showAlt)\n    \n    if(showAlt) {var opacity = 1} else {var opacity = 0}\n    altCurve.style(\"opacity\", opacity)\n    altLabel.style(\"opacity\", opacity)\n    if(showAlt) {var opacity = 0.7} else {var opacity = 0}\n    altFillPower.style(\"opacity\", opacity)\n    if(showAlt) {var opacity = 0.3} else {var opacity = 0}\n    altFillBeta.style(\"opacity\", opacity)\n  }\n  \n\n  \n  const svg = d3.select(\"#power-interactive\")\n    .append(\"svg\")\n    .attr(\"width\", w).attr(\"height\", h)\n\n  const svgH0Axis = svg.append(\"g\")\n      .attr(\"class\", \"axis\")\n      .classed(\"hide-element\", hideAxisZNull)\n      .attr(\"transform\", `translate(0, ${y(0)})`)\n      .style(\"font-size\", \"0.5em\")\n      .style(\"color\", \"red\")\n      \n  const svgH1Axis = svg.append(\"g\")\n      .attr(\"class\", \"axis\")\n      .classed(\"hide-element\", hideAxisZAlt)\n      .attr(\"transform\", `translate(0, ${y(0)})`)\n      .style(\"font-size\", \"0.5em\")\n      .style(\"color\", \"steelblue\")\n      \n  const axis = svg.append(\"g\")\n      .attr(\"class\", \"axis\")\n      .attr(\"transform\", `translate(0, ${y(0)})`)\n      .style(\"font-size\", \"0.5em\");\n  \n  const nullDist = svg.append(\"g\").attr(\"id\", \"null-dist\")\n\n  const nullFill = nullDist.append(\"path\").attr(\"id\", \"critical-region-fill\")\n      .attr(\"fill\", \"red\")\n      .attr(\"stroke\", \"none\")\n      .attr('clip-path', \"url(#clip-area)\")\n\n  const nullCurve = nullDist.append(\"path\").attr(\"id\", \"h0-curve\")\n      .attr(\"fill\", \"none\")\n      .attr(\"stroke\", \"black\")\n      .attr(\"stroke-width\", 2)\n      .attr(\"class\", \"invertable\");\n\n  const nullLabel = nullDist.append(\"g\")\n  nullLabel.append(\"text\").attr(\"id\", \"h0-text\")\n      .attr(\"class\", \"invertable\")\n      .style(\"text-anchor\", \"middle\")\n      .style('font-size', '1em')\n      .text('')\n      .append('tspan')\n        .html('H')\n        .append('tspan')\n        .html('0').attr('baseline-shift', 'sub').style('font-size', '0.5em');\n\n  const nullClip = svg.append(\"clipPath\")\n    .attr(\"id\", \"clip-area\")\n    .append(\"polygon\")\n\n  const nullClipInterior = svg.append(\"clipPath\").attr(\"id\", \"clip-area-interior\")\n    .append(\"polygon\")\n\n\n<!-- <!-- alternative distribution --> -->\n\n  const altDist = svg.append(\"g\").attr(\"id\", \"null-dist\")\n\n  const altCurve = altDist.append(\"path\").attr(\"id\", \"h1-curve\")\n      .attr(\"fill\", \"none\")\n      .attr(\"stroke\", \"black\")\n      .attr(\"stroke-width\", 2)\n      .attr(\"class\", \"invertable\");\n\n  const altLabel = altDist.append(\"g\")\n  altLabel.append(\"text\")\n      .style(\"text-anchor\", \"middle\")\n      .style('fill', 'steelblue')\n      .style('font-size', '1em')\n      .text('')\n      .append('tspan')\n        .html('H')\n        .append('tspan')\n        .html('1').attr('baseline-shift', 'sub').style('font-size', '0.5em');\n\n  const altFillPower = altDist.append(\"path\")\n      .attr('clip-path', \"url(#clip-area)\")\n      .attr(\"fill\", \"steelblue\")\n      .attr(\"opacity\", 0.7)\n      .attr(\"stroke\", \"steelblue\")\n      .attr(\"stroke-width\", 2.5)\n\n  const altFillBeta = altDist.append(\"path\")\n      .attr('clip-path', \"url(#clip-area-interior)\")\n      .attr(\"fill\", \"grey\")\n      .attr(\"opacity\", 0.3)\n\n  getParams();\n  updateValues();\n  updateYScale();\n  updateAxis();\n  updateZAxis();\n  redrawCurves();\n  \n}\n\n  \n```\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}