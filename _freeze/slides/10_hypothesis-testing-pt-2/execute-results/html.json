{
  "hash": "21ee2b4c081e07630780877568908f91",
  "result": {
    "markdown": "---\nformat: \n  revealjs:\n    chalkboard: true\n---\n\n\n# 10|HYPOTHESIS TESTING\n\n[part 2]{.subhead}\n\n\n\n::: {.cell}\n\n:::\n\n\n![](covers/10_hypothesis-testing-pt-2.svg){.invertable}\n\n\n# Overview\n\n- [Inferential errors]\n- [Effect size]\n- [Statistical power]\n- [Learning checks]\n\n\n\n# Inferential errors\n\n# Effect size {.small}\n\n:::: {.columns}\n\n::: {.column width=\"50%\"}\n- *Significant* effects are not always *substantial*\n  - As sample size increases, standard error of the mean decreases\n  - Even a tiny treatment effect might come out as “statistically significant”\n- Need to consider *effect size*\n  - How big is the treatment effect?\n  - Quantifies the absolute magnitude of a treatment effect, independent of sample size\n:::\n\n::: {.column width=\"50%\"}\n\n::: {.cell}\n\n:::\n\n\n![](media/effect-size-1.svg)\n\n![](media/effect-size-2.svg)\n\n![](media/effect-size-3.svg)\n\n:::\n\n::::\n\n\n## Effect size\n\n- Quantifying effect size\n  - One measure: Cohen’s $d$\n  - Quantifies the absolute magnitude of a treatment effect, independent of sample size\n  - Measures effect size in terms of standard deviation\n  - $d = 1.00$: treatment changed $\\mu$ by 1 SD\n\n$$\\text{Cohen's } d = \\dfrac{\\text{mean difference}}{\\text{standard deviation}} \n= \\dfrac{\\mu_{treatment} - \\mu_{no \\ treatment}}{\\sigma}$$\n\nFor $z$-tests:\n\n$$\\text{Estimated Cohen's }d = \\dfrac{\\text{mean difference}}{\\text{standard deviation}} \n= \\dfrac{M_{treatment} - \\mu_{no \\ treatment}}{\\sigma}$$\n\n\n## Interpreting Cohen's $d$\n\n\n:::: {.columns}\n\n::: {.column width=\"50%\"}\n\n::: {.cell}\n::: {.cell-output-display}\n`````{=html}\n<table>\n <thead>\n  <tr>\n   <th style=\"text-align:right;\"> <i>d</i> </th>\n   <th style=\"text-align:center;\"> Interpretation </th>\n  </tr>\n </thead>\n<tbody>\n  <tr>\n   <td style=\"text-align:right;\"> 0.2 </td>\n   <td style=\"text-align:center;\"> Small </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 0.5 </td>\n   <td style=\"text-align:center;\"> Medium </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 0.8 </td>\n   <td style=\"text-align:center;\"> Large </td>\n  </tr>\n</tbody>\n</table>\n\n`````\n:::\n:::\n\n:::\n\n::: {.column width=\"50%\"}\n![](media/effect-size-1.svg)\n\n![](media/effect-size-2.svg)\n\n![](media/effect-size-3.svg)\n:::\n\n::::\n\n## Effect size & sample size\n\n- SAT scores: $\\mu = 500; \\sigma = 100$\n  - Administer treatment (banana); $M = 501$\n  - Significant? $(\\alpha = .05$ two-tailed; critical values $z = \\pm 1.96)$\n  - Substantial? (effect size)\n\n:::: {.columns}\n\n::: {.column width=\"50%\"}\nWith 50 participants...\n\n$$z = \\dfrac{501 - 500}{100 / \\sqrt{50}} = 0.06\\\\\nd = \\dfrac{501 - 500}{100} = 0.01$$\n:::\n\n::: {.column width=\"50%\"}\nWith 50,000 participants...\n\n$$z = \\dfrac{501 - 500}{100 / \\sqrt{50000}} = 2.22\\\\\nd = \\dfrac{501 - 500}{100} = 0.01$$\n:::\n\n::::\n  \n# Statistical power\n\n- Power: Probability of correctly rejecting a false null hypothesis\n  - Depends on size of treatment effect, sample size, alpha, directional / nondirectional hypotheses\n  - Power = 1 – $\\beta$\n\n\n## Power interactive\n\n\n::: {.cell}\n\n:::\n\n```{ojs}\nd3 = require(\"https://d3js.org/d3.v5.min.js\")\njStat = require(\"https://cdn.jsdelivr.net/npm/jstat@latest/dist/jstat.min.js\")\n\nwidth = 1000\nheight = 400\n\nxlim = [-5, 5]\n\n\nh0 = {\n  var values = jStat(xlim[0], [xlim[1]], 210)[0],\n      arr = [];\n  for (var i in values) {\n    arr.push(\n      {\n        value: values[i], \n        density: jStat.normal.pdf(values[i], 0, sd)\n      }\n    )\n  }\n  return arr;\n}\n\n\nha = {\n  var arr = [];\n  \n  for (var i in h0) {\n    arr.push({\n      value: h0[i].value + mean_diff,\n      density: h0[i].density\n    })\n  }\n  return arr;\n}\n\nalpha_x = {\n  if(tails) {\n    return jStat.normal.inv(1 - alpha/2, 0, sd)\n  } else {\n    return jStat.normal.inv(1 - alpha, 0, sd)\n  }\n}\n\nalpha_x2 = {\n  if(tails) {\n    return -alpha_x\n  } else {\n    return -100\n  }\n}\n\nbeta = jStat.normal.cdf(alpha_x, mean_diff, sd) - jStat.normal.cdf(alpha_x2, mean_diff, sd)\n\npower = 1 - beta\n\n```\n\n\n::: {style=\"position: absolute; top: 50%; right: 0;\"}\n\n```{ojs}\ntex`\\beta = ${beta.toLocaleString()}`\n\ntex`\\text{power} = ${power.toLocaleString()}`\n```\n\n:::\n\n\n::: {.cell}\n<style type=\"text/css\">\n.ojs-controls {\n  width: 100%;\n  font-size: 0.5em;\n}\n\n.ojs-controls label {\n  width: 5em !important;\n}\n\n.ojs-controls input[type=\"text\"] {\n  width: 3em !important;\n}\n\n.ojs-controls input[type=\"range] {\n  width: 10em !important;\n}\n\n\n\n.axis path,\n.grid path {\n  display: none;\n}\n\n\n</style>\n:::\n\n\n::: {.ojs-controls}\n\n```{ojs}\nviewof mean_diff = Inputs.range([-3, 3], {value: 1, step: 0.1, label: \"Mean difference\"})\n\nviewof n = Inputs.range([1, 100], {value: 1, step: 1, label: \"n\"})\n\nsd = 1/Math.sqrt(n)\n\n\n\nviewof alpha = Inputs.range([0.01, 0.10], {value: 0.05, step: 0.001, label: \"Alpha\"})\n\nviewof tails = Inputs.toggle({label: \"Two-tailed\", value: true})\n\nviewof show_alt = Inputs.toggle({label: \"Show H1\", value: true})\n```\n\n:::\n\n\n```{ojs}\nchart = {\n  const svg = d3.select(DOM.svg(width, height));\n\n  svg.append(\"g\")\n      .call(xAxis)\n      .attr(\"transform\", `translate(0,${y(0)})`)\n      .attr(\"class\", \"axis\")\n      .style(\"font-size\", \"0.5em\");\n  \n  const null_dist = svg.append(\"g\").attr(\"id\", \"null-dist\")\n\n  null_dist.append(\"path\").attr(\"id\", \"critical-region-fill\")\n      .datum(h0)\n      .attr(\"fill\", \"red\")\n      .attr(\"stroke\", \"none\")\n      .attr(\"d\", line)\n      .attr('clip-path', \"url(#clip-area)\")\n      \n  null_dist.append(\"path\").attr(\"id\", \"h0-curve\")\n      .datum(h0)\n      .attr(\"fill\", \"none\")\n      .attr(\"stroke\", \"black\")\n      .attr(\"stroke-width\", 2)\n      .attr(\"stroke-linejoin\", \"round\")\n      .attr(\"stroke-linecap\", \"round\")\n      .attr(\"d\", line)\n      .attr(\"class\", \"invertable\");\n      \n  null_dist.append(\"text\").attr(\"id\", \"h0-text\")         \n      .attr(\"transform\", `translate(${x(0)} ,${y(0.1)})`)\n      .attr(\"class\", \"invertable\")\n      .style(\"text-anchor\", \"middle\")\n      .style('font-size', '1em')\n      .text('')\n      .append('tspan')\n        .html('H')\n        .append('tspan')\n        .html('0').attr('baseline-shift', 'sub').style('font-size', '0.5em');\n    \n  svg.append(\"clipPath\")\n    .attr(\"id\", \"clip-area\")\n    .append(\"polygon\")\n    .attr(\"points\", [[0,0], [0,height], [x(alpha_x2),height],[x(alpha_x2),0],\n                     [x(alpha_x),0], [x(alpha_x),height], [width,height],[width,0]]);\n    \n\n  svg.append(\"clipPath\").attr(\"id\", \"clip-area-interior\")\n    .append(\"polygon\")\n    .attr(\"points\", [[x(alpha_x2),0],[x(alpha_x2),height],\n                     [x(alpha_x),height], [x(alpha_x),0]]);\n      \n      \n<!-- alternative distribution -->\n{ if(show_alt) {\n    svg.append(\"path\")\n      .datum(ha)\n      .attr(\"fill\", \"none\")\n      .attr(\"stroke\", \"steelblue\")\n      .attr(\"stroke-width\", 2)\n      .attr(\"stroke-linejoin\", \"round\")\n      .attr(\"stroke-linecap\", \"round\")\n      .attr(\"stroke-dasharray\", \"5, 5\")\n      .attr(\"d\", line);\n      \n    svg.append(\"text\")             \n      .attr(\"transform\", `translate(${x(mean_diff)} ,${y(0.1)})`)\n      .style(\"text-anchor\", \"middle\")\n      .style('fill', 'steelblue')\n      .style('font-size', '1em')\n      .text('')\n      .append('tspan')\n        .html('H')\n        .append('tspan')\n        .html('1').attr('baseline-shift', 'sub').style('font-size', '0.5em');\n\n  svg.append(\"path\")\n      .datum(ha)\n      .attr('clip-path', \"url(#clip-area)\")\n      .attr(\"fill\", \"steelblue\")\n      .attr(\"opacity\", 0.7)\n      .attr(\"stroke\", \"steelblue\")\n      .attr(\"stroke-width\", 2.5)\n      .attr(\"d\", line);\n      \n  svg.append(\"path\")\n      .datum(ha)\n      .attr('clip-path', \"url(#clip-area-interior)\")\n      .attr(\"fill\", \"grey\")\n      .attr(\"opacity\", 0.3)\n      .attr(\"d\", line);\n}}\n      \n<!-- label alpha -->\n\n    null_dist.append('line')\n      .attr('x1', x(alpha_x))\n      .attr('x2', x(alpha_x))\n      .attr('y1', margin.top + 10)\n      .attr('y2', height - margin.bottom)\n      .style('stroke', 'red')\n      .style('stroke-width', '1.5px')\n\n    <!-- label alpha two-tailed -->\n    null_dist.append('line')\n      .attr('x1', x(alpha_x2))\n      .attr('x2', x(alpha_x2))\n      .attr('y1', margin.top + 10)\n      .attr('y2', height - margin.bottom)\n      .style('stroke', 'red')\n      .style('stroke-width', '1.5px')\n    \n    svg.append(\"text\")             \n      .attr(\"transform\", `translate(${x(alpha_x)} ,${margin.top})`)\n      .style(\"text-anchor\", \"middle\")\n      .style('font-family', 'sans-serif')\n      .style('font-size', '0.4em')\n      .style('fill', 'red')\n      .text(\"critical region z \" + alpha_x.toLocaleString(undefined, {maximumSignificantDigits: 3, minimumSignificantDigits: 3}));\n  \n  return svg.node();\n}\n\nmargin = ({top: 20, right: 0, bottom: 30, left: 0})\n\n\nline = d3.line()\n    .x(d => x(d.value))\n    .y(d => y(d.density))\n\nx = d3.scaleLinear()\n  .domain([xlim[0], xlim[1]])\n  .range([margin.left, width - margin.right])\n\n\ny = d3.scaleLinear()\n  .domain([0, d3.max([0.6, jStat.normal.pdf(0, 0, sd)])])\n  .range([height - margin.bottom, margin.top])\n  \nxAxis = d3.axisBottom(x).ticks(8)\n\n\n\n<!-- xAxis = g => g -->\n<!--     .attr(\"transform\", `translate(0,${height - margin.bottom})`) -->\n<!--     .call(d3.axisBottom(x).ticks(10).tickSizeOuter(5)) -->\n  \n```\n\n\n\n## Influences\n\n- Factors that influence power\n  - See: <http://rpsychologist.com/d3/NHST/>\n- Effect size \n  - Larger effect size; greater power\n- Sample size\n  - Larger sample size; greater power\n- Alpha level \n  - Lowering alpha (making the test more stringent) reduces power\n- Directional hypothesis\n  - Using a one-tailed (directional) test increases power (relative to a two-tailed test)\n\n\n## Using statistical power\n\n- Power should be estimated before starting study\n  - Using known quantities \n  - Or, more often, making assumptions about factors that influence power\n- Determining whether a research study is likely to be successful\n  - Specify effect size, $n$, $\\alpha$; calculate power\n- Figuring out how many participants you need\n  - Specify desired power (e.g. .8), expected effect size, $\\alpha$\n  - Calculate required sample size\n\n\n## Power & sample sizes\n\n\n::: {.cell}\n\n:::\n\n\n::: {.footnote .reference}\nSimmons, J. P., Nelson, L. D., & Simonsohn, U. (2013, January). Life after p-hacking. In *Meeting of the society for personality and social psychology*, New Orleans, LA (pp. 17-19). http://dx.doi.org/10.2139/ssrn.2205186 \n:::\n\n## Low power\n\n> Running a study with low statistical power is like setting out to look for distant galaxies with a pair of binoculars: even if what you're looking for is definitely out there, you have essentially no chance of seeing it.\n\n::: {.footnote .reference}\nStuart Ritchie, *Science Fictions*\n:::\n\n# Learning checks {.small}\n\n- True/False\n  - Larger differences between the sample and population mean increase effect size\n  - Increasing the sample size increases the effect size\n  - An effect that exists is more likely to be detected if $n$ is large\n  - An effect that exists is less likely to be detected if $\\sigma$ is large\n  - A Type I error is like convicting an innocent person in a jury trial\n  - A Type II error is like convicting a guilty person in a jury trial\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\r\n<script>\r\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\r\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\r\n  // slide changes (different for each slide format).\r\n  (function () {\r\n    function fireSlideChanged(previousSlide, currentSlide) {\r\n\r\n      // dispatch for htmlwidgets\r\n      const event = window.document.createEvent(\"Event\");\r\n      event.initEvent(\"slideenter\", true, true);\r\n      window.document.dispatchEvent(event);\r\n\r\n      // dispatch for shiny\r\n      if (window.jQuery) {\r\n        if (previousSlide) {\r\n          window.jQuery(previousSlide).trigger(\"hidden\");\r\n        }\r\n        if (currentSlide) {\r\n          window.jQuery(currentSlide).trigger(\"shown\");\r\n        }\r\n      }\r\n    }\r\n\r\n    // hookup for reveal\r\n    if (window.Reveal) {\r\n      window.Reveal.addEventListener(\"slidechanged\", function(event) {\r\n        fireSlideChanged(event.previousSlide, event.currentSlide);\r\n      });\r\n    }\r\n\r\n    // hookup for slidy\r\n    if (window.w3c_slidy) {\r\n      window.w3c_slidy.add_observer(function (slide_num) {\r\n        // slide_num starts at position 1\r\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\r\n      });\r\n    }\r\n\r\n  })();\r\n</script>\r\n\r\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}