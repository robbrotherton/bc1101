---
format: 
  revealjs:
    chalkboard: true
---


# 1|COURSE OVERVIEW

![](covers/01_course-info.svg)

```{r cover-course-info, eval=FALSE}
library(ggplot2)

word <- "STATISTICS"

df <- data.frame(letter = strsplit(word, "")[[1]]) |> 
  dplyr::rowwise() |> 
  dplyr::mutate(value = which(LETTERS==letter)) |> 
  tibble::rowid_to_column(var = "id")

ggplot(df, aes(x = id, y = value, fill = letter)) +
  geom_col() +
  scale_fill_viridis_d(option = "D", end = .6, guide = "none") +
  theme_void()

ggsave(here::here("slides", "covers", "01_course-info.svg"), width = 10, height = 5)

# Variables cover


# variability cover

sd <- seq(1, 5, .1)
xvals <- seq(-5, 5, .1)

df <- data.frame(id = rep(sd, each = length(xvals)),
                 x = rep(xvals, length(sd)),
                 y = purrr::map(.x = sd, ~dnorm(x = xvals, sd = .x)) |> 
  unlist())

ggplot(df) +
  geom_path(aes(x, y, group = id, alpha = 1/id)) +
  scale_alpha_identity(guide = "none") +
  scale_x_continuous(expand = c(0,0)) +
  theme_void()

ggsave(here::here("slides", "covers", "05_variability.svg"), width = 10, height = 5)

ggplot(data = NULL, aes(x = 0, y = 0, image = here::here("slides", "covers", "02_variables.svg"))) +
  ggimage::geom_image()

# frequency cover
dfs <- 1:100
xvals <- seq(-3, 3, .1)

df <- data.frame(id = rep(dfs, each = length(xvals)),
                 x = rep(xvals, length(dfs)),
                 y = purrr::map(.x = dfs, ~dt(x = xvals, df = .x)) |> 
  unlist())

ggplot(df) +
  geom_path(aes(x, y, group = id), alpha = .5) +
  theme_void()

```

## Overview

- [Textbook]
- [Lectures]
- [Recitation]
- [Exams]
- [Final grades]
- [Other stuff](#lastly)


## About me

:::: {.columns}

::: {.column width="40%"}
- Dr. Rob Brotherton

- Northern Irish

- Research: Political psychology / conspiracy beliefs
:::

::: {.column width="60%"}

<!-- placeholder -->

:::

::::


# Textbook


:::: {.columns}

::: {.column width="50%"}
- Learning Statistics with R
  - By Danielle Navarro
  - Download as a .pdf for free
  - [learningstatisticswithr.com](https://learningstatisticswithr.com)
  - Helpful for seeing how things are done in R
  - As well as explaining statistical concepts
:::

::: {.column width="50%"}

[![](media/navarro-flametree.png){style="margin-top: -2em;"}](https://art.djnavarro.net/)

:::

::::


# Lectures

## Panopto

  - In-lecture quizzes
  - Navigation
  - Subtitles
  - Discussion
  - Also: Discussion forums on Canvas

## Topics

- Basic issues:
  - Terminology, variables & measurement
- Descriptive statistics: 
  - Frequency, central tendency, variability, z-scores
- Inferential statistics:
  - Probability, sampling; hypothesis testing
  - $t$-tests; ANOVA; Correlation & regression
- Logical progression


# Recitation

## R problem sets

- Practical application of stats to data
  - Using RStudio Cloud
  - Show code; how you worked out answers
  - Work on .qmd in RStudio Cloud
  - Upload rendered .pdf to Canvas

## Grading

- Wrong answers ≠ lower grade
  - 0, 1, or 2 points
  - 0 = No submission, 1 = Incomplete, 2 = Valid attempt
  - Deadline: 5pm day of recitation

```{r echo=T}
# comment your R code to show thought process

# e.g. here I'm adding 2 and 2
2 + 2 
```

# Exams

- 3 multiple choice exams
  - Multiple choice
  - 60 minutes
  - Only lecture material, not R
  - Non-cumulative
  - Except inasmuch as later concepts rely on ones introduced earlier
- Some questions will involve sums, but only simple ones you can do on paper

# Final grades

- Final grade
  - 20% Lecture / discussion forum engagement
  - 20% Problem Sets
  - 60% 3 multiple choice exams (20% each)


# Other stuff

## Math

- Statistics requires basic math skills

- E.g. order of operations
  1. Parentheses
  2. Exponents (like squaring/square root)
  3. Multiplication & division
  4. Summation
  5. Addition & subtraction

## Math

- Summation
  - Symbol $\Sigma$ (Greek letter Sigma) means add up
  - Summation is done after operations in parentheses, squaring, and multiplication or division, but before other addition or subtraction
  - E.g… $X = [2, 4, 7]$


$$\Sigma X = ? \\
\Sigma X + 1 = ? \\
\Sigma(X + 1) = ?$$

## Math

- Algebra
  - Rearranging equations
  - E.g.


$$\begin{align}12 &= 7 + X \\ X &= ? \end{align}$$


## ![](media/Rlogo.svg){style="height: 1em; margin-left: 0.75em"} {#r .smaller data-menu-title="R"}

:::: {.columns}

::: {.column width="50%"}
- Disadvantages
  - A little tricky to begin with
- Advantages
  - Free
  - Can do stuff other stats software can't
  - Reproducible analyses
  - Pretty graphs
  - Feel like a super cool hacker
  - Pirate jokes
  - Good for your career
:::

::: {.column width="50%"}

![](media/r-jobs-2019.png)

:::

::::



## Lastly

- Check Canvas & email regularly
- Let me know about problems


## Population

```{css}
<!-- #pop-circles { -->
<!--   stroke: black; -->
<!-- } -->

<!-- @media (prefers-color-scheme: dark) { -->
<!--   #pop-circles { -->
<!--     stroke: white; -->
<!--   } -->
<!-- } -->
```

```{ojs}



data = {
  let arr = [];
  for (var i = 0; i < 100; i++) {
    arr.push({
      x: Math.floor(Math.random() * xmax),
      y: Math.floor(Math.random() * ymax),
      color: Math.floor(Math.random() * 7)
    });
  }
  return arr;
}

sample_colors = { 
  let arr = [];
  for (var i = 0; i < 10; i++) {
    arr.push(Math.floor(Math.random() * 7))
  }
  return arr;
}


width = 1050
height = 500
r = 15
xmax = 400
ymax = 100
sample_y = height - r
margin = ({top: r, right: 10, bottom: r, left: 5});


pop = {
  const svg = d3.select(DOM.svg(width, height));

  const circles = svg.append("g").attr("id", "pop-circles")
  const sample = svg.append("g").attr("id", "sample-circles")
  
  let path = {
    x: (width*0.5 + xmax*.5 + r),
    y: (margin.top + ymax*0.5),
    cy: (height - r - (margin.top + ymax*0.5)) * 0.5
  };
  
  const paths = svg.append("g").attr("id", "paths")
                        .attr("stroke", "black")
                        .attr("stroke-dasharray", [5, 5])
                        .attr("fill", "none")
                        .attr("class", "invertable");
                        
  svg.append("polygon")
    .attr("points", [[0,0],[10,0],[5,10]])
    .attr("transform", "translate(220," + (path.cy+margin.top+ymax*0.5) +") scale(2) rotate(180)")
    .attr("class", "invertable");
    
  svg.append("polygon")
    .attr("points", [[0,0],[10,0],[5,10]])
    .attr("transform", "translate(830," + (path.cy+margin.top+ymax*0.5) +") scale(2)")
    .attr("class", "invertable");
  
  circles.selectAll("circle")
    .data(data)
    .enter()
    .append("circle")
      .attr("fill", d => color(d.color))
      .attr("stroke", "black")
      .attr("r", 15)
      .attr("cx", d => x(d.x))
      .attr("cy", d => y(d.y))
          
    circles
      .transition()
      .duration(500)
      .attr("opacity", 0)
      .transition()
      .duration(500)
      .attr("opacity", 1);
      
  svg.append("rect")
    <!-- .attr("class", "invertable") -->
    .attr("x", width/2 - xmax/2 - r)
    .attr("y", 1)
    .attr("width", xmax + 2*r)
    .attr("height",ymax + 2*r)
    .attr("stroke", "black")
    .attr("fill", "white")
    .attr("opacity", 0.9)
    .text("Population");

  paths.append("path")
    .attr("d", "M" + path.x + "," + path.y + ", q200," + path.cy + " 0," + (height - r - path.y))
    
  paths.append("path")
    .attr("d", "M" + (path.x - xmax - 2*r) + "," + path.y + ", q-200," + path.cy + " 0," + (height - r - path.y))
    
  sample.selectAll("circle")
    .data(sample_colors)
    .enter()
    .append("circle")
      .attr("fill", d => color(d))
      .attr("stroke", "black")
      .attr("r", r)
      .attr("cx", function(d, i) {return (i * 41.5 + width/2 - xmax/2 + r)})
      .attr("cy", sample_y);
      
  return svg.node();
}



x = d3.scaleLinear()
  .domain([0, xmax])
  .range([width/2 - xmax/2, width/2 + xmax/2])

y = d3.scaleLinear()
  .domain([0, ymax])
  .range([margin.top + ymax, margin.top])
  
color = d3.scaleOrdinal().
  domain(data.map(d => d.color))
  .range(d3.schemeSet3);

```

