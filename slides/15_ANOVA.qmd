---
format: revealjs
---

# 15|ANOVA [part 1]{style="float: right; opacity: 0.8;"}

![](covers/15_ANOVA.svg)

# Overview

- [Intro to ANOVA]
- [Uses of ANOVA]
- [Learning checks]


# Intro to ANOVA

## Comparing groups: $t$ statistic

```{r}
options(digits = 2)
x <- c(9,11,13)
y <- c(3,5,4)
z <- c(5,6,7)
t <- bc1101tools::example_t(x, y)
a2 <- bc1101tools::example_ANOVA(x, y)
```

```{r}
table <- knitr::kable(data.frame(x, y), col.names = c("üçå<br>Banana", "üç¨<br>Candy"), align = "c", format = "html", escape = FALSE) |> 
  kableExtra::add_header_above(c("Manipulation" = 2)) |> 
  kableExtra::column_spec(1:2, width = "5em")

table_footer <- knitr::kable(data.frame(glue::glue("\\(M = {mean(x)}\\)"), 
                        glue::glue("\\(M = {mean(y)}\\)")), 
             col.names = NULL, align = "c") |> 
  kableExtra::column_spec(1:2, width = "5em")
```

:::: {.columns}

::: {.column width="50%"}
```{r}
#| style: "font-size: 0.7em; margin-top: 2em;"
table
table_footer
```
:::

::: {.column width="50%" style="font-size: 0.75em;"}
$t = \dfrac{ \textrm{difference between groups}} {\textrm{difference expected due to chance}}$

$$\begin{align}
t &= \dfrac{(M_1-M_2)-(\mu_1-\mu_2)}{s_{(M_1-M_2)}} \\
&= \dfrac{`r t$mean_x` - `r t$mean_y`}{`r t$std_err`} \\
&= `r t$t`
\end{align}$$
:::

::::


## Comparing groups: $t$ statistic

:::: {.columns}

::: {.column width="50%"}
```{r}
#| style: "font-size: 0.7em; margin-top: 2em;"
table
table_footer
```

$t = `r t$t`$
:::

::: {.column width="50%"}

::: {.center-element style="font-size: 0.75em;"}
$t = \dfrac{\text{difference between groups}}{\text{difference expected due to chance}}$

is analogous to...

$\dfrac{treatment \cdot chance}{chance}$
:::

:::

::::

## Comparing groups: Variances

:::: {.columns}

::: {.column width="50%"}
```{r}
#| style: "font-size: 0.7em; margin-top: 2em;"
table
table_footer
```

$t = `r t$t`$
:::


::: {.column}

:::: {#diagram-container style="float: right; position: relative; width: 100%; height: 300px; font-size: 0.6em; margin-top: 1em; margin-bottom: 2em;"}

::: {.node .top .total}
Total  
variability in data
:::
::: {.node .between style="top: 50%; left: 0"}
Variability  
between groups
:::
::: {.node .text style="top: 75%; left: 0; z-index: -1;"}
- Chance
- Treatment effect
:::
::: {.node .within style="top: 50%; right: 0;"}
Variability  
within groups
:::
::: {.node .text style="top: 75%; right: 0; z-index: -1;"}
- Chance
:::

::::

::: {.center-element style="font-size: 0.75em;"}
$\dfrac{\text{variability between groups}}{\text{variability within groups}}$

is analogous to...

$\dfrac{treatment \cdot chance}{chance}$
:::

:::

::::


## Total variance

:::: {.columns}

::: {.column width="50%"}
```{r}
#| style: "font-size: 0.7em; margin-top: 2em;"
table
table_footer
```

$t = `r t$t`$
:::


::: {.column  style="font-size: 0.8em;"}
- Total variance
  - $SS_{total}$
  - Find sum of squared deviations of all scores (ignoring different groups) from grand mean (mean of all scores)
  - $df_{total} = N - 1$

$$\begin{align}
\text{Variance}_{total} &= \dfrac{SS_{total}}{df_{total}} \\
&= \dfrac{`r a2$SS_total`}{`r a2$df_total`} \\
&= `r a2$MS_total`
\end{align}$$
:::

::::


## Within groups variance

:::: {.columns}

::: {.column width="50%"}
```{r}
#| style: "font-size: 0.7em; margin-top: 2em;"
table
table_footer
```

$t = `r t$t`$  
$\text{Variance}_{total} = `r a2$MS_total`$
:::


::: {.column style="font-size: 0.8em;"}
- Variance within groups
  - $SS_{within} = \Sigma SS_{each \ treatment}$
  - Find $SS$ for each individual group from respective group mean
  - Then add $SS$ values
  - $df_{within} = \Sigma df_{each \ treatment}$

$$\begin{align}
\text{Variance}_{within} &= \dfrac{SS_{within}}{df_{within}} \\
&= \dfrac{`r a2$SS_x` + `r a2$SS_y`}{`r a2$df_x` + `r a2$df_y`} \\
&= `r a2$MS_within`
\end{align}$$
:::

::::


## Between groups variance

:::: {.columns}

::: {.column width="50%"}
```{r}
#| style: "font-size: 0.7em; margin-top: 2em;"
table
table_footer
```

$t = `r t$t`$  
$\text{Variance}_{total} = `r a2$MS_total`$  
$\text{Variance}_{within} = `r a2$MS_within`$
:::


::: {.column .small}
- Total variability in data = Var between groups + Var within groups
- Therefore...

::: {.center-element}
$SS_{between} = SS_{total} ‚Äì SS_{within}$

$df_{between} = df_{total} ‚Äì df_{within}$

$$\begin{align}
\text{Variance}_{between} &= \dfrac{SS_{between}}{df_{between}} \\
&= \dfrac{`r a2$SS_total` - `r a2$SS_within`}{`r a2$df_total`-`r a2$df_within`} \\
&= `r a2$MS_between`
\end{align}$$
:::
:::

::::


## Ratio of variances

:::: {.columns}

::: {.column width="50%"}
```{r}
#| style: "font-size: 0.7em; margin-top: 2em;"
table
table_footer
```

$t = `r t$t`$  
$\text{Variance}_{total} = `r a2$MS_total`$  
$\text{Variance}_{within} = `r a2$MS_within`$
$\text{Variance}_{between} = `r a2$MS_between`$
:::


::: {.column}

:::: {#diagram-container style="float: right; position: relative; width: 100%; height: 300px; font-size: 0.6em; margin-top: 1em; margin-bottom: 2em;"}

::: {.node .top .total}
Total  
variability in data
:::
::: {.node .between style="top: 50%; left: 0"}
Variability  
between groups
:::
::: {.node .text style="top: 75%; left: 0; z-index: -1;"}
- Chance
- Treatment effect
:::
::: {.node .within style="top: 50%; right: 0;"}
Variability  
within groups
:::
::: {.node .text style="top: 75%; right: 0; z-index: -1;"}
- Chance
:::

::::

$\dfrac{\text{variance between groups}}{\text{variance within groups}}$

$\dfrac{`r a2$MS_between`}{`r a2$MS_within`} = `r a2$f_ratio`$
:::

::::


## The $F$ ratio

:::: {.columns}

::: {.column width="50%"}
```{r}
#| style: "font-size: 0.7em; margin-top: 2em;"
table
table_footer
```

$t = `r t$t`$  
$F = `r a2$f_ratio`$
:::


::: {.column}

:::: {#diagram-container style="float: right; position: relative; width: 100%; height: 300px; font-size: 0.6em; margin-top: 1em; margin-bottom: 2em;"}

::: {.node .top .total}
Total  
variability in data
:::
::: {.node .between style="top: 50%; left: 0"}
Variability  
between groups
:::
::: {.node .text style="top: 75%; left: 0; z-index: -1;"}
- Chance
- Treatment effect
:::
::: {.node .within style="top: 50%; right: 0;"}
Variability  
within groups
:::
::: {.node .text style="top: 75%; right: 0; z-index: -1;"}
- Chance
:::

::::


::: {.center-element style="font-size: 0.75em;"}
$\dfrac{\text{variance between groups}}{\text{variance within groups}}$

is analogous to...

$\dfrac{treatment \cdot chance}{chance}$
:::

:::

::::


# Uses of ANOVA

## More complicated design

```{r}
#| style: "font-size: 0.8em"

table2 <- knitr::kable(data.frame(x, y, z), col.names = c("üçå<br>Banana", "üç¨<br>Candy", "üòê<br>Control"), align = "c", format = "html", escape = FALSE) |> 
  kableExtra::add_header_above(c("Manipulation" = 3)) |> 
  kableExtra::column_spec(1:3, width = "5em")

means <- data.frame(glue::glue('\\(M = {mean(x)}\\)'),
                    glue::glue('\\(M = {mean(y)}\\)'),
                    glue::glue('\\(M = {mean(z)}\\)'))

table2_footer <- knitr::kable(means, col.names = NULL, align = "c") |> 
  kableExtra::column_spec(1:3, width = "5em")


table2
table2_footer
```

- Differences among 3 means
  - Did banana improve scores? Candy bar harm scores? Both? Neither?
  

## Limitation of $t$ test

- Can only compare two populations
  - $H_0$: $\mu_1 - \mu_2 = 0$

![](media/anova-populations-2.svg){.invertable}

## Advantage of ANOVA

- ANOVA is a tool for the general case 
  - Comparing any number of populations
  - $H_0$: $\mu_1 = \mu_2 = \mu_3 = \dots = \mu_n$

![](media/anova-populations-6.svg){.invertable}





# Learning checks

- If you calculate both the $t$ and $F$ statistics for a two-group, independent-samples design, ____ equals ____ squared. [Why?]{.emph}
- True/False
  - A $t$ statistic can be either positive or negative
  - An $F$ statistic can be either positive or negative
- Which statistic, $t$ or $F$, is more 'flexible', i.e. applicable in a wider range of research contexts?





::: {.content-hidden}

# Data and figures

## Cover

```{r}
#| eval: false

library(ggplot2)

gg_color_hue <- function(n) {
  hues = seq(15, 375, length = n + 1)
  hcl(h = hues, l = 65, c = 100)[1:n]
}

x_scale <- seq(0, 3, .01)
dfs <- 5:30
colors <- gg_color_hue(length(dfs))

d <- purrr::map2(.x = dfs, 
                 .y = colors,
                 ~tibble::tibble(x = x_scale,
                                 y = df(x, df1 = .x, df2 = .x),
                                 color = .y)) |> 
  dplyr::bind_rows(.id = "id")

ggplot(d, aes(x, y, color = color)) +
  geom_path() +
  scale_x_continuous(expand = c(0,0)) +
  theme_void() +
  theme(legend.position = "none")

bc1101tools::plot_save("15_ANOVA.svg", subdir = "covers", width = 10, height = 5)

```

```{r}
#| eval: false
ANOVA_populations <- function(circles = 6, label = NULL, size = 4) {
  
  require(ggplot2)
  circles <- 1:circles
  n <- length(circles)
  r <- .4
  
  ggplot(NULL) +
    ggforce::geom_circle(aes(x0 = circles, y0 = 1.5, r = r), linetype = 2) +
    geom_rect(aes(xmin =circles-r, xmax  = circles+r, ymin = .3, ymax = .7), color = "black", fill = NA) +
    geom_text(aes(x = circles, y = 1.5, label = "Population"), size = size) +
    geom_text(aes(x = circles, y = .5, label = "Sample"), size = size) +
    geom_segment(aes(x = circles, xend = circles, y = .7, yend = 1.1), linetype = 2) +
    geom_curve(aes(x = circles[1:n-1]+.2, xend = circles[2:n]-.2, y = 1.85, yend = 1.85), 
               curvature = -.4, color = "red", arrow = arrow(ends = "both", length = unit(.3, "cm"))) +
    coord_fixed() +
    theme_void()
}

```


## OJS ANOVA pop

:::

```{ojs}
//| eval: false

aov_pop = {

  const w = 1050
  const h = 250
  const r = 70
  
  const data = [0,1,2,3,4,5]
  
  const svg = d3.select("#anova-populations")
    .append("svg").attr("width", w).attr("height", h)

  const comp_lines = svg.append("g")
      .style("stroke", "red")
      .style("fill", "none")
      .style("stroke-dasharray", [5,5])
      .style("stroke-width", 3)
    
  const g = svg.append("g")
    .attr("transform", "translate(10, 2)")
    .style("fill", "var(--background-color)")
    .style("stroke", "var(--text-color)")
  

  const curve = d3.line().curve(d3.curveNatural);
  const points = [[r, r],[r+r*1.25,r/2],[r+r*2.5, r]];
  
  const labels = svg.append("g")
    .attr("transform", "translate(10, 2)")
    .style("fill", "var(--text-color)")
    .style("stroke", "none")
    .style("font-size", "0.7em")
    .style("z-index", 100)
  const pop = labels.append("g")
  const samp = labels.append("g")
  
  var visible = 5
  function animate() {
    if (visible==6) {
      visible = 2
    } else {
      visible++
    }
    
    svg.selectAll("path").remove()
    svg.selectAll("circle").remove()
    svg.selectAll("rect").remove()
    svg.selectAll("line").remove()
    svg.selectAll("text").remove()
    
    comp_lines.selectAll("path").data(data.slice(0,visible-1)).enter()
    .append("path")
      .attr("d", curve(points))
      .attr("transform", d => `translate(${d * r * 2.5}, -20)`)
      
    g.selectAll("circle").data(data.slice(0,visible)).enter()
    .append("circle")
      .attr("cx", d => r + d * r * 2.5)
      .attr("cy", r)
      .attr("r", r)
  
  g.selectAll("rect").data(data.slice(0,visible)).enter()
    .append("rect")
      .attr("x", d => d * r * 2.5)
      .attr("y", h - r - 4)
      .attr("width", 2*r)
      .attr("height", r)
      
  g.selectAll("line").data(data.slice(0,visible)).enter()
    .append("line")
      .attr("x1", d => r + d * r * 2.5)
      .attr("x2", d => r + d * r * 2.5)
      .attr("y1", 2*r).attr("y2", h - r)
      .style("stroke-dasharray", [5,5])
      
  pop.selectAll("text").data(data.slice(0,visible)).enter()
    .append("text")
      .attr("x", d => r + d * r * 2.5)
      .attr("y", r + 2)
      .attr("text-anchor", "middle")
      .attr("alignment-baseline", "middle")
      .text("Population")
  
  samp.selectAll("text").data(data.slice(0,visible)).enter()
    .append("text")
      .attr("x", d => r + d * r * 2.5)
      .attr("y", h - r/2 - 2)
      .attr("text-anchor", "middle")
      .attr("alignment-baseline", "middle")
      .text("Sample")
  }
  animate()
  svg.on("click", animate)
}

```

