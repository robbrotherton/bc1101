---
format: revealjs
---

# 3|FREQUENCY

::: {#cover-image}
:::


# Overview
- [Frequency]
- [Frequency tables](#frequency-tables)
- [Frequency graphs](#frequency-graphs)
- [Learning checks]


## Statistics {.small}

> A bunch of numbers looking for an argument. ^[[Jones, 2011](https://onlinelibrary.wiley.com/doi/10.1002/9781118116371.ch3)]

- Mathematical procedures used to collect, organize, summarize & interpret information
  - Provide standardized evaluation procedures
  - Tell us about patterns of interest in data
- Etymology
  - *Statistics* comes from *status*, meaning *state*
  - The state of the state
  - Census, birth/death rate, incomes, unemployment etc


# Frequency

## E.g. opinion polling

:::: {.columns}
::: {.column width="50%"}
- How often does something occur?
    - E.g. [FiveThirtyEight](https://projects.fivethirtyeight.com/biden-approval-rating/) opinion polling
:::

::: {.column width="50%" style="margin-top: -3em;"}
![](media/538-intro.png){style="margin-bottom: 0;"}
![](media/538-chart.png){style="margin-top: -15px; margin-bottom: 0;"}
![](media/538-table.png){style="margin-top: -15px;"}
:::
::::


## Frequency distributions

- A frequency distribution...
    - Organizes and displays data
    - Conveys how scores are distributed
    - Can be either a table or a graph
- Shows:
    - Categories that make up the scale
    - Frequency, or number of observations, in each category
    - And/or proportion/percentage/cumulative percent of scores in each category
    


## Simple example

```{r ref.label=I('data')}
```

- From raw scores
```{r}
cat(scores)
```

:::: {.columns}

::: {.column width="30%"}
- To this

::: {style="font-size: 0.75em;"}
```{r freqTable1, out.width="50%"}
bc1101tools::frequency_table(scores)
```
:::
:::


::: {.column width="70%"}

- Or this

::: {.r-hstack}
![](media/freq-histogram-small.svg){.invertable}

![](media/freq-poly-small.svg){.invertable}

:::
<!-- ![](media/freq-graphs-demo.jpg) -->
:::

::::



# Frequency tables {.smaller}

- Categories in a column labeled $X$ (or a more meaningful name)
- Frequency count in column labeled $f$
- Can have columns for...
  - Proportion $(f / N)$
  - Percentage (proportion * 100)
  - Cumulative percentage

```{r}
bc1101tools::frequency_table(scores, additional_cols = TRUE)  
  # kableExtra::column_spec(column = 1:2, width = "7em")
```


## Frequency tables

:::: {.columns}
::: {.column width="70%"}

```{r}
cat("Midterm scores:", midterms)
```

- Regular frequency table not always appropriate
  - Large number of scores, low frequencies
  
::: {.fragment}
- Solution: Grouped frequency tables
  -  Easier to understand
  -  But lose information
:::
:::

::: {.column width="30%" .table-small .top}
```{r midterms-grouped-histogram}
bc1101tools::frequency_table(midterms)
```
:::

::::

## Grouped frequency table

1. What's the range of scores?
2. How can you turn that into about 10 groups? (using a *simple* number, e.g. 2, 5, 10...)
3. What should we make the bottom score of each interval? (so that the bottom is a multiple of width, i.e, start at 10, not 11)
4. List intervals in $X$ column, frequencies in $f$ column
5. (optional) Create columns for proportion, percent, cumulative percent

## Grouped frequency table

:::: {.columns}

::: {.column width="50%"}
- Grouped frequency table
  - Bins all same width
  - Width is a simple number (2)
  - Bottom score is multiple of width (i.e, divisible by 2)
  - Produces good number of bins
:::

::: {.column width="50%" .table-small}
```{r}
bc1101tools::frequency_table(midterms, binwidth = 2)

```
:::

::::

# Data vizualization {#data-viz .heading-background  background-image="media/snow_map.jpg"}

[[Interactive map]](https://ralucanicola.github.io/cholera-map-3D/)


## Frequency graphs

:::: {.columns}

::: {.column width="60%"}
- Histogram, frequency polygon, bar chart, curve  
- Appropriate type depends on:
  - Level of measurement (nominal; ordinal; interval; ratio)
  - Describing sample or population?
  - Want to show more than one group?
:::

::: {.column width="30%" .top .invertable}

![](media/freq-histogram-small.svg)

![](media/freq-bar-small.svg){style="margin-top: -1em;"}

![](media/freq-poly-small.svg){style="margin-top: -1em;"}

![](media/freq-curve-small.svg){style="margin-top: -1em;"}
:::

::::


## Bar graph

:::: {.columns}

::: {.column width="40%"}
- For nominal or ordinal data
- Categories on $x$-axis, frequency on $y$-axis
- Spaces between adjacent bars indicates separate categories
:::

::: {.column width="60%"}

![](media/freq-bar.svg){.invertable}

:::

::::


## Histogram

:::: {.columns}

::: {.column width="40%"}
- For interval or ratio data 
- Scores/bins on $x$-axis, frequency on $y$-axis
- Height corresponds to frequency
- Bars centered on category  
:::

::: {.column width="60%"}

![](media/freq-histogram.svg){.invertable}

:::

::::


## Grouped histogram

:::: {.columns}

::: {.column width="80%"}
![](media/freq-grouped.svg){.invertable width=100% style="margin-top: 1.5em;"}
:::

::: {.column width="20%" .table-small}
```{r}
bc1101tools::frequency_table(midterms, binwidth = 2)
```
:::

::::


## Frequency polygon {.smaller}

:::: {.columns}
::: {.column width="40%"}
- Basically the same as a histogram
  - Scores on the $X$-axis
  - Frequency on $Y$-axis
  - Dot above the center of each interval
  - Connect dots with a line
  - Close the polygon with lines to the $Y = 0$ point
  - Can also be used with grouped frequency distribution data
:::

::: {.column width="60%"}
::: {.r-stack}
![](media/freq-poly.svg){.invertable}

::: {.fragment .fade-in}
::: {.fragment .fade-out}
![](media/freq-histogram.svg){.invertable style="opacity: 0.5;"}

:::
:::

:::
:::
::::

## Frequency polygon

- Useful for comparing distributions

![](media/freq-poly-groups.svg){.invertable}

## Frequency polygon

- ...where overlapping histograms are harder to understand

![](media/histogram-groups.svg){.invertable-desaturate}


## Population curve {.small}

:::: {.columns}

::: {.column width="40%"}
- Used for population distributions
  - When population is large, scores for each individual are usually not known
  - Smooth curve indicates exact scores were not used
  - Convey relative frequency
:::

::: {.column width="60%"}

![](media/freq-curve.svg){.invertable}

:::

::::




# Learning checks {.small}

:::: {.columns}

::: {.column width="80%"}
1. Use the frequency table to the right to determine how many participants were in the study.
2. Which graph (histogram / frequency polygon / bar chart / curve) is appropriate for showing:
    - Marital status (single/married/divorced)
    - Letter grades (A+, A, A-, B+, etc)
    - Time spent watching Netflix
3. A grouped frequency distribution table has categories 0-9, 10-19, 20-29, and 30-39. What is the width of the interval 20-29?
:::

::: {.column width="20%"}
```{r}
bc1101tools::frequency_table(x = 5:1, f = c(2, 4, 1, 0, 3))
```

:::

::::





::: {.content-hidden}
# Data and figures

## Data

```{r, data}
# generic 'scores' used for generic frequency graph examples
scores <- c(2, 1, 2, 3, 4, 3, 3, 2, 2, 1, 5, 3, 4, 1, 2)

# some actual midterm scores
midterms <- c(41,43,44,45,48,50,51,51,
              52,52,52,53,53,53,54,54,
              55,55,55,55,55,56,56,56,
              56,56,57,57,57,57,58,58,
              58,59,59,59,59,59,59,59)
```

## Cover
:::

```{r ojs-cover-data}
d <- density(scores, to = 6)


df <- data.frame(value = d$x,
                 density = d$y) |> 
  purrr::transpose()

ojs_define(data = df)

```

```{ojs ojs-cover}

coverAnim = {

  const w = 1050
  const h = 500
  
  const x = d3.scaleLinear()
              .domain([0, 6])
              .range([0,w])
  const y = d3.scaleLinear()
              .domain([0, 0.36])
              .range([h,0])
  const line = d3.line()
                .x(d => x(d.value))
                .y(d => y(d.density))
  
  const svg = d3.select("#cover-image")
    .append("svg")
    .attr("width", w)
    .attr("height", h)
    
  const path = svg.append("path")
    .datum(data)
    .attr("d", line)
    .attr("fill", "none")
    .attr("stroke", "black")
    .attr("class", "invertable")
    .attr("stroke-width", 2)
    
  const length = path.node().getTotalLength()
  
  path
    .attr("stroke-dasharray", length + " " + length)
    .attr("stroke-dashoffset", length)
  path
    .transition()
    .duration(2000)
    .attr("stroke-dashoffset", 0)
  
  const sleep = (milliseconds) => {
    return new Promise(resolve => setTimeout(resolve, milliseconds))
  }

  function anim() {
    path
    .transition().duration(2000).attr("stroke-dashoffset", -length)
    .transition().duration(0).attr("stroke-dashoffset", length)
    .transition()
    .duration(3000)
    .attr("stroke-dashoffset", 0)
    .on("end", () => sleep(2000).then(anim))
  };

  svg.on("click", anim);
                
  return svg.node();
  
}

```


```{r cover-ggplot}
#| eval: false

library(ggplot2)

g <- ggplot(data.frame(x = scores), aes(x)) +
  geom_density() +
  scale_x_continuous(limits = c(0, 6)) +
  theme_void()
ggplot2::stat_density(aes(scores))
ggsave(here::here("slides", "covers", "03_frequency.svg"), 
       width = 10, height = 5)


```

::: {.content-hidden}

## 538 screenshot

```{r 538-screenshots, eval=FALSE}
webshot2::webshot(url = "https://projects.fivethirtyeight.com/biden-approval-rating/",
                  selector = "#intro",
                  file = here::here("slides", "media", "538-intro.png"))

webshot2::webshot(url = "https://projects.fivethirtyeight.com/biden-approval-rating/",
                  selector = ".main",
                  file = here::here("slides", "media", "538-chart.png"))

webshot2::webshot(url = "https://projects.fivethirtyeight.com/biden-approval-rating/",
                  selector = ".polls",
                  file = here::here("slides", "media", "538-table.png"))

```

## Frequency graphs

```{r frequency-graphs, eval=FALSE}
library(bc1101tools)
library(ggplot2)
# library(gridExtra)

p <- ggplot(NULL, aes(x = scores)) +
  labs(x = "Scores", y = "Frequency") +
  scale_x_continuous(limits = c(0,6), breaks = 0:6) +
  scale_y_continuous(expand = c(0,0), limits = c(0, 5.5)) +
  papaja::theme_apa(base_size = 18) +
  # theme(axis.title.x = element_text(margin = margin(t = 1))) +
  theme(plot.background = element_blank(),
        panel.background = element_blank(),
        # panel.spac = unit(c(0,0,0,0), "in"),
        # axis.title.x = element_text(margin = margin(t = 10, b = 0))
        ) +
  NULL
pHist
pHist <- p + geom_histogram(binwidth = 1, color = "black", fill = "grey")
pFreq <- p + geom_point(stat = "count") + geom_freqpoly(binwidth = 1)
pBar <- p + geom_bar(stat = "count", color = 'black', fill = 'grey')
pDens <- p + geom_density() + ylab("Proportion") +
  scale_y_continuous(expand = c(0,0), limits = c(0, 0.4))

pHist_Freq <- p + geom_histogram(binwidth = 1, color = "black", fill = "grey") +
  geom_point(stat = "count") +
  geom_freqpoly(binwidth = 1)

# ggplot2::ggsave(here::here("slides/media/freq-histogram.png"), pHist, width = 10, height = 8)
# ggplot2::ggsave(here::here("slides/media/freq-bar.png"), pBar, width = 10, height = 8)
# ggplot2::ggsave(here::here("slides/media/freq-freq-poly.png"), pFreq, width = 10, height = 8)
# ggplot2::ggsave(here::here("slides/media/freq-curve.png"), pDens, width = 10, height = 8)
width <- 6
height <- 5

plot_save("freq-histogram.svg", plot = pHist, width = width, height = height)
plot_save("freq-bar.svg",       plot = pBar,  width = width, height = height)
plot_save("freq-poly.svg",      plot = pFreq, width = width, height = height)
plot_save("freq-curve.svg",     plot = pDens, width = width, height = height)

plot_save("freq-histogram-small.svg", plot = pHist, width = 4, height = 2.5)
plot_save("freq-bar-small.svg",       plot = pBar,  width = 4, height = 2.5)
plot_save("freq-poly-small.svg",      plot = pFreq, width = 4, height = 2.5)
plot_save("freq-curve-small.svg",     plot = pDens, width = 4, height = 2.5)

# vertical strip showing 4 example graphs
g <- gridExtra::arrangeGrob(pHist, pFreq, pBar, pDens, ncol = 1)
ggplot2::ggsave(here::here("slides/media/freq-graphs-demo-long.png"), g, width = 5, height = 12)

# horizontal 
g <- gridExtra::arrangeGrob(pHist, pFreq, nrow = 1)
ggplot2::ggsave(here::here("slides/media/freq-graphs-demo.png"), g, width = 5, height = 2)


# grouped frequency using midterm scores
grouped_hist <- ggplot(NULL, aes(x = midterms)) +
  geom_histogram(binwidth = 2, center = 40.5, closed = 'left', color = 'black', fill = 'grey') +
  scale_x_continuous(breaks = 40:60) +
  scale_y_continuous(breaks = 0:10, expand = c(0,0)) +
  labs(x= "Grouped Midterm Scores", y = "Frequency") +
  theme_bc1101()

plot_save("freq-grouped.svg", plot = grouped_hist, width = 5, height = 3)
# grouped_hist

grouped_histogram <- plot_histogram(midterms, binwidth = 2) + 
  scale_x_continuous(breaks = seq(40, 60, 1)) +
  theme_bc1101()

# grouped_histogram
ggsave(here::here("slides/media/freq-grouped-histogram.png"), grouped_hist, width = 8, height = 6)

```

```{r grouped-freq-poly}
#| eval: false
library(ggplot2)
library(bc1101tools)

scores2 <- c(1,2,3,3,4,4,4,4,4,4,5,5,5,5,5)

freq_dat <- data.frame(set = rep(c("A","B"), each = length(scores)),
                       value = c(scores, scores2))

grouped_poly <- ggplot(freq_dat, aes(x = value, linetype = set)) +
  geom_freqpoly(binwidth = 1) + geom_point(stat = "count") +
  labs(x = "Scores", y = "Frequency") +
  scale_x_continuous(limits = c(0,6), breaks = 0:6) +
  scale_y_continuous(expand = c(0,0)) +
  theme(legend.position = "none") +
  theme_bc1101()
# grouped_poly
plot_save("freq-poly-groups.svg", plot = grouped_poly, width = 6, height = 4)

grouped_hist <- ggplot(freq_dat, aes(x = value, group = set, fill = set)) +
  geom_histogram(binwidth = 1, color = "black", alpha = .5, position = 'identity') +
  labs(x = "Scores", y = "Frequency") +
  scale_fill_manual(values=c("#69b3a2", "#404080")) +
  scale_x_continuous(limits = c(0,6), breaks = 0:6) +
  scale_y_continuous(expand = c(0,0)) +
  theme(legend.position = "none") +
  theme_bc1101()
# grouped_hist
plot_save("histogram-groups.svg", plot = grouped_hist, width = 6, height = 4)


```
```

:::
