---
format: revealjs
---

# 4|CENTRAL TENDENCY

![](covers/04_central-tendency.svg){.invertable}




# Overview

- [Mode](#mode)
- [Median]
- [Mean]
- [Distributions]
- [Learning checks]

# Central tendency

- A number to describe the center of a distribution

- Purpose: 
    - To organize & summarize scores
    - Find the single score that is most typical or best represents the entire group
    - Allow comparisons


## Finding the center

Where is the center of the distribution?

![](media/central-tendency-symmetrical.svg){.invertable}


## Finding the center

Where is the center of the distribution?

![](media/central-tendency-skew.svg){.invertable}

## Finding the center

Where is the center of the distribution?

![](media/central-tendency-bimodal.svg){.invertable}


## Measures of central tendency {.small}

- Imagine you get the following grades:
  - 90, 0, 80, 85, 90
- How do you fairly describe all these scores with a single number?

- Three ways:
  - Mode: grade you get most often
  - Median = grade that divides lowest 50% of scores from highest 50% of scores
  - Mean = sum of grades / # of grades = $\dfrac{\Sigma X} N$
    
    
## Measures of central tendency

- Imagine you get the following grades:
  - 90, 0, 80, 85, 90
- Three ways:
  - Mode = <ins>90</ins>, 0, 80, 85, <ins>90</ins><br><br>
  - Median = 0, 80, <ins>85</ins>, 90, 90<br><br>
  - Mean = (<ins>90</ins> + <ins>0</ins> + <ins>80</ins> + <ins>85</ins> + <ins>90</ins>) / <ins>5</ins> = 69


# Mode

## Mode

- The score/category with the greatest frequency
    - What occurs most often?
   
:::: {.columns style="font-size: 0.75em;"}

::: {.column width="50%"}
```{r}
bc1101tools::frequency_table(5:1, c(1, 2, 4, 5, 3))
```
:::

::: {.column width="50%"}
```{r}
bc1101tools::frequency_table(x =                     c("90-99","80-89","70-79","60-60","50-59","40-49"),
                f = c(7,4,5,3,0,1))

```
:::

::::

## Mode


::: {layout-ncol=2 style="margin-top: 2em;"}
![](media/central-tendency-symmetrical.svg){.invertable}

![](media/central-tendency-skew.svg){.invertable}
:::

![](media/central-tendency-bimodal.svg){.invertable style="margin-top: -1em;"}




## Mode

![](media/central-tendency-bimodal-real.svg){.invertable}


# Median

## Median

- Definition:
  - The midpoint of the scores in a distribution when they are listed in order from smallest to largest
  - Divides the scores into two groups of equal size
  - Equal number of data points either side of the median
  - 50% below, 50% above


## Locating the median

- Put scores in order
- Find the number that gives and equal number of scores on either side

- Odd number of scores
  - Median is the center score

::: {.center-element}

1 2	[3]{style="color: red;"} 4	5

:::

## Locating the median

- Put scores in order
- Find the number that gives and equal number of scores on either side

- Even number of scores:
  - Average the 2 numbers either side of center

::: {.center-element}

1 2	3 [|]{style="color: red;"}	4	5	6

(3 + 4) / 2 = 3.5

65	70	70	80	90	90

65	70	80	80	80	90	92	95

:::



# Mean

## Mean {.smaller}

:::: {.columns}

::: {.column width="70%"}
- What is the "average"?
    - Take a set of scores
    - Add them up
    - Divide by how many there are
- Developed in the 16th century
    - Mainly used by astronomers
- Adolphe Quetelet (1796-1874)
    - Applied the concept to people
    - Size measurements (BMI), divorce, crime, suicide
    - See [*The Atlantic*: How the Idea of a ‘Normal’ Person Got Invented](https://www.theatlantic.com/business/archive/2016/02/the-invention-of-the-normal-person/463365/)
:::

::: {.column width="30%"}
![](media/quetelet.jpg)
:::

::::


## History {.smaller}

:::: {.columns}

::: {.column width="60%"}
- American Civil War
    - Mass production of uniforms
    - Small, Medium, Large
    - Also food rations, weapon design, etc
- 1926: Plane cockpits
    - Based on average measurements
    - By WW2 worked terribly
    - Didn’t fit most pilots
    - Nobody is average on all dimensions
:::

::: {.column width="40%" .top}
![](media/civil-war.png)
![](media/cockpit.jpg)
:::

::::

## Calculating the mean

- Sum of scores divided by number of scores
- Represented by a symbol (unlike mode & median)

:::: {.columns}

::: {.column width="50%"}
Sample:
$M = \dfrac{\Sigma X} n$

(sometimes $\overline{X}$)
:::

::: {.column width="50%"}
Population:
$\mu = \dfrac{\Sigma X} N$
:::

::::

## Visualizing the mean

- Another way of thinking about the mean
  - The balance point for the distribution

::: {.r-stack}

![](media/central-tendency-balance.svg){.invertable width=20em}

![](media/central-tendency-balance-2.svg){.fragment .invertable width=20em}
:::




# Distributions


```{r colors}
mean_color <- "#D81B60"
median_color <- "#1E88E5"
mode_color <- "#FFC107"
```



::: {.center-element}
[mean]{class="invertable" style="color: `r mean_color`;"},
[median]{class="invertable" style="color: `r median_color`;"},
[mode]{class="invertable" style="color: `r mode_color`;"}
:::

::: {layout-ncol=2 .invertable style="margin-top: -2em;"}

::: {.r-stack}
![](media/dist-norm.svg)

![](media/dist-norm-labelled.svg){.fragment fragment-index=1}
:::

::: {.r-stack}
![](media/dist-negative.svg)

![](media/dist-negative-labelled.svg){.fragment fragment-index=1}
:::

:::

::: {layout-ncol=2 .invertable}

::: {.r-stack}
![](media/dist-positive.svg)

![](media/dist-positive-labelled.svg){.fragment fragment-index=1}
:::

::: {.r-stack}
![](media/dist-bimodal.svg)

![](media/dist-bimodal-labelled.svg){.fragment fragment-index=1}
:::

:::


## Distributions: people

- Sensitivity to outliers
  - Extreme values; observations far from the center
  - Mean is more influenced by outliers than median

:::: {.r-hstack}

::: {#distributions-people-container}
:::

::: {#distributions-monopoly-man-container .fragment}
:::

::::


# Summary {.smaller}

- Mode
  - Most useful for nominal/ordinal data
  - Reflects the single most common score
  - Or more complicated (bimodal) distributions
- Median
  - Most useful for interval/ratio data
  - Represents the midpoint in terms of number of scores
  - Less influenced by outliers; helpful for skewed data
- Mean
  - Most useful for interval/ratio data
  - Represents the midpoint in terms of distances of scores
  - More influenced by outliers; best for normal data


# Learning checks {.small}

- __True or False__: It is possible for more than 50% of the scores in a distribution to have values above the:
    a) mode
    b) mean
    c) median

:::: {.columns}
::: {.column}
- What shape is this distribution?
  - What can you predict about its mode, mean, and median?
:::

::: {.column style="margin-top: -2em;"}
![](media/central-tendency-learning-check-dist.svg){.invertable}
:::
::::









::: {.content-hidden}
# Data and figures

## Cover

```{r cover-ggplot}
#| eval: false

set.seed(726)
data <- as.integer(rnorm(30, mean = 50, sd = 3))
bc1101tools::balance_beam(data, size = 0)

ggplot2::ggsave(here::here("slides", "covers", "04_central-tendency.svg          "), width = 10, height = 5)

```

## Mean/median/mode distribution plots

```{r distributions-toy-example}
#| eval: false

library(ggplot2)

distPlot <- function(x, y = NULL) {
  ggplot(NULL, aes(x = x)) + 
    geom_histogram(binwidth = 1, color = 'black', fill = 'grey') +
    scale_x_continuous(limits = c(.5,9.5), breaks = 1:9) +
    scale_y_continuous(expand = c(0,0)) +
    labs(x = "X", y = "Frequency") +
    papaja::theme_apa()
}

transparent_bg <- theme(
    panel.background = element_rect(fill='transparent'), #transparent panel bg
    plot.background = element_rect(fill='transparent', color=NA), #transparent plot bg
    panel.grid.major = element_blank(), #remove major gridlines
    panel.grid.minor = element_blank(), #remove minor gridlines
    legend.background = element_rect(fill='transparent'), #transparent legend bg
    legend.box.background = element_rect(fill='transparent') #transparent legend panel
  )

sym <- c(2,3,3,4,4,4,5,5,5,5,6,6,6,7,7,8)
skew <- c(1,2,3,4,5,6,6,7,7,7,8,8,8,8,9,9)
bi <- c(1,1,2,2,2,2,3,3,7,7,8,8,8,8,9,9)

symPlot <- distPlot(sym) + transparent_bg
ggsave(here::here("slides", "media", "central-tendency-symmetrical.svg"), symPlot, 
       width=4, height = 2, bg = "transparent")
skewPlot <- distPlot(skew) + transparent_bg
ggsave(here::here("slides", "media", "central-tendency-skew.svg"), skewPlot, 
       width=4, height = 2, bg = "transparent")
biPlot <- distPlot(bi) + transparent_bg
ggsave(here::here("slides", "media", "central-tendency-bimodal.svg"), biPlot,
       width=4, height = 2, bg = "transparent")

realBi <- c(2,5,8,6,3,1,2,2,4,6,7)
realBiPlot <- distPlot(rep(0:10, realBi)) +
  scale_x_continuous(limits = c(-.5,10.5), breaks = 0:10) +
  xlab("Tone Identification Score\n(number correct out of 10)") +  transparent_bg

ggsave(here::here("slides", "media", "central-tendency-bimodal-real.svg"), realBiPlot,
       width=4, height = 2, bg = "transparent")
```

```{r eval=FALSE}
gridExtra::grid.arrange(symPlot + labs(x = NULL, y = NULL), 
             skewPlot + labs(x = NULL, y = NULL), 
             biPlot + labs(x = NULL, y = NULL),
               widths = c(1, 1, 1, 1),
  layout_matrix = rbind(c(1, 1, 2, 2),
                        c(NA, 3, 3, NA)))
```

```{r distributions-ggplot}
#| eval: false
library(ggplot2)
library(gridExtra)

geom_mean <- function(plot) {

  pd <- ggplot_build(plot)$data[[1]]
  mean <- sum(pd$y*pd$x)/sum(pd$y)
  yend <- pd$y[which(abs(pd$x-mean)==min(abs(pd$x-mean)))]

  geom_segment(aes(x = mean, xend = mean, y = min(pd$y), yend = yend), color = mean_color, linetype = 3)
}

geom_median <- function(plot) {

  pd <- ggplot_build(plot)$data[[1]]
  vec <- mapply(rep, pd$x, pd$y*100) |>  unlist()
  median <- median(vec)
  yend <- pd$y[which(abs(pd$x-median)==min(abs(pd$x-median)))]

  geom_segment(aes(x = median, xend = median, y = min(pd$y), yend = yend), color = median_color, linetype = 2)
}

geom_mode <- function(plot, bimodal = FALSE) {
  
  if (bimodal) {
    return(geom_bimodal(plot))
  }
  
  pd <- ggplot_build(plot)$data[[1]]
  mode <- dplyr::top_n(pd, 1, y)$x
  yend <- dplyr::top_n(pd, 1, y)$y
  
    
    geom_segment(aes(x = mode, xend = mode, y = min(pd$y), yend = yend), color = mode_color, linetype = 5)
}


geom_bimodal <- function(plot) {
  pd <- ggplot_build(plot)$data[[1]]
  d <- rbind(dplyr::filter(pd, x < 0) |>  dplyr::top_n(1, y),
             dplyr::filter(pd, x > 0) |>  dplyr::top_n(1, y)
  )

  list(
    geom_segment(aes(x = d$x[1], xend = d$x[1], y = min(pd$y), yend = d$y[1]), color = mode_color, linetype = 5),
    geom_segment(aes(x = d$x[2], xend = d$x[2], y = min(pd$y), yend = d$y[2]), color = mode_color, linetype = 5)
  )
}



norm <- ggplot() +
  stat_function(fun = dnorm, xlim = c(-3, 3)) +
  xlab("Normally distributed scores") +
  theme_void() +
  theme(axis.title.x = element_text(vjust = 2))


pos <- ggplot() +
  stat_function(fun = dbeta, args = c(2, 5), xlim = c(0, 1)) +
  xlab("Positively skewed scores") +
  theme_void() +
  theme(axis.title.x = element_text(vjust = 2))


neg <- ggplot() +
  stat_function(fun = dbeta, args = c(5, 2), xlim = c(0, 1)) +
  xlab("Negatively skewed scores") +
  theme_void() +
  theme(axis.title.x = element_text(vjust = 2))

# bimodal curve
x <- seq(-4,4,.1)
set.seed(3)
y <- dnorm(x, mean = -2) + dnorm(x, mean = 2) + rnorm(length(x), mean = .1, sd = .1)
dat <- data.frame(x, y)

bi <- ggplot(dat, aes(x = x, y = y)) +
  ggformula::geom_spline() +
  labs(x = "Bimodal distribution") +
  theme_void() +
  theme(axis.title.x = element_text(vjust = 2))

plots <- list(norm = norm, positive = pos, negative = neg, bimodal = bi)

for (i in seq_along(plots)) {
  
  plot <- plots[[i]]
  name <- names(plots[i])
  bimodal <- ifelse(name=="bimodal", TRUE, FALSE)
  width <- 4
  height <- 2.5
  
  ggsave(plot = plot,
       filename = glue::glue(here::here("slides", "media", "dist-{name}.svg")), width = width, height = height)
       
       ggsave(plot = plot + geom_mode(plot, bimodal) + geom_median(plot) + geom_mean(plot),
              filename = glue::glue(here::here("slides", "media", "dist-{name}-labelled.svg")), width = width, height = height)
}
```

## Balance beam

```{r}
#| eval: false

data <- c(1, 2, 6, 6, 10)

bc1101tools::balance_beam(data)

ggplot2::ggsave(here::here("slides", "media", "central-tendency-balance.svg"), width = 5, height = 2)

bc1101tools::balance_beam(data, label_boxes = TRUE)

ggplot2::ggsave(here::here("slides", "media", "central-tendency-balance-2.svg"), width = 5, height = 2)
```

## Learning check distribution

```{r learning-check-distribution}
#| eval: false

library(ggplot2)
ggplot() +
stat_function(fun = dbeta, args = c(5, 2), xlim = c(0, 1)) +
  theme_void()

ggsave(here::here("slides", "media", "central-tendency-learning-check-dist.svg"),
       width = 5, height = 3)
```


## Distributions: people illustration

:::

```{ojs}

people_illustration = {

  const w = 650
  const h = 400
  const personWidth = 80
  
  const data = [
    {id: 0, income: "$33,000"},
    {id: 1, income: "$34,000"},
    {id: 2, income: "$35,000"},
    {id: 3, income: "$35,000"},
    {id: 4, income: "$35,000"},
    {id: 5, income: "$36,000"},
    {id: 6, income: "$37,000"},
  ]
      
  const svg = d3.select("#distributions-people-container")
    .append("svg").attr("width", w).attr("height", h).attr("class", "invertable")
  
  const imgs = svg.selectAll("image")
    .data(data)
    .enter()
      .append("svg:image")
      .attr('x', d => 50 + d.id * personWidth)
      .attr('y', 50)
      .attr('width', personWidth)
      .attr("xlink:href", "media/person.svg")
      
  const incomes = svg.selectAll("text")
    .data(data)
    .enter()
      .append("text")
      .attr('text-anchor', 'middle')
      .attr('x', d => 50 + personWidth/2 + d.id * personWidth)
      .attr('y', 30)
      .style('font-size', '0.5em')
      .text(d => d.income)

  const mean1 = svg.append("g").selectAll("text")
    .data(['median: $35,000', '<tspan style="font-family: Times; font-style: italic">M</tspan> = $35,000'])
    .enter()
      .append("text")
      .attr('text-anchor', 'middle')
      .attr('x', personWidth * 7/2)
      .attr('y', function(d,i){return 250 + i*50})
      .style('font-size', '0.8em')
      .html(d => d)
}

monopoly_man = {
  const w = 400
  const h = 400
  const personWidth = 80
  
  
  const svg = d3.select("#distributions-monopoly-man-container")
    .append("svg").attr("width", w).attr("height", h).attr("class", "invertable")
    
  svg.append("svg:image")
      .attr('x', 100)
      .attr('y', 30)
      .attr('width', 200)
      <!-- .attr('height', 210) -->
      .attr("xlink:href", "media/monopoly-man.svg")
      
  svg.append("text")
      .attr('text-anchor', 'middle')
      .style('font-size', '0.5em')
      .attr('x', w/2)
      .attr('y', 30)
      .text("$1 billion")
      
  const new_mean = svg.append("g").selectAll("text")
    .data(['new median: $35,000', 'new <tspan style="font-family: Times; font-style: italic">M</tspan> = $125 million'])
    .enter()
      .append("text")
      .attr('text-anchor', 'middle')
      .attr('x', w/2)
      .attr('y', function(d,i){return 250 + i*50})
      .style('font-size', '0.8em')
      .html(d => d)
}

```
