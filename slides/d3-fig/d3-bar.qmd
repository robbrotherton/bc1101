```{r}
bar_data <- tibble::tibble(value = 1:5,
                           density = c(1, 2, 3, 2, 1)) |> 
  purrr::transpose()

ojs_define(bar_data)
```


```{ojs}

margins = ({top: 20, right: 20, bottom: 20, left: 20})


bar_xScale = d3.scaleBand()
  .domain([1,2,3,4,5])
  .range([margins.left, 500 - margins.right])

bar_yScale = d3.scaleLinear()
  .domain([0, 3])
  .range([300 - margins.bottom, margins.top])
    
bar_chart = {

  const svg = d3.select(DOM.svg(500, 300))
    .attr("class", "invertable");
  
  const axis_lines = svg.append("g")
    .attr("stroke", "black")
    .attr("fill", "none")
    
  const bars = svg.append("g")
    .attr("fill", "black")
    .attr("stroke", "none")
  
  bars.selectAll("rect")
    .data(bar_data)
    .enter()
      .append("rect") 
      .attr("transform", "rotate(180)")
      .attr("transform-origin", "center center")
      .attr("x", d => bar_xScale(d.value))
      .attr("y", 20)
      .attr("width", (460/5-5))
      .attr("height", 0)
        .transition()
        .delay(function(d,i){return (6-i) * 300})
        .duration(300)
        .attr("height", d => d.density*260/3)

  const line_data = [
    {x1: 10, x2: 490, y1: 290, y2: 290},
    {x1: 10, x2: 10, y1: 290, y2: 10}
  ]
  
  axis_lines.selectAll("line")
    .data(line_data)
    .enter()
      .append("line")
        .attr("x1", d => d.x1)
        .attr("x2", d => d.x2)
        .attr("y1", d => d.y1)
        .attr("y2", d => d.y2)
    
  return svg.node();
}
```
