---
format: revealjs
---

# 20|REGRESSION

<!-- ![](covers/19_correlation.svg){.invertable} -->

::: {#cover}
:::

```{r ref.label=I('data')}
```

```{r}
options(digits=2)
```

# Overview

- [Purpose]
- [Equations]
- [Hypothesis test]
- [Learning checks]


# Purpose


## Correlation

- Pearson's $r$, bivariate correlation coefficient
- Quantifies the strength of linear relationship between two variables

::: {.r-hstack}
![](media/correlation-weak.svg){.invertable}

![](media/correlation-moderate.svg){.invertable}

![](media/correlation-strong.svg){.invertable}

![](media/correlation-perfect.svg){.invertable}
:::


## Correlation example

:::: {.columns}

::: {.column width="40%"}
```{r}
#| style: "font-size: 0.7em;"
table
```

:::

::: {.column width="50%" .invertable}

::: {.r-stack width="100%"}
![](media/sleep-scatterplot.svg){width="100%" .fragment .fade-out data-fragment-index=1}

![](media/sleep-scatterplot-ellipse.svg){width="100%" .fragment data-fragment-index=1}
:::
:::

::::

::: {.center-element}
$r = \dfrac{SP}{\sqrt{SS_X SS_Y}} = \dfrac{`r d$sp`}{\sqrt{`r d$ss_x`*`r d$ss_y`}} = `r d$r`$
:::

## Regression

:::: {.columns}

::: {.column width="50%"}
- Regression defines the line of best fit
  - Makes relationship easier to see
  - Shows "central tendency" of the relationship
  - Emphasizes [prediction]{.emph}
:::

::: {.column width="50%"}
![](media/sleep-scatterplot-line.svg){.invertable}
:::

::::


## Regression

:::: {.columns}

::: {.column width="50%"}
- Regression defines the line of best fit
  - Makes relationship easier to see
  - Shows "central tendency" of the relationship
  - Emphasizes [prediction]{.emph}
  - Line of best fit is the line that minimizes [prediction error]{.emph}
:::

::: {.column width="50%"}
![](media/sleep-scatterplot-error.svg){.invertable}
:::

::::

  
  
  
# Equations

## Straight line equation

- $Y = bX + a$
  - $X$ and $Y$ are variables
  - $a$ (the intercept) and $b$ (the slope) are constants


:::: {.columns}

::: {.column width="50%"}
```{r ref.label=I('temp-data')}
```

```{r}
#| style: "font-size: 0.65em;"
#| class: "temp-table"
temp_table
```

::: {.center-element .smallest}
$Y = 1.8 X + 32$
:::

:::

::: {.column width="50%"}
<div id="temp-plot" data-prevent-swipe></div>
:::

::::



## Regression {style="font-size: 0.73em;"}

:::: {.columns}

::: {.column width="50%"}
- Regression line equation
  - $\hat{Y} = bX + a$
  - $\hat{Y}$: value of $Y$ predicted by the regression equation for each value of $X$
  - $(Y - \hat{Y})$: residual (deviation of each data point from the regression line) 
  - Regression defines line that minimizes the sum of squared residuals
  - $SS_{residual} = \Sigma(Y - \hat{Y})^2$
  - “Least-squared-error solution”
:::

::: {.column width="50%"}
![](media/sleep-scatterplot-error.svg){.invertable}
:::

::::


## Regression: solving $b$


```{r ref.label=I('data')}
```

:::: {.columns}

::: {.column width="50%"}
- Regression line equation:  $\hat{Y} = bX + a$ 
  - The slope of the line, $b$:

::: {.center-element}

$$\begin{align}
b &= \dfrac{SP}{SS_X} \\
  &= \dfrac{15}{30} \\
  &= 0.5
\end{align}$$

:::
:::

::: {.column width="50%"}
![](media/sleep-scatterplot-error.svg){.invertable}
:::

::::




## Regression: solving $a$

:::: {.columns}

::: {.column width="50%"}
- The intercept of the line, $a$
  - The value of $Y$ when $X = 0$
  - The line goes through $(M_X, M_Y)$ therefore:

::: {.center-element}
$$\begin{align}
a &= M_Y - b * M_X \\
  &= 8 - 0.5 * 7 \\
  &= 4.5
\end{align}$$
:::
:::

::: {.column width="50%"}
![](media/sleep-scatterplot-error.svg){.invertable}
:::

::::

## $SS_{residual}$

:::: {.columns}

::: {.column width="50%"}

```{r}
#| style: "font-size: 0.6em;"
options(digits = 4)
tab <- tibble::tibble(
  x = x,
  y = y,
  yhat = yhat,
  res = y - yhat,
  res2 = res^2
)

knitr::kable(tab, format = "html",
             col.names = c("Sleep", 
                           "Test score",
                           "\\(\\hat{Y}\\)",
                           "\\(Y - \\hat{Y}\\)",
                           "\\((Y - \\hat{Y})^2\\)"))
```

::: {.center-element}

$$\begin{align}
SS_{residual} &= \Sigma(Y - \hat{Y})^2 \\
&= \Sigma(`r (y - yhat)^2`) \\
&= `r sum((y - yhat)^2)`
\end{align}$$
:::

:::

::: {.column width="50%"}
![](media/sleep-scatterplot-error.svg){.invertable}
:::

::::



## Standard error of the estimate {.small}

:::: {.columns}

::: {.column width="50%"}
- $s_{error}$
  - Quantifies precision of regression estimate
  - Average distance of points from the regression line
  - Remember... $s = \sqrt{\dfrac{SS}{df}}$

:::

::: {.column width="50%"}
![](media/sleep-scatterplot-error.svg){.invertable}
:::

::::

::: {.center-element}
$s_{error} = \sqrt{\dfrac{SS_{residual}}{df}}=\sqrt{\dfrac{6.5}{5-2}} = 1.47$
:::



# Hypothesis test


## Analysis of regression

- Partitioning variance (like ANOVA)
  
:::: {.columns}

::: {.column width="50%" style="position: relative; height: 350px;"}

::: {.xx .split style="left: 50%"}
$SS_{Y}$
:::
::: {.xx style="left: 25%; margin-top: 4.5em;"}
$SS_{regression}$
:::
::: {.xx style="left: 75%; margin-top: 4.5em;"}
$SS_{residual}$
:::

:::

::: {.column width="50%" style="position: relative;"}

::: {.xx .split style="left: 50%"}
$df_{Y}$
:::
::: {.xx style="left: 25%; margin-top: 4.5em;"}
$df_{regression}$
:::
::: {.xx style="left: 75%; margin-top: 4.5em;"}
$df_{residual}$
:::

:::

::::

:::: {.columns .center-element style="font-size: 0.8em;"}

::: {.column width="50%" style="margin-top: -2em;"}
$SS_Y = \Sigma(Y - M_Y)^2$

$SS_{residual} = \Sigma(Y - \hat{Y})^2$

$SS_{regression} = SS_Y - SS_{residual}$
:::

::: {.column width="50%" style="margin-top: -2em;"}
$df_Y = n - 1$

$df_{residual} = n - 2$

$df_{regression} = 1$
:::

::::

## Analysis of regression

- Partitioning variance (like ANOVA)
 

::: {.center-element}
$MS_{regression}=\dfrac{SS_{regression}}{df_{regression}} \ \ \ \ \ \ \ \ \ \ MS_{residual}=\dfrac{SS_{residual}}{df_{residual}}$

$F = \dfrac{MS_{regression}}{MS_{residual}}$
:::


## Step 1: Hypotheses

- $H_0$: the slope of the regression line $\beta = 0$
  - i.e., there is no association between variables
  - Knowing $X$ does not help to predict $Y$
- $H_1$: $\beta \ne 0$

## Step 2. Critical region

- Numerator: $df_{regression} = 1$
- Denominator: $df_{residual} = n-2$

```{r}
#| style: "font-size: 0.5em;"
options(digits = 3)

dfs <- setNames(1:10, 1:10)

aov_tab <- purrr::map_df(.x = dfs, ~qf(.95, df1 = 1:10, df2 = .x)) |> 
  t() |>
  as.data.frame() |>
  setNames(1:10) |>
  tibble::rownames_to_column(var = "df_denominator")


knitr::kable(aov_tab, format = "html", escape=FALSE, align = "c", digits = 3,
               col.names = c("\\(df_{denominator}\\)", 1:10)) |>
  kableExtra::add_header_above(c("\\(\\alpha = .05\\)", "\\(df_{numerator}\\)" = 10), escape=FALSE, align = "left")

```


## Step 3. Calculate

```{r}
#| style: "font-size: 0.8em;"
reg_table <- knitr::kable(data.frame(Participant = LETTERS[1:5],
                        Sleep = x,
                        Score = y),
             col.names = c("Participant",
                           "Amount of sleep <br> (\\(X\\))",
                           "Test score <br> (\\(Y\\))"),
             escape = FALSE,
             align = "c")

reg_table
```

:::: {.columns .center-element style="font-size: 0.8em;"}

::: {.column width="50%"}

$SS_{Y} = 14$

$SS_{residual} = 6.5$

$SS_{regression} = 7.5$

:::

::: {.column width="50%"}
$df_Y = 4$

$df_{residual} = 3$

$df_{regression} = 1$
:::

::::

## Step 3. Calculate

```{r}
#| style: "font-size: 0.8em;"
reg_table
```

:::: {.center-element style="font-size: 0.8em;"}

$MS_{regression} = \dfrac{SS_{regression}}{df_{regression}} = \dfrac{7.5}{1} = 7.5$

$MS_{residual} = \dfrac{SS_{residual}}{df_{residual}} = \dfrac{6.5}{3} = 2.17$

::::


## Step 3. Calculate

```{r}
#| style: "font-size: 0.8em;"
reg_table
```

:::: {.center-element style="font-size: 0.8em;"}

$F = \dfrac{MS_{regression}}{MS_{residual}} = \dfrac{7.5}{2.17} = 3.46$

::::

## Step 4. Make decision

- $F > F_{critical}$?
  - Reject or fail to reject $H_0$, no relationship in population
- Step 4b: Effect size
  - $r^2$: Coefficient of determination
  - Proportion of variance explaianed by the regression

::: {.center-element}
$r^2 = \dfrac{SS_{regression}}{SS_Y} = \dfrac{7.5}{14} = 0.54$
:::

## Step 5. Report

> Longer sleep duration was associated with an increase in test performance, $b = `r b`$. However, the association was nonsignificant; $F(1, 3) = 3.46$, $p > .05$.

# Learning checks

::: {.center-element}
[CONCEPT]{.emph} [is most closely related to]{.small} [CONCEPT]{.emph}
:::

:::: {.columns .center-element}

::: {.column width="50%"}
Residuals

Sum of squared residuals

$s_{error}$

$MS_{regression}$
:::

::: {.column width="50%"}
$SS$

$SP$

$s^2$

$s$

$(X-M)$
:::

::::







::: {.content-hidden}

# Data and figures

## Data for sleep example

```{r data}
x <-  c(4,5,7,8,11)
y <-  c(5,8,8,10,9)

SSx <- sum( (x - mean(x))^2 )
SSy <- sum( (y - mean(y))^2 )
SP <- sum( (x - mean(x)) * (y - mean(y)))
b <- SP/SSx
a <- mean(y) - b * mean(x)
yhat <- b * x + a

d <- bc1101tools::example_correlation(x, y)

table <- knitr::kable(data.frame(LETTERS[1:5], x, y), format = "html", col.names = c("Participant", "Sleep duration", "Test score"))
```

```{r}
#| eval: false

SSx <- sum( (x - mean(x))^2 )
SSy <- sum( (y - mean(y))^2 )
SP <- sum( (x - mean(x)) * (y - mean(y)))
b <- SP/SSx
a <- mean(y) - b * mean(x)
yhat <- b * x + a

library(ggplot2)
library(bc1101tools)

plot <- ggplot(data = data.frame(x, y), aes(x, y)) +
  geom_point(size = 3) +
  scale_x_continuous(limits = c(0, 12), breaks = 0:12,) +
  scale_y_continuous(limits = c(0, 12), breaks = 0:10) +
  labs(x = "Sleep duration", y = "Test score") +
  theme_bc1101() +
  theme(axis.title = element_text(size = 20),
        axis.text = element_text(size = 15))

plot
plot_save("sleep-scatterplot.svg", width = 5, height = 4)


plot+ stat_ellipse(level = 0.8)
plot_save("sleep-scatterplot-ellipse.svg", width = 5, height = 4)


plot + geom_smooth(method = "lm", se = FALSE, fullrange = TRUE, color = "dodgerblue")
plot_save("sleep-scatterplot-line.svg", width = 5, height = 4)

plot + 
  geom_smooth(method = "lm", se = FALSE, fullrange = TRUE, color = "dodgerblue") +
  geom_segment(aes(x = x, xend = x,
                   y = y, yend = yhat),
               color = "red", linetype = 2)

plot_save("sleep-scatterplot-error.svg", width = 5, height = 4)

```

## Temperature

```{r temp-data}
temp_df <- tibble::tibble(
  celcius = c(seq(0, 50, 10)),
  fahrenheit = celcius * 1.8 + 32
)


temp_table <- knitr::kable(temp_df, format = "html", col.names = c("Celcius", "Fahrenheit"))
```


```{r}
#| eval: false

temp_plot <- ggplot(temp_df, aes(x = celcius, y = fahrenheit)) +
  geom_point() +
  theme_bc1101()

# temp_plot
```


## Cover

```{r cover-data}

library(ggplot2)
library(dplyr)
set.seed(41)

data <- faux::rnorm_multi(n = 300, vars = 2, r = .5)

SSx <- sum( (data$X1 - mean(data$X1))^2 )
SSy <- sum( (data$X2 - mean(data$X2))^2 )
SP <- sum( (data$X1 - mean(data$X1)) * (data$X2 - mean(data$X2)))
b <- SP/SSx
a <- mean(data$X2) - b * mean(data$X1)

data <- data |> 
  mutate(yhat = b * X1 + a)

ojs_point_data <- data |> 
  select(xVal = X1, yVal = X2, yhat) |> 
  purrr::transpose()

ojs_line_data <- data |> arrange(X1) |> slice(c(1, n())) |> 
  select(xVal = X1, yVal = yhat) |> 
  unlist()

ojs_define(ojs_point_data)
ojs_define(ojs_line_data)
```


```{r cover-ggplot}
#| eval: false

data |> 
  # mutate(yhat = b * X1 + a) |> 
  ggplot(aes(x = X1, y = X2)) +
  # scale_color_gradient(low = "black", high = "grey") +
  geom_point() +
  geom_smooth(method = "lm", color = "dodgerblue", se = FALSE, alpha = 0.1) +
  theme_void() +
  theme(legend.position = "none")

bc1101tools::plot_save("20_regression.svg", subdir = "covers", width = 10, height = 5)

```

:::

```{ojs}

cover = {

  const w = 1050
  const h = 525
  
  const x = d3.scaleLinear()
    .domain([-2.7, 2.7])
    .range([0, w])
  const y = d3.scaleLinear()
    .domain([-2.9, 2.8])
    .range([h, 0])
    
  const svg = d3.select("#cover").append("svg").attr("width", w).attr("height", h)
  
  svg.selectAll("circle").data(ojs_point_data).enter()
    .append("circle")
      .attr("cx", d => x(d.xVal))
      .attr("cy", d => y(d.yVal))
      .attr("r", 5)
      .style("fill", "var(--text-color")
      
  svg.append("line")
      .attr("x1", x(ojs_line_data[0]))
      .attr("x2", x(ojs_line_data[1]))
      .attr("y1", y(ojs_line_data[2]))
      .attr("y2", y(ojs_line_data[3]))
      .style("stroke", "lightblue")
      .style("stroke-width", 3)
  
}

```

::: {.content-hidden}

## Temperature OJS 

:::

```{ojs}

temp = {

  const w = 500
  const h = 350
  const margin = {top: 10, right: 10, bottom: 30, left: 50}
  
  function f(c) {
    return c * 1.8 + 32
  }
  
  const x = d3.scaleLinear()
    .domain([-30, 60])
    .range([margin.left, w-margin.right])
  const y = d3.scaleLinear()
    .domain([0, 150])
    .range([h-margin.bottom, margin.top])
  const xAxis = d3.axisBottom(x)
  const yAxis = d3.axisLeft(y)
    
  const svg = d3.select("#temp-plot").append("svg").attr("width", w).attr("height", h)
    .attr("id", "temp-svg")
  
  const points = [0,10,20,30,40,50]
  
  const gx = svg.append("g")
  .attr("transform", `translate(0, ${y(0)})`)
  gx.call(xAxis)
  const gy = svg.append("g")
  .attr("transform", `translate(${x(-30)}, 0)`)
  gy.call(yAxis)
  const axisTitles = svg.append("g")
    .style("fill", "var(--text-color)")
    .style("font-size", "0.5em")
  axisTitles.append("text").text("°C")
    .attr("transform", `translate(${w / 2}, ${h})`)
  axisTitles.append("text").text("°F")
    .attr("transform", `translate(0, ${h/2})`)
    
    
      
  svg.append("line")
      .attr("x1", x(-18))
      .attr("x2", x(60))
      .attr("y1", y(f(-18)))
      .attr("y2", y(f(60)))
      .style("stroke", "var(--link-color)")
      .style("stroke-width", 3)
  
  svg.selectAll("circle").data(points).enter()
    .append("circle")
      .attr("cx", d => x(d))
      .attr("cy", d => y(d * 1.8 + 32))
      .attr("r", 5)
      .style("fill", "var(--text-color)")

    
const circle = svg.append("g").append("circle")
  .attr("r", 8)
  .style("fill", "none")
  .style("stroke", "red")
  .style("stroke-width", 2)
  .style("stroke-dasharray", [3,3])
  
const path = svg.append("path")
  .style("stroke", "red")
  .style("stroke-width", 2)
  .style("stroke-dasharray", [5, 5])
  .style("fill", "none")
  
const labels = svg.append("g").style("font-size", "0.6em").style("fill", "var(--text-color)")
const label_c = labels.append("text")
const label_f = labels.append("text")

  <!-- const overlayRect = svg.append('rect') -->
  <!--   .style("fill", "none") -->
  <!--   .style("pointer-events", "all") -->
  <!--   .attr("x", x(-30)).attr("y", y(150)) -->
  <!--   .attr('width', w - margin.left - margin.right) -->
  <!--   .attr('height', h - margin.top) -->
  <!--   .on('mousemove', mousemove) -->

const round = d3.format(".1f")

d3.select(".temp-table").selectAll("tr").on("mouseover", getNumberFromTable)

function getNumberFromTable() {
    try {
      var num = d3.select(this).select("td")._groups[0][0].innerHTML;
    } catch {} finally {updateOverlay(num);}
  }

function updateOverlay(xCoord) {
    if(isNaN(xCoord)) return false;
    var x0 = x(xCoord);
    var y0 = y(f(xCoord));
    
    circle
      .attr("cx", x0)
      .attr("cy", y0)
      
    var line = d3.line()
    path.attr("d", line([[x(-30),y0],[x0,y0],[x0,y(0)]]))
    
    label_c.text(round(xCoord) + "°C").attr("x", x(xCoord)).attr("y", y(0))
    label_f.text(round(f(xCoord)) + "°F").attr("x", x(-30)).attr("y", y0)
}
  const plotParams = {xMin: -30, xMax: 60,
                      yMin: 0, yMax: 150}
  plotParams.xRange = plotParams.xMax - plotParams.xMin;
  plotParams.yRange = plotParams.yMax - plotParams.yMin;
  
  svg.on("mousemove", mousemove)
function mousemove(e) {
    var elem = document.getElementById("temp-svg");
    var svgX = Math.round(elem.getBoundingClientRect().x);
    var svgW = elem.getBoundingClientRect().width;
    <!-- console.log(svgX); -->

    var pixel = d3.pointer(e)[0];
    <!-- console.log(pixel); -->
    <!-- var celcius = pixel_to_x(pixel - svgX, svgW); -->
    var celcius = x.invert(pixel);
    console.log("svgX: " + svgX + "; pixel: " + pixel + "; adjusted pixel: " + (pixel - svgX));
    celcius = Math.round(celcius * 10)/10;
    celcius = Math.max(-18, celcius);
    updateOverlay(celcius);
    }
    
  function pixel_to_x(pixel, screenWidth) {
    var displayRatio = screenWidth / w;
    var panelWidth = screenWidth - margin.left*displayRatio - margin.right*displayRatio;
    var b = plotParams.xRange / panelWidth;
    var a = plotParams.xMin - b * margin.left*displayRatio;
    var x = pixel * b + a;
    console.log("pixel: " + pixel + "; celcius: " + x);
    return (x);
  }

  updateOverlay(0);
  
}

```


#

:::{.center-element}
🥳
:::
